!function(e){var t={};function o(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(i,s,function(t){return e[t]}.bind(null,s));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=44)}({1:function(e,t,o){var i,s,n={},r=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===s&&(s=i.apply(this,arguments)),s}),a=function(e,t){return t?t.querySelector(e):document.querySelector(e)},l=function(e){var t={};return function(e,o){if("function"==typeof e)return e();if(void 0===t[e]){var i=a.call(this,e,o);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),c=null,h=0,p=[],u=o(4);function f(e,t){for(var o=0;o<e.length;o++){var i=e[o],s=n[i.id];if(s){s.refs++;for(var r=0;r<s.parts.length;r++)s.parts[r](i.parts[r]);for(;r<i.parts.length;r++)s.parts.push(b(i.parts[r],t))}else{var a=[];for(r=0;r<i.parts.length;r++)a.push(b(i.parts[r],t));n[i.id]={id:i.id,refs:1,parts:a}}}}function d(e,t){for(var o=[],i={},s=0;s<e.length;s++){var n=e[s],r=t.base?n[0]+t.base:n[0],a={css:n[1],media:n[2],sourceMap:n[3]};i[r]?i[r].parts.push(a):o.push(i[r]={id:r,parts:[a]})}return o}function y(e,t){var o=l(e.insertInto);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=p[p.length-1];if("top"===e.insertAt)i?i.nextSibling?o.insertBefore(t,i.nextSibling):o.appendChild(t):o.insertBefore(t,o.firstChild),p.push(t);else if("bottom"===e.insertAt)o.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var s=l(e.insertAt.before,o);o.insertBefore(t,s)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=p.indexOf(e);t>=0&&p.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return o.nc}();i&&(e.attrs.nonce=i)}return m(t,e.attrs),y(e,t),t}function m(e,t){Object.keys(t).forEach((function(o){e.setAttribute(o,t[o])}))}function b(e,t){var o,i,s,n;if(t.transform&&e.css){if(!(n="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=n}if(t.singleton){var r=h++;o=c||(c=v(t)),i=w.bind(null,o,r,!1),s=w.bind(null,o,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(o=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),y(e,t),t}(t),i=S.bind(null,o,t),s=function(){g(o),o.href&&URL.revokeObjectURL(o.href)}):(o=v(t),i=k.bind(null,o),s=function(){g(o)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else s()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var o=d(e,t);return f(o,t),function(e){for(var i=[],s=0;s<o.length;s++){var r=o[s];(a=n[r.id]).refs--,i.push(a)}e&&f(d(e,t),t);for(s=0;s<i.length;s++){var a;if(0===(a=i[s]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete n[a.id]}}}};var x,_=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function w(e,t,o,i){var s=o?"":i.css;if(e.styleSheet)e.styleSheet.cssText=_(t,s);else{var n=document.createTextNode(s),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(n,r[t]):e.appendChild(n)}}function k(e,t){var o=t.css,i=t.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}function S(e,t,o){var i=o.css,s=o.sourceMap,n=void 0===t.convertToAbsoluteUrls&&s;(t.convertToAbsoluteUrls||n)&&(i=u(i)),s&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */");var r=new Blob([i],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}},2:function(e,t,o){var i=o(3);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};o(1)(i,s);i.locals&&(e.exports=i.locals)},3:function(e,t,o){},4:function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var o=t.protocol+"//"+t.host,i=o+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var s,n=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(n)?e:(s=0===n.indexOf("//")?n:0===n.indexOf("/")?o+n:i+n.replace(/^\.\//,""),"url("+JSON.stringify(s)+")")}))}},44:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),o(2),o(45),o(5),o(7)},45:function(e,t,o){var i=o(46);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};o(1)(i,s);i.locals&&(e.exports=i.locals)},46:function(e,t,o){},5:function(e,t){new function(){this.init=function(){this.generateUI(),this.getOptions(),this.fillOptions(),this.bind([this.c.lock],"click",this.proxy("toggleLock")),this.bind([this.c.show],"click",this.proxy("toggleShow")),this.bind([this.c.close],"click",this.proxy("toggleEntry")),this.bind([this.c.url,this.c.position.x,this.c.position.y,this.c.opacity,this.c.zIndex],"keyup",this.proxy("updateOptions")),this.bind([this.c.position.x,this.c.position.y,this.c.opacity,this.c.zIndex],"keydown",this.proxy("valueChange")),this.bind([this.c.head,this.layer],"mousedown",this.proxy("dragTo")),this.bind([this.c.head,this.layer],"dragstart",(function(e){e.preventDefault()}))},this.generateUI=function(){this.pf=document.createElement("div"),this.pf.className=this.o.namespaces.wrapper,this.pf.innerHTML='<div class="pf_head" data-pf="head"><ul class="pf_layer-control"><li data-pf="show" class="pf_icon __off"></li><li data-pf="lock" class="pf_icon __unlock"></li></ul><h3 data-pf="close" class="pf_title">Toxin</h3></div><div data-pf="entry" class="pf_entry __visible"><form action="#" class="pf_form"><fieldset class="pf_field_wrap"><div class="pf_field"><label>URL</label><input type="text" name="url"/></div></fieldset><fieldset class="pf_field_group"><div class="pf_field __first"><label>X</label><input type="text" name="pos-x"/></div><div class="pf_field"><label>Y</label><input type="text" name="pos-y"/></div></fieldset><fieldset class="pf_field_group"><div class="pf_field __first"><label>Opacity</label><input type="text" name="opacity"/></div><div class="pf_field"><label>z-Index</label><input type="text" name="zindex"/></div></fieldset></form></div>',this.layer=document.createElement("div"),this.layer.className=this.o.namespaces.layer,this.c={head:this.pf.querySelector('[data-pf="head"]'),show:this.pf.querySelector('[data-pf="show"]'),lock:this.pf.querySelector('[data-pf="lock"]'),close:this.pf.querySelector('[data-pf="close"]'),entry:this.pf.querySelector('[data-pf="entry"]'),url:this.pf.querySelector('[name="url"]'),position:{x:this.pf.querySelector('[name="pos-x"]'),y:this.pf.querySelector('[name="pos-y"]')},opacity:this.pf.querySelector('[name="opacity"]'),zIndex:this.pf.querySelector('[name="zindex"]')},document.body.appendChild(this.pf),document.body.appendChild(this.layer)},this.saveOptions=function(){localStorage.Perfetto=!0,localStorage["Perfetto.o.position"]=this.o.position,localStorage["Perfetto.o.close"]=this.o.close,localStorage["Perfetto.o.layer.current"]=this.o.layer.current,localStorage["Perfetto.o.layer.show"]=this.o.layer.show,localStorage["Perfetto.o.layer.lock"]=this.o.layer.lock,localStorage["Perfetto.o.layer.url"]=this.o.layer.url,localStorage["Perfetto.o.layer.position"]=this.o.layer.position,localStorage["Perfetto.o.layer.opacity"]=this.o.layer.opacity,localStorage["Perfetto.o.layer.zIndex"]=this.o.layer.zIndex},this.getOptions=function(){if("true"===localStorage.Perfetto){var e=localStorage["Perfetto.o.position"].split(","),t=localStorage["Perfetto.o.layer.position"].split(",");this.o.position=[parseInt(e[0]),parseInt(e[1])],this.o.close="true"===localStorage["Perfetto.o.close"],this.o.layer.current=parseInt(localStorage["Perfetto.o.layer.current"]),this.o.layer.show="true"===localStorage["Perfetto.o.layer.show"],this.o.layer.lock="true"===localStorage["Perfetto.o.layer.lock"],this.o.layer.url=localStorage["Perfetto.o.layer.url"],this.o.layer.position=[parseInt(t[0]),parseInt(t[1])],this.o.layer.opacity=parseFloat(localStorage["Perfetto.o.layer.opacity"]),this.o.layer.zIndex=parseInt(localStorage["Perfetto.o.layer.zIndex"])}},this.fillOptions=function(){this.pf.style.left=this.o.position[0]+"px",this.pf.style.top=this.o.position[1]+"px ",this.o.close?this.toggleEntryToHidden():this.toggleEntryToVisible(),this.o.layer.show?this.toggleShowToVisible():this.toggleShowToHidden(),this.o.layer.lock?this.toggleLockToLocked():this.toggleLockToUnlocked(),this.c.url.value=this.o.layer.url,this.changeURL(),this.c.position.x.value=this.o.layer.position[0],this.c.position.y.value=this.o.layer.position[1],this.changePosition(),this.c.opacity.value=this.o.layer.opacity,this.changeOpacity(),this.c.zIndex.value=this.o.layer.zIndex,this.changeZIndex()},this.updateOptions=function(e){switch(e.currentTarget.name){case"url":this.o.layer.url=this.c.url.value,this.changeURL();break;case"pos-x":this.o.layer.position[0]=this.c.position.x.value,this.changePosition();break;case"pos-y":this.o.layer.position[1]=this.c.position.y.value,this.changePosition();break;case"opacity":this.o.layer.opacity=this.c.opacity.value,this.changeOpacity();break;case"zindex":this.o.layer.zIndex=this.c.zIndex.value,this.changeZIndex()}this.saveOptions()},this.valueChange=function(e){if(38==e.keyCode)"opacity"==e.currentTarget.name?((t=10*e.currentTarget.value+1)>10&&(t=10),this.c.opacity.value=t/10):("pos-x"==e.currentTarget.name||"pos-y"==e.currentTarget.name)&&this.o.layer.lock||e.currentTarget.value++;else if(40==e.keyCode){var t;if("opacity"==e.currentTarget.name)(t=10*e.currentTarget.value-1)<0&&(t=0),this.c.opacity.value=t/10;else("pos-x"==e.currentTarget.name||"pos-y"==e.currentTarget.name)&&this.o.layer.lock||e.currentTarget.value--}},this.dragTo=function(e){var t=this,o=e.currentTarget;if(o==this.c.head&&(o=this.pf),o.className!=t.o.namespaces.layer||o.className==t.o.namespaces.layer&&!t.o.layer.lock){var i=function(e){var i=e.pageX-s,r=e.pageY-n;o.style.left=i+"px",o.style.top=r+"px",o.className==t.o.namespaces.wrapper&&(t.o.position[0]=i,t.o.position[1]=r),o.className==t.o.namespaces.layer&&(t.c.position.x.value=t.o.layer.position[0]=i,t.c.position.y.value=t.o.layer.position[1]=r),t.saveOptions()},s=e.pageX-o.offsetLeft,n=e.pageY-o.offsetTop;t.bind([document],"mousemove",i),t.bind([document],"mouseup",(function e(){t.unbind([document],"mousemove",i),t.unbind([document],"mouseup",e)}))}},this.toggleLock=function(){this.o.layer.lock?(this.toggleLockToUnlocked(),this.o.layer.lock=!1):(this.toggleLockToLocked(),this.o.layer.lock=!0),this.saveOptions()},this.toggleLockToLocked=function(){this.removeClass(this.c.lock,"__unlock"),this.addClass(this.c.lock,"__lock")},this.toggleLockToUnlocked=function(){this.removeClass(this.c.lock,"__lock"),this.addClass(this.c.lock,"__unlock")},this.toggleShow=function(){this.o.layer.show?(this.toggleShowToHidden(),this.o.layer.show=!1):(this.toggleShowToVisible(),this.o.layer.show=!0),this.saveOptions()},this.toggleShowToVisible=function(){this.removeClass(this.c.show,"__off"),this.addClass(this.c.show,"__on"),this.layer.style.display="block"},this.toggleShowToHidden=function(){this.removeClass(this.c.show,"__on"),this.addClass(this.c.show,"__off"),this.layer.style.display="none"},this.toggleEntry=function(){this.o.close?(this.toggleEntryToVisible(),this.o.close=!1):(this.toggleEntryToHidden(),this.o.close=!0),this.saveOptions()},this.toggleEntryToVisible=function(){this.addClass(this.c.entry,"__visible"),this.c.entry.style.display="block"},this.toggleEntryToHidden=function(){this.removeClass(this.c.entry,"__visible"),this.c.entry.style.display="none"},this.changeURL=function(){this.layer.innerHTML='<img src="'+this.o.layer.url+'"/>'},this.changePosition=function(){this.layer.style.left=this.o.layer.position[0]+"px",this.layer.style.top=this.o.layer.position[1]+"px"},this.changeOpacity=function(){this.layer.style.opacity=this.o.layer.opacity},this.changeZIndex=function(){this.layer.style.zIndex=this.o.layer.zIndex},this.hasClass=function(e,t){return new RegExp(" "+t+" ").test(" "+e.className+" ")},this.addClass=function(e,t){this.hasClass(e,t)||(e.className+=" "+t)},this.removeClass=function(e,t){var o=" "+e.className.replace(/[\t\r\n]/g," ")+" ";if(this.hasClass(e,t)){for(;o.indexOf(" "+t+" ")>=0;)o=o.replace(" "+t+" "," ");e.className=o.replace(/^\s+|\s+$/g,"")}},this.bind=function(e,t,o){for(var i=0;i<e.length;i++)e[i].addEventListener?e[i].addEventListener(t,o):e[i].attachEvent("on"+t,o)},this.unbind=function(e,t,o){for(var i=0;i<e.length;i++)e[i].removeEventListener?e[i].removeEventListener(t,o):e[i].detachEvent("on"+t,o)},this.proxy=function(e,t,o){return o=o||this,t=t||[],"string"==typeof e&&(e=o[e]),function(){for(var i=t.slice(),s=0;s<arguments.length;s++)void 0!==i[s]&&null!==i[s]||(i[s]=arguments[s]);return e.apply(o,i)}},this.o={namespaces:{wrapper:"pf",layer:"pf_layer"},position:[15,15],close:!1,layer:{current:0,show:!0,lock:!1,url:"/perfetto/layers/index.jpg",position:[0,0],opacity:.5,zIndex:1e3}},this.init()}},7:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(8);window.addEventListener("load",(function(){document.querySelectorAll(".header-main").forEach(e=>new i.Burger(e))}))},8:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Burger=void 0;t.Burger=class{constructor(e){this.playMenu(e)}playMenu(e){let t=e.querySelector(".header-main__nav"),o=e.querySelector(".header-main__burger-menu");o.addEventListener("click",(function(){o.classList.toggle("header-main__burger-open"),t.classList.toggle("header-main__open-menu")}))}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,