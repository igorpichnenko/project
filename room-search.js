!function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=38)}([function(e,t,i){var n;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,i){"use strict";"object"==typeof e.exports?e.exports=t.document?i(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return i(e)}:i(t)}("undefined"!=typeof window?window:this,(function(i,o){"use strict";var s=[],r=Object.getPrototypeOf,a=s.slice,l=s.flat?function(e){return s.flat.call(e)}:function(e){return s.concat.apply([],e)},c=s.push,u=s.indexOf,d={},p=d.toString,h=d.hasOwnProperty,f=h.toString,m=f.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},b=i.document,k={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,i){var n,o,s=(i=i||b).createElement("script");if(s.text=e,t)for(n in k)(o=t[n]||t.getAttribute&&t.getAttribute(n))&&s.setAttribute(n,o);i.head.appendChild(s).parentNode.removeChild(s)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!v(e)&&!y(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.5.1",constructor:T,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,i){return e.call(t,i,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:s.sort,splice:s.splice},T.extend=T.fn.extend=function(){var e,t,i,n,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||v(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(c&&n&&(T.isPlainObject(n)||(o=Array.isArray(n)))?(i=r[t],s=o&&!Array.isArray(i)?[]:o||T.isPlainObject(i)?i:{},o=!1,r[t]=T.extend(c,s,n)):void 0!==n&&(r[t]=n));return r},T.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==p.call(e))&&(!(t=r(e))||"function"==typeof(i=h.call(t,"constructor")&&t.constructor)&&f.call(i)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){w(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,n=0;if(S(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(S(Object(e))?T.merge(i,"string"==typeof e?[e]:e):c.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:u.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,o=e.length;n<i;n++)e[o++]=t[n];return e.length=o,e},grep:function(e,t,i){for(var n=[],o=0,s=e.length,r=!i;o<s;o++)!t(e[o],o)!==r&&n.push(e[o]);return n},map:function(e,t,i){var n,o,s=0,r=[];if(S(e))for(n=e.length;s<n;s++)null!=(o=t(e[s],s,i))&&r.push(o);else for(s in e)null!=(o=t(e[s],s,i))&&r.push(o);return l(r)},guid:1,support:g}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=s[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var C=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,i,n,o,s,r,a,l,c,u,d,p,h,f,m,g,v,y,b,k="sizzle"+1*new Date,w=e.document,x=0,T=0,S=le(),C=le(),D=le(),_=le(),$=function(e,t){return e===t&&(d=!0),0},E={}.hasOwnProperty,M=[],P=M.pop,A=M.push,N=M.push,j=M.slice,L=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}"+O+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",B="\\["+O+"*("+R+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+O+"*\\]",q=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",I=new RegExp(O+"+","g"),F=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),z=new RegExp("^"+O+"*,"+O+"*"),U=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),V=new RegExp(O+"|>"),W=new RegExp(q),Y=new RegExp("^"+R+"$"),G={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+O+"?|\\\\([^\\r\\n\\f])","g"),ie=function(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},ne=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=function(){p()},re=ke((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{N.apply(M=j.call(w.childNodes),w.childNodes),M[w.childNodes.length].nodeType}catch(e){N={apply:M.length?function(e,t){A.apply(e,j.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ae(e,t,n,o){var s,a,c,u,d,f,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return n;if(!o&&(p(t),t=t||h,m)){if(11!==w&&(d=Z.exec(e)))if(s=d[1]){if(9===w){if(!(c=t.getElementById(s)))return n;if(c.id===s)return n.push(c),n}else if(y&&(c=y.getElementById(s))&&b(t,c)&&c.id===s)return n.push(c),n}else{if(d[2])return N.apply(n,t.getElementsByTagName(e)),n;if((s=d[3])&&i.getElementsByClassName&&t.getElementsByClassName)return N.apply(n,t.getElementsByClassName(s)),n}if(i.qsa&&!_[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&(V.test(e)||U.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&i.scope||((u=t.getAttribute("id"))?u=u.replace(ne,oe):t.setAttribute("id",u=k)),a=(f=r(e)).length;a--;)f[a]=(u?"#"+u:":scope")+" "+be(f[a]);v=f.join(",")}try{return N.apply(n,y.querySelectorAll(v)),n}catch(t){_(e,!0)}finally{u===k&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,n,o)}function le(){var e=[];return function t(i,o){return e.push(i+" ")>n.cacheLength&&delete t[e.shift()],t[i+" "]=o}}function ce(e){return e[k]=!0,e}function ue(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var i=e.split("|"),o=i.length;o--;)n.attrHandle[i[o]]=t}function pe(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ce((function(t){return t=+t,ce((function(i,n){for(var o,s=e([],i.length,t),r=s.length;r--;)i[o=s[r]]&&(i[o]=!(n[o]=i[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in i=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!X.test(t||i&&i.nodeName||"HTML")},p=ae.setDocument=function(e){var t,o,r=e?e.ownerDocument||e:w;return r!=h&&9===r.nodeType&&r.documentElement?(f=(h=r).documentElement,m=!s(h),w!=h&&(o=h.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",se,!1):o.attachEvent&&o.attachEvent("onunload",se)),i.scope=ue((function(e){return f.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),i.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),i.getElementsByTagName=ue((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),i.getElementsByClassName=Q.test(h.getElementsByClassName),i.getById=ue((function(e){return f.appendChild(e).id=k,!h.getElementsByName||!h.getElementsByName(k).length})),i.getById?(n.filter.ID=function(e){var t=e.replace(te,ie);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var i=t.getElementById(e);return i?[i]:[]}}):(n.filter.ID=function(e){var t=e.replace(te,ie);return function(e){var i=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var i,n,o,s=t.getElementById(e);if(s){if((i=s.getAttributeNode("id"))&&i.value===e)return[s];for(o=t.getElementsByName(e),n=0;s=o[n++];)if((i=s.getAttributeNode("id"))&&i.value===e)return[s]}return[]}}),n.find.TAG=i.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):i.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],o=0,s=t.getElementsByTagName(e);if("*"===e){for(;i=s[o++];)1===i.nodeType&&n.push(i);return n}return s},n.find.CLASS=i.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(i.qsa=Q.test(h.querySelectorAll))&&(ue((function(e){var t;f.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+O+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+O+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+k+"-]").length||g.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+O+"*name"+O+"*="+O+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+O+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(i.matchesSelector=Q.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ue((function(e){i.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",q)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(f.compareDocumentPosition),b=t||Q.test(f.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},$=t?function(e,t){if(e===t)return d=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!i.sortDetached&&t.compareDocumentPosition(e)===n?e==h||e.ownerDocument==w&&b(w,e)?-1:t==h||t.ownerDocument==w&&b(w,t)?1:u?L(u,e)-L(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return d=!0,0;var i,n=0,o=e.parentNode,s=t.parentNode,r=[e],a=[t];if(!o||!s)return e==h?-1:t==h?1:o?-1:s?1:u?L(u,e)-L(u,t):0;if(o===s)return pe(e,t);for(i=e;i=i.parentNode;)r.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?pe(r[n],a[n]):r[n]==w?-1:a[n]==w?1:0},h):h},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),i.matchesSelector&&m&&!_[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var n=y.call(e,t);if(n||i.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){_(t,!0)}return ae(t,h,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=h&&p(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=h&&p(e);var o=n.attrHandle[t.toLowerCase()],s=o&&E.call(n.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==s?s:i.attributes||!m?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},ae.escape=function(e){return(e+"").replace(ne,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],o=0,s=0;if(d=!i.detectDuplicates,u=!i.sortStable&&e.slice(0),e.sort($),d){for(;t=e[s++];)t===e[s]&&(o=n.push(s));for(;o--;)e.splice(n[o],1)}return u=null,e},o=ae.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=o(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=o(t);return i},(n=ae.selectors={cacheLength:50,createPseudo:ce,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ie),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ie),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&W.test(i)&&(t=r(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ie).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&S(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,i){return function(n){var o=ae.attr(n,e);return null==o?"!="===t:!t||(o+="","="===t?o===i:"!="===t?o!==i:"^="===t?i&&0===o.indexOf(i):"*="===t?i&&o.indexOf(i)>-1:"$="===t?i&&o.slice(-i.length)===i:"~="===t?(" "+o.replace(I," ")+" ").indexOf(i)>-1:"|="===t&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,i,n,o){var s="nth"!==e.slice(0,3),r="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===o?function(e){return!!e.parentNode}:function(t,i,l){var c,u,d,p,h,f,m=s!==r?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(s){for(;m;){for(p=t;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(b=(h=(c=(u=(d=(p=g)[k]||(p[k]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===x&&c[1])&&c[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[x,h,b];break}}else if(y&&(b=h=(c=(u=(d=(p=t)[k]||(p[k]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===x&&c[1]),!1===b)for(;(p=++h&&p&&p[m]||(b=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((u=(d=p[k]||(p[k]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[x,b]),p!==t)););return(b-=o)===n||b%n==0&&b/n>=0}}},PSEUDO:function(e,t){var i,o=n.pseudos[e]||n.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[k]?o(t):o.length>1?(i=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,i){for(var n,s=o(e,t),r=s.length;r--;)e[n=L(e,s[r])]=!(i[n]=s[r])})):function(e){return o(e,0,i)}):o}},pseudos:{not:ce((function(e){var t=[],i=[],n=a(e.replace(F,"$1"));return n[k]?ce((function(e,t,i,o){for(var s,r=n(e,null,o,[]),a=e.length;a--;)(s=r[a])&&(e[a]=!(t[a]=s))})):function(e,o,s){return t[0]=e,n(t,null,s,i),t[0]=null,!i.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ie),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return Y.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ie).toLowerCase(),function(t){var i;do{if(i=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(i=i.toLowerCase())===e||0===i.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,i){return[i<0?i+t:i]})),even:ge((function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e})),odd:ge((function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e})),lt:ge((function(e,t,i){for(var n=i<0?i+t:i>t?t:i;--n>=0;)e.push(n);return e})),gt:ge((function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=fe(t);function ye(){}function be(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function ke(e,t,i){var n=t.dir,o=t.next,s=o||n,r=i&&"parentNode"===s,a=T++;return t.first?function(t,i,o){for(;t=t[n];)if(1===t.nodeType||r)return e(t,i,o);return!1}:function(t,i,l){var c,u,d,p=[x,a];if(l){for(;t=t[n];)if((1===t.nodeType||r)&&e(t,i,l))return!0}else for(;t=t[n];)if(1===t.nodeType||r)if(u=(d=t[k]||(t[k]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[n]||t;else{if((c=u[s])&&c[0]===x&&c[1]===a)return p[2]=c[2];if(u[s]=p,p[2]=e(t,i,l))return!0}return!1}}function we(e){return e.length>1?function(t,i,n){for(var o=e.length;o--;)if(!e[o](t,i,n))return!1;return!0}:e[0]}function xe(e,t,i,n,o){for(var s,r=[],a=0,l=e.length,c=null!=t;a<l;a++)(s=e[a])&&(i&&!i(s,n,o)||(r.push(s),c&&t.push(a)));return r}function Te(e,t,i,n,o,s){return n&&!n[k]&&(n=Te(n)),o&&!o[k]&&(o=Te(o,s)),ce((function(s,r,a,l){var c,u,d,p=[],h=[],f=r.length,m=s||function(e,t,i){for(var n=0,o=t.length;n<o;n++)ae(e,t[n],i);return i}(t||"*",a.nodeType?[a]:a,[]),g=!e||!s&&t?m:xe(m,p,e,a,l),v=i?o||(s?e:f||n)?[]:r:g;if(i&&i(g,v,a,l),n)for(c=xe(v,h),n(c,[],a,l),u=c.length;u--;)(d=c[u])&&(v[h[u]]=!(g[h[u]]=d));if(s){if(o||e){if(o){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(g[u]=d);o(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=o?L(s,d):p[u])>-1&&(s[c]=!(r[c]=d))}}else v=xe(v===r?v.splice(f,v.length):v),o?o(null,r,v,l):N.apply(r,v)}))}function Se(e){for(var t,i,o,s=e.length,r=n.relative[e[0].type],a=r||n.relative[" "],l=r?1:0,u=ke((function(e){return e===t}),a,!0),d=ke((function(e){return L(t,e)>-1}),a,!0),p=[function(e,i,n){var o=!r&&(n||i!==c)||((t=i).nodeType?u(e,i,n):d(e,i,n));return t=null,o}];l<s;l++)if(i=n.relative[e[l].type])p=[ke(we(p),i)];else{if((i=n.filter[e[l].type].apply(null,e[l].matches))[k]){for(o=++l;o<s&&!n.relative[e[o].type];o++);return Te(l>1&&we(p),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),i,l<o&&Se(e.slice(l,o)),o<s&&Se(e=e.slice(o)),o<s&&be(e))}p.push(i)}return we(p)}return ye.prototype=n.filters=n.pseudos,n.setFilters=new ye,r=ae.tokenize=function(e,t){var i,o,s,r,a,l,c,u=C[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=n.preFilter;a;){for(r in i&&!(o=z.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(s=[])),i=!1,(o=U.exec(a))&&(i=o.shift(),s.push({value:i,type:o[0].replace(F," ")}),a=a.slice(i.length)),n.filter)!(o=G[r].exec(a))||c[r]&&!(o=c[r](o))||(i=o.shift(),s.push({value:i,type:r,matches:o}),a=a.slice(i.length));if(!i)break}return t?a.length:a?ae.error(e):C(e,l).slice(0)},a=ae.compile=function(e,t){var i,o=[],s=[],a=D[e+" "];if(!a){for(t||(t=r(e)),i=t.length;i--;)(a=Se(t[i]))[k]?o.push(a):s.push(a);(a=D(e,function(e,t){var i=t.length>0,o=e.length>0,s=function(s,r,a,l,u){var d,f,g,v=0,y="0",b=s&&[],k=[],w=c,T=s||o&&n.find.TAG("*",u),S=x+=null==w?1:Math.random()||.1,C=T.length;for(u&&(c=r==h||r||u);y!==C&&null!=(d=T[y]);y++){if(o&&d){for(f=0,r||d.ownerDocument==h||(p(d),a=!m);g=e[f++];)if(g(d,r||h,a)){l.push(d);break}u&&(x=S)}i&&((d=!g&&d)&&v--,s&&b.push(d))}if(v+=y,i&&y!==v){for(f=0;g=t[f++];)g(b,k,r,a);if(s){if(v>0)for(;y--;)b[y]||k[y]||(k[y]=P.call(l));k=xe(k)}N.apply(l,k),u&&!s&&k.length>0&&v+t.length>1&&ae.uniqueSort(l)}return u&&(x=S,c=w),b};return i?ce(s):s}(s,o))).selector=e}return a},l=ae.select=function(e,t,i,o){var s,l,c,u,d,p="function"==typeof e&&e,h=!o&&r(e=p.selector||e);if(i=i||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&n.relative[l[1].type]){if(!(t=(n.find.ID(c.matches[0].replace(te,ie),t)||[])[0]))return i;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(s=G.needsContext.test(e)?0:l.length;s--&&(c=l[s],!n.relative[u=c.type]);)if((d=n.find[u])&&(o=d(c.matches[0].replace(te,ie),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(s,1),!(e=o.length&&be(l)))return N.apply(i,o),i;break}}return(p||a(e,h))(o,t,!m,i,!t||ee.test(e)&&ve(t.parentNode)||t),i},i.sortStable=k.split("").sort($).join("")===k,i.detectDuplicates=!!d,p(),i.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),i.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(H,(function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null})),ae}(i);T.find=C,T.expr=C.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=C.uniqueSort,T.text=C.getText,T.isXMLDoc=C.isXML,T.contains=C.contains,T.escapeSelector=C.escape;var D=function(e,t,i){for(var n=[],o=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&T(e).is(i))break;n.push(e)}return n},_=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},$=T.expr.match.needsContext;function E(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,t,i){return v(t)?T.grep(e,(function(e,n){return!!t.call(e,n,e)!==i})):t.nodeType?T.grep(e,(function(e){return e===t!==i})):"string"!=typeof t?T.grep(e,(function(e){return u.call(t,e)>-1!==i})):T.filter(t,e,i)}T.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?T.find.matchesSelector(n,e)?[n]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,i,n=this.length,o=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<n;t++)if(T.contains(o[t],this))return!0})));for(i=this.pushStack([]),t=0;t<n;t++)T.find(e,o[t],i);return n>1?T.uniqueSort(i):i},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&$.test(e)?T(e):e||[],!1).length}});var A,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,i){var n,o;if(!e)return this;if(i=i||A,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:N.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),M.test(n[1])&&T.isPlainObject(t))for(n in t)v(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(o=b.getElementById(n[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==i.ready?i.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,A=T(b);var j=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),i=t.length;return this.filter((function(){for(var e=0;e<i;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var i,n=0,o=this.length,s=[],r="string"!=typeof e&&T(e);if(!$.test(e))for(;n<o;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&T.find.matchesSelector(i,e))){s.push(i);break}return this.pushStack(s.length>1?T.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?u.call(T(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return D(e,"parentNode")},parentsUntil:function(e,t,i){return D(e,"parentNode",i)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return D(e,"nextSibling")},prevAll:function(e){return D(e,"previousSibling")},nextUntil:function(e,t,i){return D(e,"nextSibling",i)},prevUntil:function(e,t,i){return D(e,"previousSibling",i)},siblings:function(e){return _((e.parentNode||{}).firstChild,e)},children:function(e){return _(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(E(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(i,n){var o=T.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(o=T.filter(n,o)),this.length>1&&(L[e]||T.uniqueSort(o),j.test(e)&&o.reverse()),this.pushStack(o)}}));var O=/[^\x20\t\r\n\f]+/g;function R(e){return e}function B(e){throw e}function q(e,t,i,n){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(i):e&&v(o=e.then)?o.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(O)||[],(function(e,i){t[i]=!0})),t}(e):T.extend({},e);var t,i,n,o,s=[],r=[],a=-1,l=function(){for(o=o||e.once,n=t=!0;r.length;a=-1)for(i=r.shift();++a<s.length;)!1===s[a].apply(i[0],i[1])&&e.stopOnFalse&&(a=s.length,i=!1);e.memory||(i=!1),t=!1,o&&(s=i?[]:"")},c={add:function(){return s&&(i&&!t&&(a=s.length-1,r.push(i)),function t(i){T.each(i,(function(i,n){v(n)?e.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==x(n)&&t(n)}))}(arguments),i&&!t&&l()),this},remove:function(){return T.each(arguments,(function(e,t){for(var i;(i=T.inArray(t,s,i))>-1;)s.splice(i,1),i<=a&&a--})),this},has:function(e){return e?T.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return o=r=[],s=i="",this},disabled:function(){return!s},lock:function(){return o=r=[],i||t||(s=i=""),this},locked:function(){return!!o},fireWith:function(e,i){return o||(i=[e,(i=i||[]).slice?i.slice():i],r.push(i),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(i){T.each(t,(function(t,n){var o=v(e[n[4]])&&e[n[4]];s[n[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var s=0;function r(e,t,n,o){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(e<s)){if((i=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?o?c.call(i,r(s,t,R,o),r(s,t,B,o)):(s++,c.call(i,r(s,t,R,o),r(s,t,B,o),r(s,t,R,t.notifyWith))):(n!==R&&(a=void 0,l=[i]),(o||t.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(i){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(i,u.stackTrace),e+1>=s&&(n!==B&&(a=void 0,l=[i]),t.rejectWith(a,l))}};e?u():(T.Deferred.getStackHook&&(u.stackTrace=T.Deferred.getStackHook()),i.setTimeout(u))}}return T.Deferred((function(i){t[0][3].add(r(0,i,v(o)?o:R,i.notifyWith)),t[1][3].add(r(0,i,v(e)?e:R)),t[2][3].add(r(0,i,v(n)?n:B))})).promise()},promise:function(e){return null!=e?T.extend(e,o):o}},s={};return T.each(t,(function(e,i){var r=i[2],a=i[5];o[i[1]]=r.add,a&&r.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),r.add(i[3].fire),s[i[0]]=function(){return s[i[0]+"With"](this===s?void 0:this,arguments),this},s[i[0]+"With"]=r.fireWith})),o.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,i=t,n=Array(i),o=a.call(arguments),s=T.Deferred(),r=function(e){return function(i){n[e]=this,o[e]=arguments.length>1?a.call(arguments):i,--t||s.resolveWith(n,o)}};if(t<=1&&(q(e,s.done(r(i)).resolve,s.reject,!t),"pending"===s.state()||v(o[i]&&o[i].then)))return s.then();for(;i--;)q(o[i],r(i),s.reject);return s.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&I.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){i.setTimeout((function(){throw e}))};var F=T.Deferred();function z(){b.removeEventListener("DOMContentLoaded",z),i.removeEventListener("load",z),T.ready()}T.fn.ready=function(e){return F.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||F.resolveWith(b,[T]))}}),T.ready.then=F.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(T.ready):(b.addEventListener("DOMContentLoaded",z),i.addEventListener("load",z));var U=function(e,t,i,n,o,s,r){var a=0,l=e.length,c=null==i;if("object"===x(i))for(a in o=!0,i)U(e,t,a,i[a],!0,s,r);else if(void 0!==n&&(o=!0,v(n)||(r=!0),c&&(r?(t.call(e,n),t=null):(c=t,t=function(e,t,i){return c.call(T(e),i)})),t))for(;a<l;a++)t(e[a],i,r?n:n.call(e[a],a,t(e[a],i)));return o?e:c?t.call(e):l?t(e[0],i):s},V=/^-ms-/,W=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function G(e){return e.replace(V,"ms-").replace(W,Y)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function J(){this.expando=T.expando+J.uid++}J.uid=1,J.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,o=this.cache(e);if("string"==typeof t)o[G(t)]=i;else for(n in t)o[G(n)]=t[n];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(G):(t=G(t))in n?[t]:t.match(O)||[]).length;for(;i--;)delete n[t[i]]}(void 0===t||T.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var K=new J,Q=new J,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(i)}catch(e){}Q.set(e,t,i)}else i=void 0;return i}T.extend({hasData:function(e){return Q.hasData(e)||K.hasData(e)},data:function(e,t,i){return Q.access(e,t,i)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,i){return K.access(e,t,i)},_removeData:function(e,t){K.remove(e,t)}}),T.fn.extend({data:function(e,t){var i,n,o,s=this[0],r=s&&s.attributes;if(void 0===e){if(this.length&&(o=Q.get(s),1===s.nodeType&&!K.get(s,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=G(n.slice(5)),te(s,n,o[n]));K.set(s,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){Q.set(this,e)})):U(this,(function(t){var i;if(s&&void 0===t)return void 0!==(i=Q.get(s,e))||void 0!==(i=te(s,e))?i:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),T.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=K.get(e,t),i&&(!n||Array.isArray(i)?n=K.access(e,t,T.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=T.queue(e,t),n=i.length,o=i.shift(),s=T._queueHooks(e,t);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===t&&i.unshift("inprogress"),delete s.stop,o.call(e,(function(){T.dequeue(e,t)}),s)),!n&&s&&s.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return K.get(e,i)||K.access(e,i,{empty:T.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",i])}))})}}),T.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?T.queue(this[0],e):void 0===t?this:this.each((function(){var i=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,o=T.Deferred(),s=this,r=this.length,a=function(){--n||o.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";r--;)(i=K.get(s[r],e+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),o.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=b.documentElement,re=function(e){return T.contains(e.ownerDocument,e)},ae={composed:!0};se.getRootNode&&(re=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&re(e)&&"none"===T.css(e,"display")};function ce(e,t,i,n){var o,s,r=20,a=n?function(){return n.cur()}:function(){return T.css(e,t,"")},l=a(),c=i&&i[3]||(T.cssNumber[t]?"":"px"),u=e.nodeType&&(T.cssNumber[t]||"px"!==c&&+l)&&ne.exec(T.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;r--;)T.style(e,t,u+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),u/=s;u*=2,T.style(e,t,u+c),i=i||[]}return i&&(u=+u||+l||0,o=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=u,n.end=o)),o}var ue={};function de(e){var t,i=e.ownerDocument,n=e.nodeName,o=ue[n];return o||(t=i.body.appendChild(i.createElement(n)),o=T.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ue[n]=o,o)}function pe(e,t){for(var i,n,o=[],s=0,r=e.length;s<r;s++)(n=e[s]).style&&(i=n.style.display,t?("none"===i&&(o[s]=K.get(n,"display")||null,o[s]||(n.style.display="")),""===n.style.display&&le(n)&&(o[s]=de(n))):"none"!==i&&(o[s]="none",K.set(n,"display",i)));for(s=0;s<r;s++)null!=o[s]&&(e[s].style.display=o[s]);return e}T.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?T(this).show():T(this).hide()}))}});var he,fe,me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(fe=b.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),he.appendChild(fe),g.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",g.option=!!he.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&E(e,t)?T.merge([e],i):i}function ke(e,t){for(var i=0,n=e.length;i<n;i++)K.set(e[i],"globalEval",!t||K.get(t[i],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,g.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function xe(e,t,i,n,o){for(var s,r,a,l,c,u,d=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((s=e[h])||0===s)if("object"===x(s))T.merge(p,s.nodeType?[s]:s);else if(we.test(s)){for(r=r||d.appendChild(t.createElement("div")),a=(ge.exec(s)||["",""])[1].toLowerCase(),l=ye[a]||ye._default,r.innerHTML=l[1]+T.htmlPrefilter(s)+l[2],u=l[0];u--;)r=r.lastChild;T.merge(p,r.childNodes),(r=d.firstChild).textContent=""}else p.push(t.createTextNode(s));for(d.textContent="",h=0;s=p[h++];)if(n&&T.inArray(s,n)>-1)o&&o.push(s);else if(c=re(s),r=be(d.appendChild(s),"script"),c&&ke(r),i)for(u=0;s=r[u++];)ve.test(s.type||"")&&i.push(s);return d}var Te=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function De(){return!0}function _e(){return!1}function $e(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,i,n,o,s){var r,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)Ee(e,a,i,n,t[a],s);return e}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=_e;else if(!o)return e;return 1===s&&(r=o,(o=function(e){return T().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=T.guid++)),e.each((function(){T.event.add(this,t,o,n,i)}))}function Me(e,t,i){i?(K.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var n,o,s=K.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=a.call(arguments),K.set(this,t,s),n=i(this,t),this[t](),s!==(o=K.get(this,t))||n?K.set(this,t,!1):o={},s!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else s.length&&(K.set(this,t,{value:T.event.trigger(T.extend(s[0],T.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&T.event.add(e,t,De)}T.event={global:{},add:function(e,t,i,n,o){var s,r,a,l,c,u,d,p,h,f,m,g=K.get(e);if(X(e))for(i.handler&&(i=(s=i).handler,o=s.selector),o&&T.find.matchesSelector(se,o),i.guid||(i.guid=T.guid++),(l=g.events)||(l=g.events=Object.create(null)),(r=g.handle)||(r=g.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(O)||[""]).length;c--;)h=m=(a=Ce.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),h&&(d=T.event.special[h]||{},h=(o?d.delegateType:d.bindType)||h,d=T.event.special[h]||{},u=T.extend({type:h,origType:m,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:f.join(".")},s),(p=l[h])||((p=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,n,f,r)||e.addEventListener&&e.addEventListener(h,r)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=i.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),T.event.global[h]=!0)},remove:function(e,t,i,n,o){var s,r,a,l,c,u,d,p,h,f,m,g=K.hasData(e)&&K.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(O)||[""]).length;c--;)if(h=m=(a=Ce.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),h){for(d=T.event.special[h]||{},p=l[h=(n?d.delegateType:d.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=p.length;s--;)u=p[s],!o&&m!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(p.splice(s,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));r&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,f,g.handle)||T.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)T.event.remove(e,h+t[c],i,n,!0);T.isEmptyObject(l)&&K.remove(e,"handle events")}},dispatch:function(e){var t,i,n,o,s,r,a=new Array(arguments.length),l=T.event.fix(e),c=(K.get(this,"events")||Object.create(null))[l.type]||[],u=T.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(r=T.event.handlers.call(this,l,c),t=0;(o=r[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(n=((T.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,n,o,s,r,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[o=(n=t[i]).selector+" "]&&(r[o]=n.needsContext?T(o,this).index(c)>-1:T.find(o,this,null,[c]).length),r[o]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&E(t,"input")&&Me(t,"click",De),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&E(t,"input")&&Me(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&E(t,"input")&&K.get(t,"click")||E(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?De:_e,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:_e,isPropagationStopped:_e,isImmediatePropagationStopped:_e,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=De,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=De,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=De,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){T.event.special[e]={setup:function(){return Me(this,e,$e),!1},trigger:function(){return Me(this,e),!0},delegateType:t}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,o=e.relatedTarget,s=e.handleObj;return o&&(o===n||T.contains(n,o))||(e.type=s.origType,i=s.handler.apply(this,arguments),e.type=t),i}}})),T.fn.extend({on:function(e,t,i,n){return Ee(this,e,t,i,n)},one:function(e,t,i,n){return Ee(this,e,t,i,n,1)},off:function(e,t,i){var n,o;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,T(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=_e),this.each((function(){T.event.remove(this,e,i,t)}))}});var Pe=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return E(e,"table")&&E(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var i,n,o,s,r,a;if(1===t.nodeType){if(K.hasData(e)&&(a=K.get(e).events))for(o in K.remove(t,"handle events"),a)for(i=0,n=a[o].length;i<n;i++)T.event.add(t,o,a[o][i]);Q.hasData(e)&&(s=Q.access(e),r=T.extend({},s),Q.set(t,r))}}function Re(e,t){var i=t.nodeName.toLowerCase();"input"===i&&me.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function Be(e,t,i,n){t=l(t);var o,s,r,a,c,u,d=0,p=e.length,h=p-1,f=t[0],m=v(f);if(m||p>1&&"string"==typeof f&&!g.checkClone&&Ae.test(f))return e.each((function(o){var s=e.eq(o);m&&(t[0]=f.call(this,o,s.html())),Be(s,t,i,n)}));if(p&&(s=(o=xe(t,e[0].ownerDocument,!1,e,n)).firstChild,1===o.childNodes.length&&(o=s),s||n)){for(a=(r=T.map(be(o,"script"),Le)).length;d<p;d++)c=o,d!==h&&(c=T.clone(c,!0,!0),a&&T.merge(r,be(c,"script"))),i.call(e[d],c,d);if(a)for(u=r[r.length-1].ownerDocument,T.map(r,He),d=0;d<a;d++)c=r[d],ve.test(c.type||"")&&!K.access(c,"globalEval")&&T.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?T._evalUrl&&!c.noModule&&T._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(Ne,""),c,u))}return e}function qe(e,t,i){for(var n,o=t?T.filter(t,e):e,s=0;null!=(n=o[s]);s++)i||1!==n.nodeType||T.cleanData(be(n)),n.parentNode&&(i&&re(n)&&ke(be(n,"script")),n.parentNode.removeChild(n));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var n,o,s,r,a=e.cloneNode(!0),l=re(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(r=be(a),n=0,o=(s=be(e)).length;n<o;n++)Re(s[n],r[n]);if(t)if(i)for(s=s||be(e),r=r||be(a),n=0,o=s.length;n<o;n++)Oe(s[n],r[n]);else Oe(e,a);return(r=be(a,"script")).length>0&&ke(r,!l&&be(e,"script")),a},cleanData:function(e){for(var t,i,n,o=T.event.special,s=0;void 0!==(i=e[s]);s++)if(X(i)){if(t=i[K.expando]){if(t.events)for(n in t.events)o[n]?T.event.remove(i,n):T.removeEvent(i,n,t.handle);i[K.expando]=void 0}i[Q.expando]&&(i[Q.expando]=void 0)}}}),T.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return U(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Be(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Be(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Be(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Be(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!ye[(ge.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(T.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Be(this,arguments,(function(t){var i=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(be(this)),i&&i.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var i,n=[],o=T(e),s=o.length-1,r=0;r<=s;r++)i=r===s?this:this.clone(!0),T(o[r])[t](i),c.apply(n,i.get());return this.pushStack(n)}}));var Ie=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},ze=function(e,t,i){var n,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in n=i.call(e),t)e.style[o]=s[o];return n},Ue=new RegExp(oe.join("|"),"i");function Ve(e,t,i){var n,o,s,r,a=e.style;return(i=i||Fe(e))&&(""!==(r=i.getPropertyValue(t)||i[t])||re(e)||(r=T.style(e,t)),!g.pixelBoxStyles()&&Ie.test(r)&&Ue.test(t)&&(n=a.width,o=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=o,a.maxWidth=s)),void 0!==r?r+"":r}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(c).appendChild(u);var e=i.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",r=36===t(e.right),o=36===t(e.width),u.style.position="absolute",s=12===t(u.offsetWidth/3),se.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,o,s,r,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,T.extend(g,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),r},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),s},reliableTrDimensions:function(){var e,t,n,o;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",se.appendChild(e).appendChild(t).appendChild(n),o=i.getComputedStyle(t),a=parseInt(o.height)>3,se.removeChild(e)),a}}))}();var Ye=["Webkit","Moz","ms"],Ge=b.createElement("div").style,Xe={};function Je(e){var t=T.cssProps[e]||Xe[e];return t||(e in Ge?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=Ye.length;i--;)if((e=Ye[i]+t)in Ge)return e}(e)||e)}var Ke=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,i){var n=ne.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function it(e,t,i,n,o,s){var r="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=T.css(e,i+oe[r],!0,o)),n?("content"===i&&(l-=T.css(e,"padding"+oe[r],!0,o)),"margin"!==i&&(l-=T.css(e,"border"+oe[r]+"Width",!0,o))):(l+=T.css(e,"padding"+oe[r],!0,o),"padding"!==i?l+=T.css(e,"border"+oe[r]+"Width",!0,o):a+=T.css(e,"border"+oe[r]+"Width",!0,o));return!n&&s>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))||0),l}function nt(e,t,i){var n=Fe(e),o=(!g.boxSizingReliable()||i)&&"border-box"===T.css(e,"boxSizing",!1,n),s=o,r=Ve(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ie.test(r)){if(!i)return r;r="auto"}return(!g.boxSizingReliable()&&o||!g.reliableTrDimensions()&&E(e,"tr")||"auto"===r||!parseFloat(r)&&"inline"===T.css(e,"display",!1,n))&&e.getClientRects().length&&(o="border-box"===T.css(e,"boxSizing",!1,n),(s=a in e)&&(r=e[a])),(r=parseFloat(r)||0)+it(e,t,i||(o?"border":"content"),s,n,r)+"px"}function ot(e,t,i,n,o){return new ot.prototype.init(e,t,i,n,o)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Ve(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,s,r,a=G(t),l=Qe.test(t),c=e.style;if(l||(t=Je(a)),r=T.cssHooks[t]||T.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(o=r.get(e,!1,n))?o:c[t];"string"===(s=typeof i)&&(o=ne.exec(i))&&o[1]&&(i=ce(e,t,o),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=o&&o[3]||(T.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==i||0!==t.indexOf("background")||(c[t]="inherit"),r&&"set"in r&&void 0===(i=r.set(e,i,n))||(l?c.setProperty(t,i):c[t]=i))}},css:function(e,t,i,n){var o,s,r,a=G(t);return Qe.test(t)||(t=Je(a)),(r=T.cssHooks[t]||T.cssHooks[a])&&"get"in r&&(o=r.get(e,!0,i)),void 0===o&&(o=Ve(e,t,n)),"normal"===o&&t in et&&(o=et[t]),""===i||i?(s=parseFloat(o),!0===i||isFinite(s)?s||0:o):o}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,i,n){if(i)return!Ke.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,n):ze(e,Ze,(function(){return nt(e,t,n)}))},set:function(e,i,n){var o,s=Fe(e),r=!g.scrollboxSize()&&"absolute"===s.position,a=(r||n)&&"border-box"===T.css(e,"boxSizing",!1,s),l=n?it(e,t,n,a,s):0;return a&&r&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-it(e,t,"border",!1,s)-.5)),l&&(o=ne.exec(i))&&"px"!==(o[3]||"px")&&(e.style[t]=i,i=T.css(e,t)),tt(0,i,l)}}})),T.cssHooks.marginLeft=We(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ve(e,"marginLeft"))||e.getBoundingClientRect().left-ze(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(i){for(var n=0,o={},s="string"==typeof i?i.split(" "):[i];n<4;n++)o[e+oe[n]+t]=s[n]||s[n-2]||s[0];return o}},"margin"!==e&&(T.cssHooks[e+t].set=tt)})),T.fn.extend({css:function(e,t){return U(this,(function(e,t,i){var n,o,s={},r=0;if(Array.isArray(t)){for(n=Fe(e),o=t.length;r<o;r++)s[t[r]]=T.css(e,t[r],!1,n);return s}return void 0!==i?T.style(e,t,i):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,i,n,o,s){this.elem=e,this.prop=i,this.easing=o||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=s||(T.cssNumber[i]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,i=ot.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=ot.prototype.init,T.fx.step={};var st,rt,at=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ct(){rt&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(ct):i.setTimeout(ct,T.fx.interval),T.fx.tick())}function ut(){return i.setTimeout((function(){st=void 0})),st=Date.now()}function dt(e,t){var i,n=0,o={height:e};for(t=t?1:0;n<4;n+=2-t)o["margin"+(i=oe[n])]=o["padding"+i]=e;return t&&(o.opacity=o.width=e),o}function pt(e,t,i){for(var n,o=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),s=0,r=o.length;s<r;s++)if(n=o[s].call(i,t,e))return n}function ht(e,t,i){var n,o,s=0,r=ht.prefilters.length,a=T.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=st||ut(),i=Math.max(0,c.startTime+c.duration-t),n=1-(i/c.duration||0),s=0,r=c.tweens.length;s<r;s++)c.tweens[s].run(n);return a.notifyWith(e,[c,n,i]),n<1&&r?i:(r||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},i),originalProperties:t,originalOptions:i,startTime:st||ut(),duration:i.duration,tweens:[],createTween:function(t,i){var n=T.Tween(e,c.opts,t,i,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var i=0,n=t?c.tweens.length:0;if(o)return this;for(o=!0;i<n;i++)c.tweens[i].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var i,n,o,s,r;for(i in e)if(o=t[n=G(i)],s=e[i],Array.isArray(s)&&(o=s[1],s=e[i]=s[0]),i!==n&&(e[n]=s,delete e[i]),(r=T.cssHooks[n])&&"expand"in r)for(i in s=r.expand(s),delete e[n],s)i in e||(e[i]=s[i],t[i]=o);else t[n]=o}(u,c.opts.specialEasing);s<r;s++)if(n=ht.prefilters[s].call(c,e,u,c.opts))return v(n.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return T.map(u,pt,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(ht,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return ce(i.elem,e,ne.exec(t),i),i}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(O);for(var i,n=0,o=e.length;n<o;n++)i=e[n],ht.tweeners[i]=ht.tweeners[i]||[],ht.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,o,s,r,a,l,c,u,d="width"in t||"height"in t,p=this,h={},f=e.style,m=e.nodeType&&le(e),g=K.get(e,"fxshow");for(n in i.queue||(null==(r=T._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always((function(){p.always((function(){r.unqueued--,T.queue(e,"fx").length||r.empty.fire()}))}))),t)if(o=t[n],at.test(o)){if(delete t[n],s=s||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;m=!0}h[n]=g&&g[n]||T.style(e,n)}if((l=!T.isEmptyObject(t))||!T.isEmptyObject(h))for(n in d&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=K.get(e,"display")),"none"===(u=T.css(e,"display"))&&(c?u=c:(pe([e],!0),c=e.style.display||c,u=T.css(e,"display"),pe([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===T.css(e,"float")&&(l||(p.done((function(){f.display=c})),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=K.access(e,"fxshow",{display:c}),s&&(g.hidden=!m),m&&pe([e],!0),p.done((function(){for(n in m||pe([e]),K.remove(e,"fxshow"),h)T.style(e,n,h[n])}))),l=pt(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),T.speed=function(e,t,i){var n=e&&"object"==typeof e?T.extend({},e):{complete:i||!i&&t||v(e)&&e,duration:e,easing:i&&t||t&&!v(t)&&t};return T.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in T.fx.speeds?n.duration=T.fx.speeds[n.duration]:n.duration=T.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){v(n.old)&&n.old.call(this),n.queue&&T.dequeue(this,n.queue)},n},T.fn.extend({fadeTo:function(e,t,i,n){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var o=T.isEmptyObject(e),s=T.speed(t,i,n),r=function(){var t=ht(this,T.extend({},e),s);(o||K.get(this,"finish"))&&t.stop(!0)};return r.finish=r,o||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",s=T.timers,r=K.get(this);if(o)r[o]&&r[o].stop&&n(r[o]);else for(o in r)r[o]&&r[o].stop&&lt.test(o)&&n(r[o]);for(o=s.length;o--;)s[o].elem!==this||null!=e&&s[o].queue!==e||(s[o].anim.stop(i),t=!1,s.splice(o,1));!t&&i||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,i=K.get(this),n=i[e+"queue"],o=i[e+"queueHooks"],s=T.timers,r=n?n.length:0;for(i.finish=!0,T.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<r;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var i=T.fn[t];T.fn[t]=function(e,n,o){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(dt(t,!0),e,n,o)}})),T.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}})),T.timers=[],T.fx.tick=function(){var e,t=0,i=T.timers;for(st=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||T.fx.stop(),st=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){rt||(rt=!0,ct())},T.fx.stop=function(){rt=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(o)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var ft,mt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return U(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,i){var n,o,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?T.prop(e,t,i):(1===s&&T.isXMLDoc(e)||(o=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ft:void 0)),void 0!==i?null===i?void T.removeAttr(e,t):o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:(e.setAttribute(t,i+""),i):o&&"get"in o&&null!==(n=o.get(e,t))?n:null==(n=T.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&E(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,o=t&&t.match(O);if(o&&1===e.nodeType)for(;i=o[n++];)e.removeAttribute(i)}}),ft={set:function(e,t,i){return!1===t?T.removeAttr(e,i):e.setAttribute(i,i),i}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var i=mt[t]||T.find.attr;mt[t]=function(e,t,n){var o,s,r=t.toLowerCase();return n||(s=mt[r],mt[r]=o,o=null!=i(e,t,n)?r:null,mt[r]=s),o}}));var gt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match(O)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(O)||[]}T.fn.extend({prop:function(e,t){return U(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,i){var n,o,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&T.isXMLDoc(e)||(t=T.propFix[t]||t,o=T.propHooks[t]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:e[t]=i:o&&"get"in o&&null!==(n=o.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,i,n,o,s,r,a,l=0;if(v(e))return this.each((function(t){T(this).addClass(e.call(this,t,bt(this)))}));if((t=kt(e)).length)for(;i=this[l++];)if(o=bt(i),n=1===i.nodeType&&" "+yt(o)+" "){for(r=0;s=t[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o!==(a=yt(n))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,o,s,r,a,l=0;if(v(e))return this.each((function(t){T(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=kt(e)).length)for(;i=this[l++];)if(o=bt(i),n=1===i.nodeType&&" "+yt(o)+" "){for(r=0;s=t[r++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");o!==(a=yt(n))&&i.setAttribute("class",a)}return this},toggleClass:function(e,t){var i=typeof e,n="string"===i||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(i){T(this).toggleClass(e.call(this,i,bt(this),t),t)})):this.each((function(){var t,o,s,r;if(n)for(o=0,s=T(this),r=kt(e);t=r[o++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==i||((t=bt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+yt(bt(i))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;T.fn.extend({val:function(e){var t,i,n,o=this[0];return arguments.length?(n=v(e),this.each((function(i){var o;1===this.nodeType&&(null==(o=n?e.call(this,i,T(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=T.map(o,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=T.valHooks[o.type]||T.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(i=t.get(o,"value"))?i:"string"==typeof(i=o.value)?i.replace(wt,""):null==i?"":i:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:yt(T.text(e))}},select:{get:function(e){var t,i,n,o=e.options,s=e.selectedIndex,r="select-one"===e.type,a=r?null:[],l=r?s+1:o.length;for(n=s<0?l:r?s:0;n<l;n++)if(((i=o[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!E(i.parentNode,"optgroup"))){if(t=T(i).val(),r)return t;a.push(t)}return a},set:function(e,t){for(var i,n,o=e.options,s=T.makeArray(t),r=o.length;r--;)((n=o[r]).selected=T.inArray(T.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(e.selectedIndex=-1),s}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},g.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in i;var xt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,n,o){var s,r,a,l,c,u,d,p,f=[n||b],m=h.call(e,"type")?e.type:e,g=h.call(e,"namespace")?e.namespace.split("."):[];if(r=p=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!xt.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[T.expando]?e:new T.Event(m,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:T.makeArray(t,[e]),d=T.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(n,t))){if(!o&&!d.noBubble&&!y(n)){for(l=d.delegateType||m,xt.test(l+m)||(r=r.parentNode);r;r=r.parentNode)f.push(r),a=r;a===(n.ownerDocument||b)&&f.push(a.defaultView||a.parentWindow||i)}for(s=0;(r=f[s++])&&!e.isPropagationStopped();)p=r,e.type=s>1?l:d.bindType||m,(u=(K.get(r,"events")||Object.create(null))[e.type]&&K.get(r,"handle"))&&u.apply(r,t),(u=c&&r[c])&&u.apply&&X(r)&&(e.result=u.apply(r,t),!1===e.result&&e.preventDefault());return e.type=m,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),t)||!X(n)||c&&v(n[m])&&!y(n)&&((a=n[c])&&(n[c]=null),T.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,Tt),n[m](),e.isPropagationStopped()&&p.removeEventListener(m,Tt),T.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(e,t,i){var n=T.extend(new T.Event,i,{type:e,isSimulated:!0});T.event.trigger(n,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var i=this[0];if(i)return T.event.trigger(e,t,i,!0)}}),g.focusin||T.each({focus:"focusin",blur:"focusout"},(function(e,t){var i=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var n=this.ownerDocument||this.document||this,o=K.access(n,t);o||n.addEventListener(e,i,!0),K.access(n,t,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,o=K.access(n,t)-1;o?K.access(n,t,o):(n.removeEventListener(e,i,!0),K.remove(n,t))}}}));var St=i.location,Ct={guid:Date.now()},Dt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var _t=/\[\]$/,$t=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;function Pt(e,t,i,n){var o;if(Array.isArray(t))T.each(t,(function(t,o){i||_t.test(e)?n(e,o):Pt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,i,n)}));else if(i||"object"!==x(t))n(e,t);else for(o in t)Pt(e+"["+o+"]",t[o],i,n)}T.param=function(e,t){var i,n=[],o=function(e,t){var i=v(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){o(this.name,this.value)}));else for(i in e)Pt(i,e[i],t,o);return n.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Mt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var i=T(this).val();return null==i?null:Array.isArray(i)?T.map(i,(function(e){return{name:t.name,value:e.replace($t,"\r\n")}})):{name:t.name,value:i.replace($t,"\r\n")}})).get()}});var At=/%20/g,Nt=/#.*$/,jt=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:GET|HEAD)$/,Ot=/^\/\//,Rt={},Bt={},qt="*/".concat("*"),It=b.createElement("a");function Ft(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,o=0,s=t.toLowerCase().match(O)||[];if(v(i))for(;n=s[o++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function zt(e,t,i,n){var o={},s=e===Bt;function r(a){var l;return o[a]=!0,T.each(e[a]||[],(function(e,a){var c=a(t,i,n);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)})),l}return r(t.dataTypes[0])||!o["*"]&&r("*")}function Ut(e,t){var i,n,o=T.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((o[i]?e:n||(n={}))[i]=t[i]);return n&&T.extend(!0,e,n),e}It.href=St.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,T.ajaxSettings),t):Ut(T.ajaxSettings,e)},ajaxPrefilter:Ft(Rt),ajaxTransport:Ft(Bt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,s,r,a,l,c,u,d,p,h=T.ajaxSetup({},t),f=h.context||h,m=h.context&&(f.nodeType||f.jquery)?T(f):T.event,g=T.Deferred(),v=T.Callbacks("once memory"),y=h.statusCode||{},k={},w={},x="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(c){if(!r)for(r={};t=Lt.exec(s);)r[t[1].toLowerCase()+" "]=(r[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=r[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,k[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)S.always(e[S.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||x;return n&&n.abort(t),C(0,t),this}};if(g.promise(S),h.url=((e||h.url||St.href)+"").replace(Ot,St.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(O)||[""],null==h.crossDomain){l=b.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=It.protocol+"//"+It.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=T.param(h.data,h.traditional)),zt(Rt,h,t,S),c)return S;for(d in(u=T.event&&h.global)&&0==T.active++&&T.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ht.test(h.type),o=h.url.replace(Nt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(p=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Dt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(jt,"$1"),p=(Dt.test(o)?"&":"?")+"_="+Ct.guid+++p),h.url=o+p),h.ifModified&&(T.lastModified[o]&&S.setRequestHeader("If-Modified-Since",T.lastModified[o]),T.etag[o]&&S.setRequestHeader("If-None-Match",T.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+qt+"; q=0.01":""):h.accepts["*"]),h.headers)S.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(f,S,h)||c))return S.abort();if(x="abort",v.add(h.complete),S.done(h.success),S.fail(h.error),n=zt(Bt,h,t,S)){if(S.readyState=1,u&&m.trigger("ajaxSend",[S,h]),c)return S;h.async&&h.timeout>0&&(a=i.setTimeout((function(){S.abort("timeout")}),h.timeout));try{c=!1,n.send(k,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,r,l){var d,p,b,k,w,x=t;c||(c=!0,a&&i.clearTimeout(a),n=void 0,s=l||"",S.readyState=e>0?4:0,d=e>=200&&e<300||304===e,r&&(k=function(e,t,i){for(var n,o,s,r,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||e.converters[o+" "+l[0]]){s=o;break}r||(r=o)}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(h,S,r)),!d&&T.inArray("script",h.dataTypes)>-1&&(h.converters["text script"]=function(){}),k=function(e,t,i,n){var o,s,r,a,l,c={},u=e.dataTypes.slice();if(u[1])for(r in e.converters)c[r.toLowerCase()]=e.converters[r];for(s=u.shift();s;)if(e.responseFields[s]&&(i[e.responseFields[s]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=u.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],u.unshift(a[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(h,k,S,d),d?(h.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(T.lastModified[o]=w),(w=S.getResponseHeader("etag"))&&(T.etag[o]=w)),204===e||"HEAD"===h.type?x="nocontent":304===e?x="notmodified":(x=k.state,p=k.data,d=!(b=k.error))):(b=x,!e&&x||(x="error",e<0&&(e=0))),S.status=e,S.statusText=(t||x)+"",d?g.resolveWith(f,[p,x,S]):g.rejectWith(f,[S,x,b]),S.statusCode(y),y=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[S,h,d?p:b]),v.fireWith(f,[S,x]),u&&(m.trigger("ajaxComplete",[S,h]),--T.active||T.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,i){return T.get(e,t,i,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,i,n,o){return v(i)&&(o=o||n,n=i,i=void 0),T.ajax(T.extend({url:e,type:t,dataType:o,data:i,success:n},T.isPlainObject(e)&&e))}})),T.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),T._evalUrl=function(e,t,i){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,i)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(i){T(this).wrapAll(t?e.call(this,i):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Wt=T.ajaxSettings.xhr();g.cors=!!Wt&&"withCredentials"in Wt,g.ajax=Wt=!!Wt,T.ajaxTransport((function(e){var t,n;if(g.cors||Wt&&!e.crossDomain)return{send:function(o,s){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];for(r in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(r,o[r]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Vt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,i;if(e.crossDomain||e.scriptAttrs)return{send:function(n,o){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){i&&i()}}}));var Yt,Gt=[],Xt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||T.expando+"_"+Ct.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,n){var o,s,r,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+o):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||T.error(o+" was not called"),r[0]},e.dataTypes[0]="json",s=i[o],i[o]=function(){r=arguments},n.always((function(){void 0===s?T(i).removeProp(o):i[o]=s,e[o]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(o)),r&&v(s)&&s(r[0]),r=s=void 0})),"script"})),g.createHTMLDocument=((Yt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),T.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(g.createHTMLDocument?((n=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(n)):t=b),s=!i&&[],(o=M.exec(e))?[t.createElement(o[1])]:(o=xe([e],t,s),s&&s.length&&T(s).remove(),T.merge([],o.childNodes)));var n,o,s},T.fn.load=function(e,t,i){var n,o,s,r=this,a=e.indexOf(" ");return a>-1&&(n=yt(e.slice(a)),e=e.slice(0,a)),v(t)?(i=t,t=void 0):t&&"object"==typeof t&&(o="POST"),r.length>0&&T.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){s=arguments,r.html(n?T("<div>").append(T.parseHTML(e)).find(n):e)})).always(i&&function(e,t){r.each((function(){i.apply(this,s||[e.responseText,t,e])}))}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,i){var n,o,s,r,a,l,c=T.css(e,"position"),u=T(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),s=T.css(e,"top"),l=T.css(e,"left"),("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1?(r=(n=u.position()).top,o=n.left):(r=parseFloat(s)||0,o=parseFloat(l)||0),v(t)&&(t=t.call(e,i,T.extend({},a))),null!=t.top&&(d.top=t.top-a.top+r),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,i,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],o={top:0,left:0};if("fixed"===T.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((o=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),o.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-T.css(n,"marginTop",!0),left:t.left-o.left-T.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||se}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var i="pageYOffset"===t;T.fn[e]=function(n){return U(this,(function(e,n,o){var s;if(y(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===o)return s?s[t]:e[n];s?s.scrollTo(i?s.pageXOffset:o,i?o:s.pageYOffset):e[n]=o}),e,n,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=We(g.pixelPosition,(function(e,i){if(i)return i=Ve(e,t),Ie.test(i)?T(e).position()[t]+"px":i}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(i,n){T.fn[n]=function(o,s){var r=arguments.length&&(i||"boolean"!=typeof o),a=i||(!0===o||!0===s?"margin":"border");return U(this,(function(t,i,o){var s;return y(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===o?T.css(t,i,a):T.style(t,i,o,a)}),t,r?o:void 0,r)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}}));var Jt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var i,n,o;if("string"==typeof t&&(i=e[t],t=e,e=i),v(e))return n=a.call(arguments,2),(o=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||T.guid++,o},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=E,T.isFunction=v,T.isWindow=y,T.camelCase=G,T.type=x,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace(Jt,"")},void 0===(n=function(){return T}.apply(t,[]))||(e.exports=n);var Kt=i.jQuery,Qt=i.$;return T.noConflict=function(e){return i.$===T&&(i.$=Qt),e&&i.jQuery===T&&(i.jQuery=Kt),T},void 0===o&&(i.jQuery=i.$=T),T}))},function(e,t,i){var n,o,s={},r=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),a=function(e,t){return t?t.querySelector(e):document.querySelector(e)},l=function(e){var t={};return function(e,i){if("function"==typeof e)return e();if(void 0===t[e]){var n=a.call(this,e,i);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,d=[],p=i(4);function h(e,t){for(var i=0;i<e.length;i++){var n=e[i],o=s[n.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](n.parts[r]);for(;r<n.parts.length;r++)o.parts.push(b(n.parts[r],t))}else{var a=[];for(r=0;r<n.parts.length;r++)a.push(b(n.parts[r],t));s[n.id]={id:n.id,refs:1,parts:a}}}}function f(e,t){for(var i=[],n={},o=0;o<e.length;o++){var s=e[o],r=t.base?s[0]+t.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};n[r]?n[r].parts.push(a):i.push(n[r]={id:r,parts:[a]})}return i}function m(e,t){var i=l(e.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=d[d.length-1];if("top"===e.insertAt)n?n.nextSibling?i.insertBefore(t,n.nextSibling):i.appendChild(t):i.insertBefore(t,i.firstChild),d.push(t);else if("bottom"===e.insertAt)i.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,i);i.insertBefore(t,o)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var n=function(){0;return i.nc}();n&&(e.attrs.nonce=n)}return y(t,e.attrs),m(e,t),t}function y(e,t){Object.keys(t).forEach((function(i){e.setAttribute(i,t[i])}))}function b(e,t){var i,n,o,s;if(t.transform&&e.css){if(!(s="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=s}if(t.singleton){var r=u++;i=c||(c=v(t)),n=x.bind(null,i,r,!1),o=x.bind(null,i,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),m(e,t),t}(t),n=S.bind(null,i,t),o=function(){g(i),i.href&&URL.revokeObjectURL(i.href)}):(i=v(t),n=T.bind(null,i),o=function(){g(i)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var i=f(e,t);return h(i,t),function(e){for(var n=[],o=0;o<i.length;o++){var r=i[o];(a=s[r.id]).refs--,n.push(a)}e&&h(f(e,t),t);for(o=0;o<n.length;o++){var a;if(0===(a=n[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete s[a.id]}}}};var k,w=(k=[],function(e,t){return k[e]=t,k.filter(Boolean).join("\n")});function x(e,t,i,n){var o=i?"":n.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var s=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function T(e,t){var i=t.css,n=t.media;if(n&&e.setAttribute("media",n),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}function S(e,t,i){var n=i.css,o=i.sourceMap,s=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||s)&&(n=p(n)),o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var r=new Blob([n],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}},function(e,t,i){var n=i(3);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};i(1)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,i){},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var i=t.protocol+"//"+t.host,n=i+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,s=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?i+s:n+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(6);function o(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.element=t,this.adapter=new n.a,this.init()}var t,i,s;return t=e,(i=[{key:"init",value:function(){this.adapter.init(this.element)}}])&&o(t.prototype,i),s&&o(t,s),e}()},function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return o}));i(11);function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}var i,o,s;return i=t,(o=[{key:"init",value:function(e){var t=e.find(".js-datepicker-start"),i=e.find(".js-datepicker-end");e.find(".js-datepicker").datepicker({clearButton:!0,range:!0,multipleDatesSeparator:" - ",prevHtml:'<i class="datepicker--icon material-icons">arrow_back</i>',nextHtml:'<i class="datepicker--icon material-icons">arrow_forwards</i>',navTitles:{days:"MM  <i>yyyy</i>"},onSelect:function(e){t.val(e.split("-")[0]),i.val(e.split("-")[1])}});var n=e.find(".js-datepicker").data("datepicker"),o=n.$datepicker;this.addButton(t,i,n,o)}},{key:"addButton",value:function(t,i,n,o){var s=e("<span class='datepicker--button'>ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ</span>");s.click((function(){n.selectedDates.length<2||n.hide()})),o.find(".datepicker--buttons").append(s),i.click((function(){return n.show()})),t.click((function(){return n.show()}))}}])&&n(i.prototype,o),s&&n(i,s),t}()}).call(this,i(0))},function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}i.r(t);var o=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=t,this.getElement(),this.handlersBind(),this.checkValue(),this.update=i}var t,i,o;return t=e,(i=[{key:"getElement",value:function(){var e=this;this.option=this.items.querySelector(".dropdown-counters__controls"),this.input=this.items.querySelector(".dropdown-counters__value"),this.max=Number(this.input.max),this.min=Number(this.input.min),this.value=Number(this.input.value),this.plusAll=this.items.querySelectorAll(".dropdown-counters__plus"),this.plusAll.forEach((function(t){e.plusButton=t})),this.minusAll=this.items.querySelectorAll(".dropdown-counters__minus"),this.minusAll.forEach((function(t){e.minusButton=t}))}},{key:"handlersBind",value:function(){this.handlerButtonPlusClick=this.handlerButtonPlusClick.bind(this),this.plusButton.addEventListener("click",this.handlerButtonPlusClick),this.handlerButtonMinusClick=this.handlerButtonMinusClick.bind(this),this.minusButton.addEventListener("click",this.handlerButtonMinusClick)}},{key:"handlerButtonPlusClick",value:function(){this.upValue(this.value+1)}},{key:"handlerButtonMinusClick",value:function(){this.upValue(this.value-1)}},{key:"upValue",value:function(e){var t=0===e;e<=this.max&&e>=this.min&&(this.value=e),t&&(this.value=this.min),this.updateValue(),this.checkValue(),this.update()}},{key:"updateValue",value:function(){this.input.value=this.value}},{key:"checkValue",value:function(){this.value===this.min?this.deactivateMinus():this.activateMinus(),this.value===this.max?this.deactivatePlus():this.activatePlus()}},{key:"isMin",value:function(){return this.value===this.min}},{key:"isZero",value:function(){return 0===this.value}},{key:"getValue",value:function(){return this.value}},{key:"activatePlus",value:function(){this.plusButton.classList.contains("dropdown-counters__plus_disabled")&&(this.plusButton.classList.remove("dropdown-counters__plus_disabled"),this.plusButton.removeAttribute("disabled"))}},{key:"deactivatePlus",value:function(){this.plusButton.classList.add("dropdown-counters__plus_disabled"),this.plusButton.setAttribute("disabled","true")}},{key:"activateMinus",value:function(){this.minusButton.classList.contains("dropdown-counters__minus_disabled")&&this.minusButton.classList.remove("dropdown-counters__minus_disabled")}},{key:"deactivateMinus",value:function(){this.minusButton.classList.add("dropdown-counters__minus_disabled")}}])&&n(t.prototype,i),o&&n(t,o),e}();function s(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}function a(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.dropdown=t,this.findElement(),this.handlersBind(),this.defaultSum(),this.controls=s(this.values).map((function(e){return new o(e,(function(){return i.update()}))})),this.update()}var t,i,n;return t=e,(i=[{key:"findElement",value:function(){this.menu=this.dropdown.querySelector(".dropdown__menu"),this.toggle=this.dropdown.querySelector(".dropdown__section"),this.title=this.dropdown.querySelector(".dropdown__title"),this.isGuests=this.dropdown.classList.contains("dropdown_guest"),this.defaultTitle=this.dropdown.dataset.default||"",this.values=this.dropdown.querySelectorAll(".dropdown-counters"),this.buttonClear=this.dropdown.querySelector(".dropdown__button_clear")||void 0,this.buttonUse=this.dropdown.querySelector(".dropdown__button_use")||void 0}},{key:"handlersBind",value:function(){this.handlerMenuClick=this.handlerMenuClick.bind(this),this.toggle.addEventListener("click",this.handlerMenuClick),this.handlerDocumentClick=this.handlerDocumentClick.bind(this),document.addEventListener("click",this.handlerDocumentClick),this.buttonUse&&(this.handlerUseButtonClick=this.handlerUseButtonClick.bind(this)),this.buttonUse.addEventListener("click",this.handlerUseButtonClick),this.buttonClear&&(this.handlerButtonClearClick=this.handlerButtonClearClick.bind(this)),this.buttonClear.addEventListener("click",this.handlerButtonClearClick)}},{key:"handlerMenuClick",value:function(){this.menu.classList.toggle("dropdown_active"),this.title.classList.toggle("title-active")}},{key:"handlerDocumentClick",value:function(e){e.target.closest(".dropdown")!==this.dropdown&&this.closeDropdown()}},{key:"closeDropdown",value:function(){this.menu.classList.contains("dropdown_active")&&this.menu.classList.remove("dropdown_active")}},{key:"handlerUseButtonClick",value:function(e){0!==this.sumGuests&&(e.preventDefault(),this.closeDropdown())}},{key:"handlerButtonClearClick",value:function(e){e.preventDefault(),this.controls.forEach((function(e){e.upValue(0)}))}},{key:"update",value:function(){this.updateTitle(),this.checkAdultButtonUse()}},{key:"checkButtonClear",value:function(){!0==!this.controls.map((function(e){return e.isMin()})).includes(!1)?this.hiddenClearButton():this.visibleClearButton()}},{key:"checkButtonUse",value:function(){!0==!this.controls.map((function(e){return e.isZero()})).includes(!1)?this.hiddenButtonUse():this.visibleButtonUse()}},{key:"checkAdultButtonUse",value:function(){0===this.sumAdult&&this.sumBabies>0&&this.hiddenButtonUse()}},{key:"hiddenClearButton",value:function(){this.buttonClear.style.display="none"}},{key:"visibleClearButton",value:function(){this.buttonClear.style.display="block"}},{key:"hiddenButtonUse",value:function(){this.buttonUse.style.display="none"}},{key:"visibleButtonUse",value:function(){this.buttonUse.style.display="block"}},{key:"formDeclension",value:function(e,t){var i=(e=Math.abs(e)%100)%10,n=i>1&&i<5;return e>10&&e<20?t[2]:n?t[1]:1===i?t[0]:t[2]}},{key:"defaultSum",value:function(){var e=this,t=0;this.values.forEach((function(i){e.AllInput=i.querySelectorAll(".dropdown-counters__value"),e.AllInput.forEach((function(e){t+=Number(e.value)}))})),this.DefaultSum=t}},{key:"updateTitle",value:function(){!0===this.isGuests?this.updateDropdownGuests():this.updateDropdownRoom()}},{key:"updateDropdownGuests",value:function(){var e=this,t=this.controls.map((function(e){return e.getValue()})),i=[t[0],t[1],t[2]],n=i[0],o=i[1],s=i[2];if(this.sumGuests=n+o+s,this.sumAdult=n+o,this.sumBabies=s,this.sumAdult<10?this.controls.map((function(e){return e.activatePlus()})):(this.sumAdult=10,this.length=this.controls.length,this.controls.forEach((function(t,i){i!==e.length-1&&t.deactivatePlus()}))),10===s){var r=this.controls.length;this.controls.forEach((function(e,t){t===r-1&&e.deactivatePlus()}))}n>0||o>0?(this.checkButtonClear(),this.checkButtonUse()):this.checkButtonClear(),this.messageGuests=this.formDeclension(this.sumAdult,["Ð³Ð¾ÑÑÑ","Ð³Ð¾ÑÑÑ","Ð³Ð¾ÑÑÐµÐ¹"]),this.messageNewborns=this.formDeclension(this.sumBabies,["Ð¼Ð»Ð°Ð´ÐµÐ½ÐµÑ","Ð¼Ð»Ð°Ð´ÐµÐ½ÑÐ°","Ð¼Ð»Ð°Ð´ÐµÐ½ÑÐµÐ²"]);var a=0===this.sumBabies&&0===this.sumAdult,l=0!==this.sumAdult&&0===this.sumBabies;this.title.innerHTML=a?"Ð¡ÐºÐ¾Ð»ÑÐºÐ¾ Ð³Ð¾ÑÑÐµÐ¹":l?"".concat(this.sumAdult," ").concat(this.messageGuests):"".concat(this.sumAdult," ").concat(this.messageGuests,", ").concat(this.sumBabies," ").concat(this.messageNewborns)}},{key:"updateDropdownRoom",value:function(){var e=this.controls.map((function(e){return e.getValue()})),t=[e[0],e[1],e[2]],i=t[0],n=t[1],o=t[2],s=i+n+o;s!==this.DefaultSum&&(this.checkButtonClear(),this.checkButtonUse());var r=this.formDeclension(i,["ÑÐ¿Ð°Ð»ÑÐ½Ñ","ÑÐ¿Ð°Ð»ÑÐ½Ð¸","ÑÐ¿Ð°Ð»ÐµÐ½"]),a=this.formDeclension(n,["ÐºÑÐ¾Ð²Ð°ÑÑ","ÐºÑÐ¾Ð²Ð°ÑÐ¸","ÐºÑÐ¾Ð²Ð°ÑÐµÐ¹"]),l=this.formDeclension(o,["Ð²Ð°Ð½Ð½Ð°Ñ","Ð²Ð°Ð½Ð½ÑÐµ","Ð²Ð°Ð½Ð½ÑÑ"]),c=s>0&&o>0;this.title.innerHTML=c?"".concat(i," ").concat(r,", ").concat(n," ").concat(a,",").concat(o," ").concat(l)+"...":"".concat(i," ").concat(r,", ").concat(n," ").concat(a,"...")}}])&&a(t.prototype,i),n&&a(t,n),e}();window.addEventListener("load",(function(){document.querySelectorAll(".dropdown").forEach((function(e){return new l(e)}))}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(9);document.querySelectorAll(".js-header-main").forEach((function(e){new n.Burger(e)}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Burger=void 0;var n=function(){function e(e){this.header=e,this.elements=this.findElement(),this.bindEventListeners()}return e.prototype.findElement=function(){return[this.header.querySelector(".js-header-nav"),this.header.querySelector(".js-burger__item")]},e.prototype.bindEventListeners=function(){this.handleButtonClick=this.handleButtonClick.bind(this),this.elements[1].addEventListener("click",this.handleButtonClick)},e.prototype.handleButtonClick=function(){this.elements[1].classList.toggle("burger__item_active"),this.elements[0].classList.toggle("burger_open-menu")},e}();t.Burger=n},function(e,t,i){"use strict";i.r(t),function(e){var t=i(5);e(".js-datepicker-container").each((function(i,n){new t.a(e(n))}))}.call(this,i(0))},function(e,t,i){i(12),i(13),i(14),i(15)},function(e,t,i){(function(e){var t,i,n,o,s,r,a;o=!1,s={classes:"",inline:!1,language:"ru",startDate:new Date,firstDay:"",weekends:[6,0],dateFormat:"",altField:"",altFieldDateFormat:"@",toggleSelected:!0,keyboardNav:!0,position:"bottom left",offset:12,view:"days",minView:"days",showOtherMonths:!0,selectOtherMonths:!0,moveToOtherMonthsOnSelect:!0,showOtherYears:!0,selectOtherYears:!0,moveToOtherYearsOnSelect:!0,minDate:"",maxDate:"",disableNavWhenOutOfRange:!0,multipleDates:!1,multipleDatesSeparator:",",range:!1,todayButton:!1,clearButton:!1,showEvent:"focus",autoClose:!1,monthsField:"monthsShort",prevHtml:'<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',nextHtml:'<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',navTitles:{days:"MM, <i>yyyy</i>",months:"yyyy",years:"yyyy1 - yyyy2"},timepicker:!1,onlyTimepicker:!1,dateTimeSeparator:" ",timeFormat:"",minHours:0,maxHours:24,minMinutes:0,maxMinutes:59,hoursStep:1,minutesStep:1,onSelect:"",onShow:"",onHide:"",onChangeMonth:"",onChangeYear:"",onChangeDecade:"",onChangeView:"",onRenderCell:""},r={ctrlRight:[17,39],ctrlUp:[17,38],ctrlLeft:[17,37],ctrlDown:[17,40],shiftRight:[16,39],shiftUp:[16,38],shiftLeft:[16,37],shiftDown:[16,40],altUp:[18,38],altRight:[18,39],altLeft:[18,37],altDown:[18,40],ctrlShiftUp:[16,17,38]},(n=a=function(i,n){this.el=i,this.$el=e(i),this.opts=e.extend(!0,{},s,n,this.$el.data()),null==t&&(t=e("body")),this.opts.startDate||(this.opts.startDate=new Date),"INPUT"==this.el.nodeName&&(this.elIsInput=!0),this.opts.altField&&(this.$altField="string"==typeof this.opts.altField?e(this.opts.altField):this.opts.altField),this.inited=!1,this.visible=!1,this.silent=!1,this.currentDate=this.opts.startDate,this.currentView=this.opts.view,this._createShortCuts(),this.selectedDates=[],this.views={},this.keys=[],this.minRange="",this.maxRange="",this._prevOnSelectValue="",this.init()}).prototype={VERSION:"2.2.3",viewIndexes:["days","months","years"],init:function(){o||this.opts.inline||!this.elIsInput||this._buildDatepickersContainer(),this._buildBaseHtml(),this._defineLocale(this.opts.language),this._syncWithMinMaxDates(),this.elIsInput&&(this.opts.inline||(this._setPositionClasses(this.opts.position),this._bindEvents()),this.opts.keyboardNav&&!this.opts.onlyTimepicker&&this._bindKeyboardEvents(),this.$datepicker.on("mousedown",this._onMouseDownDatepicker.bind(this)),this.$datepicker.on("mouseup",this._onMouseUpDatepicker.bind(this))),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.timepicker&&(this.timepicker=new e.fn.datepicker.Timepicker(this,this.opts),this._bindTimepickerEvents()),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.views[this.currentView]=new e.fn.datepicker.Body(this,this.currentView,this.opts),this.views[this.currentView].show(),this.nav=new e.fn.datepicker.Navigation(this,this.opts),this.view=this.currentView,this.$el.on("clickCell.adp",this._onClickCell.bind(this)),this.$datepicker.on("mouseenter",".datepicker--cell",this._onMouseEnterCell.bind(this)),this.$datepicker.on("mouseleave",".datepicker--cell",this._onMouseLeaveCell.bind(this)),this.inited=!0},_createShortCuts:function(){this.minDate=this.opts.minDate?this.opts.minDate:new Date(-86399999136e5),this.maxDate=this.opts.maxDate?this.opts.maxDate:new Date(86399999136e5)},_bindEvents:function(){this.$el.on(this.opts.showEvent+".adp",this._onShowEvent.bind(this)),this.$el.on("mouseup.adp",this._onMouseUpEl.bind(this)),this.$el.on("blur.adp",this._onBlur.bind(this)),this.$el.on("keyup.adp",this._onKeyUpGeneral.bind(this)),e(window).on("resize.adp",this._onResize.bind(this)),e("body").on("mouseup.adp",this._onMouseUpBody.bind(this))},_bindKeyboardEvents:function(){this.$el.on("keydown.adp",this._onKeyDown.bind(this)),this.$el.on("keyup.adp",this._onKeyUp.bind(this)),this.$el.on("hotKey.adp",this._onHotKey.bind(this))},_bindTimepickerEvents:function(){this.$el.on("timeChange.adp",this._onTimeChange.bind(this))},isWeekend:function(e){return-1!==this.opts.weekends.indexOf(e)},_defineLocale:function(t){"string"==typeof t?(this.loc=e.fn.datepicker.language[t],this.loc||(console.warn("Can't find language \""+t+'" in Datepicker.language, will use "ru" instead'),this.loc=e.extend(!0,{},e.fn.datepicker.language.ru)),this.loc=e.extend(!0,{},e.fn.datepicker.language.ru,e.fn.datepicker.language[t])):this.loc=e.extend(!0,{},e.fn.datepicker.language.ru,t),this.opts.dateFormat&&(this.loc.dateFormat=this.opts.dateFormat),this.opts.timeFormat&&(this.loc.timeFormat=this.opts.timeFormat),""!==this.opts.firstDay&&(this.loc.firstDay=this.opts.firstDay),this.opts.timepicker&&(this.loc.dateFormat=[this.loc.dateFormat,this.loc.timeFormat].join(this.opts.dateTimeSeparator)),this.opts.onlyTimepicker&&(this.loc.dateFormat=this.loc.timeFormat);var i=this._getWordBoundaryRegExp;(this.loc.timeFormat.match(i("aa"))||this.loc.timeFormat.match(i("AA")))&&(this.ampm=!0)},_buildDatepickersContainer:function(){o=!0,t.append('<div class="datepickers-container" id="datepickers-container"></div>'),i=e("#datepickers-container")},_buildBaseHtml:function(){var t,n=e('<div class="datepicker-inline">');t="INPUT"==this.el.nodeName?this.opts.inline?n.insertAfter(this.$el):i:n.appendTo(this.$el),this.$datepicker=e('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(t),this.$content=e(".datepicker--content",this.$datepicker),this.$nav=e(".datepicker--nav",this.$datepicker)},_triggerOnChange:function(){if(!this.selectedDates.length){if(""===this._prevOnSelectValue)return;return this._prevOnSelectValue="",this.opts.onSelect("","",this)}var e,t=this.selectedDates,i=n.getParsedDate(t[0]),o=this,s=new Date(i.year,i.month,i.date,i.hours,i.minutes);e=t.map((function(e){return o.formatDate(o.loc.dateFormat,e)})).join(this.opts.multipleDatesSeparator),(this.opts.multipleDates||this.opts.range)&&(s=t.map((function(e){var t=n.getParsedDate(e);return new Date(t.year,t.month,t.date,t.hours,t.minutes)}))),this._prevOnSelectValue=e,this.opts.onSelect(e,s,this)},next:function(){var e=this.parsedDate,t=this.opts;switch(this.view){case"days":this.date=new Date(e.year,e.month+1,1),t.onChangeMonth&&t.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(e.year+1,e.month,1),t.onChangeYear&&t.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(e.year+10,0,1),t.onChangeDecade&&t.onChangeDecade(this.curDecade)}},prev:function(){var e=this.parsedDate,t=this.opts;switch(this.view){case"days":this.date=new Date(e.year,e.month-1,1),t.onChangeMonth&&t.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(e.year-1,e.month,1),t.onChangeYear&&t.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(e.year-10,0,1),t.onChangeDecade&&t.onChangeDecade(this.curDecade)}},formatDate:function(e,t){t=t||this.date;var i,o=e,s=this._getWordBoundaryRegExp,r=this.loc,a=n.getLeadingZeroNum,l=n.getDecade(t),c=n.getParsedDate(t),u=c.fullHours,d=c.hours,p=e.match(s("aa"))||e.match(s("AA")),h="am",f=this._replacer;switch(this.opts.timepicker&&this.timepicker&&p&&(u=a((i=this.timepicker._getValidHoursFromDate(t,p)).hours),d=i.hours,h=i.dayPeriod),!0){case/@/.test(o):o=o.replace(/@/,t.getTime());case/aa/.test(o):o=f(o,s("aa"),h);case/AA/.test(o):o=f(o,s("AA"),h.toUpperCase());case/dd/.test(o):o=f(o,s("dd"),c.fullDate);case/d/.test(o):o=f(o,s("d"),c.date);case/DD/.test(o):o=f(o,s("DD"),r.days[c.day]);case/D/.test(o):o=f(o,s("D"),r.daysShort[c.day]);case/mm/.test(o):o=f(o,s("mm"),c.fullMonth);case/m/.test(o):o=f(o,s("m"),c.month+1);case/MM/.test(o):o=f(o,s("MM"),this.loc.months[c.month]);case/M/.test(o):o=f(o,s("M"),r.monthsShort[c.month]);case/ii/.test(o):o=f(o,s("ii"),c.fullMinutes);case/i/.test(o):o=f(o,s("i"),c.minutes);case/hh/.test(o):o=f(o,s("hh"),u);case/h/.test(o):o=f(o,s("h"),d);case/yyyy/.test(o):o=f(o,s("yyyy"),c.year);case/yyyy1/.test(o):o=f(o,s("yyyy1"),l[0]);case/yyyy2/.test(o):o=f(o,s("yyyy2"),l[1]);case/yy/.test(o):o=f(o,s("yy"),c.year.toString().slice(-2))}return o},_replacer:function(e,t,i){return e.replace(t,(function(e,t,n,o){return t+i+o}))},_getWordBoundaryRegExp:function(e){var t="\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|"+t+")("+e+")($|<|"+t+")","g")},selectDate:function(e){var t=this,i=t.opts,o=t.parsedDate,s=t.selectedDates.length,r="";if(Array.isArray(e))e.forEach((function(e){t.selectDate(e)}));else if(e instanceof Date){if(this.lastSelectedDate=e,this.timepicker&&this.timepicker._setTime(e),t._trigger("selectDate",e),this.timepicker&&(e.setHours(this.timepicker.hours),e.setMinutes(this.timepicker.minutes)),"days"==t.view&&e.getMonth()!=o.month&&i.moveToOtherMonthsOnSelect&&(r=new Date(e.getFullYear(),e.getMonth(),1)),"years"==t.view&&e.getFullYear()!=o.year&&i.moveToOtherYearsOnSelect&&(r=new Date(e.getFullYear(),0,1)),r&&(t.silent=!0,t.date=r,t.silent=!1,t.nav._render()),i.multipleDates&&!i.range){if(s===i.multipleDates)return;t._isSelected(e)||t.selectedDates.push(e)}else i.range?2==s?(t.selectedDates=[e],t.minRange=e,t.maxRange=""):1==s?(t.selectedDates.push(e),t.maxRange?t.minRange=e:t.maxRange=e,n.bigger(t.maxRange,t.minRange)&&(t.maxRange=t.minRange,t.minRange=e),t.selectedDates=[t.minRange,t.maxRange]):(t.selectedDates=[e],t.minRange=e):t.selectedDates=[e];t._setInputValue(),i.onSelect&&t._triggerOnChange(),i.autoClose&&!this.timepickerIsActive&&(i.multipleDates||i.range?i.range&&2==t.selectedDates.length&&t.hide():t.hide()),t.views[this.currentView]._render()}},removeDate:function(e){var t=this.selectedDates,i=this;if(e instanceof Date)return t.some((function(o,s){if(n.isSame(o,e))return t.splice(s,1),i.selectedDates.length?i.lastSelectedDate=i.selectedDates[i.selectedDates.length-1]:(i.minRange="",i.maxRange="",i.lastSelectedDate=""),i.views[i.currentView]._render(),i._setInputValue(),i.opts.onSelect&&i._triggerOnChange(),!0}))},today:function(){this.silent=!0,this.view=this.opts.minView,this.silent=!1,this.date=new Date,this.opts.todayButton instanceof Date&&this.selectDate(this.opts.todayButton)},clear:function(){this.selectedDates=[],this.minRange="",this.maxRange="",this.views[this.currentView]._render(),this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()},update:function(t,i){var n=arguments.length,o=this.lastSelectedDate;return 2==n?this.opts[t]=i:1==n&&"object"==typeof t&&(this.opts=e.extend(!0,this.opts,t)),this._createShortCuts(),this._syncWithMinMaxDates(),this._defineLocale(this.opts.language),this.nav._addButtonsIfNeed(),this.opts.onlyTimepicker||this.nav._render(),this.views[this.currentView]._render(),this.elIsInput&&!this.opts.inline&&(this._setPositionClasses(this.opts.position),this.visible&&this.setPosition(this.opts.position)),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.opts.timepicker&&(o&&this.timepicker._handleDate(o),this.timepicker._updateRanges(),this.timepicker._updateCurrentTime(),o&&(o.setHours(this.timepicker.hours),o.setMinutes(this.timepicker.minutes))),this._setInputValue(),this},_syncWithMinMaxDates:function(){var e=this.date.getTime();this.silent=!0,this.minTime>e&&(this.date=this.minDate),this.maxTime<e&&(this.date=this.maxDate),this.silent=!1},_isSelected:function(e,t){var i=!1;return this.selectedDates.some((function(o){if(n.isSame(o,e,t))return i=o,!0})),i},_setInputValue:function(){var e,t=this,i=t.opts,n=t.loc.dateFormat,o=i.altFieldDateFormat,s=t.selectedDates.map((function(e){return t.formatDate(n,e)}));i.altField&&t.$altField.length&&(e=(e=this.selectedDates.map((function(e){return t.formatDate(o,e)}))).join(this.opts.multipleDatesSeparator),this.$altField.val(e)),s=s.join(this.opts.multipleDatesSeparator),this.$el.val(s)},_isInRange:function(e,t){var i=e.getTime(),o=n.getParsedDate(e),s=n.getParsedDate(this.minDate),r=n.getParsedDate(this.maxDate),a=new Date(o.year,o.month,s.date).getTime(),l=new Date(o.year,o.month,r.date).getTime(),c={day:i>=this.minTime&&i<=this.maxTime,month:a>=this.minTime&&l<=this.maxTime,year:o.year>=s.year&&o.year<=r.year};return t?c[t]:c.day},_getDimensions:function(e){var t=e.offset();return{width:e.outerWidth(),height:e.outerHeight(),left:t.left,top:t.top}},_getDateFromCell:function(e){var t=this.parsedDate,i=e.data("year")||t.year,n=null==e.data("month")?t.month:e.data("month"),o=e.data("date")||1;return new Date(i,n,o)},_setPositionClasses:function(e){var t=(e=e.split(" "))[0],i="datepicker -"+t+"-"+e[1]+"- -from-"+t+"-";this.visible&&(i+=" active"),this.$datepicker.removeAttr("class").addClass(i)},setPosition:function(e){e=e||this.opts.position;var t,i,n=this._getDimensions(this.$el),o=this._getDimensions(this.$datepicker),s=e.split(" "),r=this.opts.offset,a=s[0],l=s[1];switch(a){case"top":t=n.top-o.height-r;break;case"right":i=n.left+n.width+r;break;case"bottom":t=n.top+n.height+r;break;case"left":i=n.left-o.width-r}switch(l){case"top":t=n.top;break;case"right":i=n.left+n.width-o.width;break;case"bottom":t=n.top+n.height-o.height;break;case"left":i=n.left;break;case"center":/left|right/.test(a)?t=n.top+n.height/2-o.height/2:i=n.left+n.width/2-o.width/2}this.$datepicker.css({left:i,top:t})},show:function(){var e=this.opts.onShow;this.setPosition(this.opts.position),this.$datepicker.addClass("active"),this.visible=!0,e&&this._bindVisionEvents(e)},hide:function(){var e=this.opts.onHide;this.$datepicker.removeClass("active").css({left:"-100000px"}),this.focused="",this.keys=[],this.inFocus=!1,this.visible=!1,this.$el.blur(),e&&this._bindVisionEvents(e)},down:function(e){this._changeView(e,"down")},up:function(e){this._changeView(e,"up")},_bindVisionEvents:function(e){this.$datepicker.off("transitionend.dp"),e(this,!1),this.$datepicker.one("transitionend.dp",e.bind(this,this,!0))},_changeView:function(e,t){e=e||this.focused||this.date;var i="up"==t?this.viewIndex+1:this.viewIndex-1;i>2&&(i=2),i<0&&(i=0),this.silent=!0,this.date=new Date(e.getFullYear(),e.getMonth(),1),this.silent=!1,this.view=this.viewIndexes[i]},_handleHotKey:function(e){var t,i,o,s=n.getParsedDate(this._getFocusedDate()),r=this.opts,a=!1,l=!1,c=!1,u=s.year,d=s.month,p=s.date;switch(e){case"ctrlRight":case"ctrlUp":d+=1,a=!0;break;case"ctrlLeft":case"ctrlDown":d-=1,a=!0;break;case"shiftRight":case"shiftUp":l=!0,u+=1;break;case"shiftLeft":case"shiftDown":l=!0,u-=1;break;case"altRight":case"altUp":c=!0,u+=10;break;case"altLeft":case"altDown":c=!0,u-=10;break;case"ctrlShiftUp":this.up()}o=n.getDaysCount(new Date(u,d)),i=new Date(u,d,p),o<p&&(p=o),i.getTime()<this.minTime?i=this.minDate:i.getTime()>this.maxTime&&(i=this.maxDate),this.focused=i,t=n.getParsedDate(i),a&&r.onChangeMonth&&r.onChangeMonth(t.month,t.year),l&&r.onChangeYear&&r.onChangeYear(t.year),c&&r.onChangeDecade&&r.onChangeDecade(this.curDecade)},_registerKey:function(e){this.keys.some((function(t){return t==e}))||this.keys.push(e)},_unRegisterKey:function(e){var t=this.keys.indexOf(e);this.keys.splice(t,1)},_isHotKeyPressed:function(){var e,t=!1,i=this.keys.sort();for(var n in r)e=r[n],i.length==e.length&&e.every((function(e,t){return e==i[t]}))&&(this._trigger("hotKey",n),t=!0);return t},_trigger:function(e,t){this.$el.trigger(e,t)},_focusNextCell:function(e,t){t=t||this.cellType;var i=n.getParsedDate(this._getFocusedDate()),o=i.year,s=i.month,r=i.date;if(!this._isHotKeyPressed()){switch(e){case 37:"day"==t&&(r-=1),"month"==t&&(s-=1),"year"==t&&(o-=1);break;case 38:"day"==t&&(r-=7),"month"==t&&(s-=3),"year"==t&&(o-=4);break;case 39:"day"==t&&(r+=1),"month"==t&&(s+=1),"year"==t&&(o+=1);break;case 40:"day"==t&&(r+=7),"month"==t&&(s+=3),"year"==t&&(o+=4)}var a=new Date(o,s,r);a.getTime()<this.minTime?a=this.minDate:a.getTime()>this.maxTime&&(a=this.maxDate),this.focused=a}},_getFocusedDate:function(){var e=this.focused||this.selectedDates[this.selectedDates.length-1],t=this.parsedDate;if(!e)switch(this.view){case"days":e=new Date(t.year,t.month,(new Date).getDate());break;case"months":e=new Date(t.year,t.month,1);break;case"years":e=new Date(t.year,0,1)}return e},_getCell:function(t,i){i=i||this.cellType;var o,s=n.getParsedDate(t),r='.datepicker--cell[data-year="'+s.year+'"]';switch(i){case"month":r='[data-month="'+s.month+'"]';break;case"day":r+='[data-month="'+s.month+'"][data-date="'+s.date+'"]'}return(o=this.views[this.currentView].$el.find(r)).length?o:e("")},destroy:function(){this.$el.off(".adp").data("datepicker",""),this.selectedDates=[],this.focused="",this.views={},this.keys=[],this.minRange="",this.maxRange="",this.opts.inline||!this.elIsInput?this.$datepicker.closest(".datepicker-inline").remove():this.$datepicker.remove()},_handleAlreadySelectedDates:function(e,t){this.opts.range?this.opts.toggleSelected?this.removeDate(t):2!=this.selectedDates.length&&this._trigger("clickCell",t):this.opts.toggleSelected&&this.removeDate(t),this.opts.toggleSelected||(this.lastSelectedDate=e,this.opts.timepicker&&(this.timepicker._setTime(e),this.timepicker.update()))},_onShowEvent:function(e){this.visible||this.show()},_onBlur:function(){!this.inFocus&&this.visible&&this.hide()},_onMouseDownDatepicker:function(e){this.inFocus=!0},_onMouseUpDatepicker:function(e){this.inFocus=!1,e.originalEvent.inFocus=!0,e.originalEvent.timepickerFocus||this.$el.focus()},_onKeyUpGeneral:function(e){this.$el.val()||this.clear()},_onResize:function(){this.visible&&this.setPosition()},_onMouseUpBody:function(e){e.originalEvent.inFocus||this.visible&&!this.inFocus&&this.hide()},_onMouseUpEl:function(e){e.originalEvent.inFocus=!0,setTimeout(this._onKeyUpGeneral.bind(this),4)},_onKeyDown:function(e){var t=e.which;if(this._registerKey(t),t>=37&&t<=40&&(e.preventDefault(),this._focusNextCell(t)),13==t&&this.focused){if(this._getCell(this.focused).hasClass("-disabled-"))return;if(this.view!=this.opts.minView)this.down();else{var i=this._isSelected(this.focused,this.cellType);if(!i)return this.timepicker&&(this.focused.setHours(this.timepicker.hours),this.focused.setMinutes(this.timepicker.minutes)),void this.selectDate(this.focused);this._handleAlreadySelectedDates(i,this.focused)}}27==t&&this.hide()},_onKeyUp:function(e){var t=e.which;this._unRegisterKey(t)},_onHotKey:function(e,t){this._handleHotKey(t)},_onMouseEnterCell:function(t){var i=e(t.target).closest(".datepicker--cell"),o=this._getDateFromCell(i);this.silent=!0,this.focused&&(this.focused=""),i.addClass("-focus-"),this.focused=o,this.silent=!1,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",n.less(this.minRange,this.focused)&&(this.maxRange=this.minRange,this.minRange=""),this.views[this.currentView]._update())},_onMouseLeaveCell:function(t){e(t.target).closest(".datepicker--cell").removeClass("-focus-"),this.silent=!0,this.focused="",this.silent=!1},_onTimeChange:function(e,t,i){var n=new Date,o=!1;this.selectedDates.length&&(o=!0,n=this.lastSelectedDate),n.setHours(t),n.setMinutes(i),o||this._getCell(n).hasClass("-disabled-")?(this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()):this.selectDate(n)},_onClickCell:function(e,t){this.timepicker&&(t.setHours(this.timepicker.hours),t.setMinutes(this.timepicker.minutes)),this.selectDate(t)},set focused(e){if(!e&&this.focused){var t=this._getCell(this.focused);t.length&&t.removeClass("-focus-")}this._focused=e,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",n.less(this.minRange,this._focused)&&(this.maxRange=this.minRange,this.minRange="")),this.silent||(this.date=e)},get focused(){return this._focused},get parsedDate(){return n.getParsedDate(this.date)},set date(e){if(e instanceof Date)return this.currentDate=e,this.inited&&!this.silent&&(this.views[this.view]._render(),this.nav._render(),this.visible&&this.elIsInput&&this.setPosition()),e},get date(){return this.currentDate},set view(t){if(this.viewIndex=this.viewIndexes.indexOf(t),!(this.viewIndex<0))return this.prevView=this.currentView,this.currentView=t,this.inited&&(this.views[t]?this.views[t]._render():this.views[t]=new e.fn.datepicker.Body(this,t,this.opts),this.views[this.prevView].hide(),this.views[t].show(),this.nav._render(),this.opts.onChangeView&&this.opts.onChangeView(t),this.elIsInput&&this.visible&&this.setPosition()),t},get view(){return this.currentView},get cellType(){return this.view.substring(0,this.view.length-1)},get minTime(){var e=n.getParsedDate(this.minDate);return new Date(e.year,e.month,e.date).getTime()},get maxTime(){var e=n.getParsedDate(this.maxDate);return new Date(e.year,e.month,e.date).getTime()},get curDecade(){return n.getDecade(this.date)}},n.getDaysCount=function(e){return new Date(e.getFullYear(),e.getMonth()+1,0).getDate()},n.getParsedDate=function(e){return{year:e.getFullYear(),month:e.getMonth(),fullMonth:e.getMonth()+1<10?"0"+(e.getMonth()+1):e.getMonth()+1,date:e.getDate(),fullDate:e.getDate()<10?"0"+e.getDate():e.getDate(),day:e.getDay(),hours:e.getHours(),fullHours:e.getHours()<10?"0"+e.getHours():e.getHours(),minutes:e.getMinutes(),fullMinutes:e.getMinutes()<10?"0"+e.getMinutes():e.getMinutes()}},n.getDecade=function(e){var t=10*Math.floor(e.getFullYear()/10);return[t,t+9]},n.template=function(e,t){return e.replace(/#\{([\w]+)\}/g,(function(e,i){if(t[i]||0===t[i])return t[i]}))},n.isSame=function(e,t,i){if(!e||!t)return!1;var o=n.getParsedDate(e),s=n.getParsedDate(t),r=i||"day";return{day:o.date==s.date&&o.month==s.month&&o.year==s.year,month:o.month==s.month&&o.year==s.year,year:o.year==s.year}[r]},n.less=function(e,t,i){return!(!e||!t)&&t.getTime()<e.getTime()},n.bigger=function(e,t,i){return!(!e||!t)&&t.getTime()>e.getTime()},n.getLeadingZeroNum=function(e){return parseInt(e)<10?"0"+e:e},n.resetTime=function(e){if("object"==typeof e)return e=n.getParsedDate(e),new Date(e.year,e.month,e.date)},e.fn.datepicker=function(t){return this.each((function(){if(e.data(this,"datepicker")){var i=e.data(this,"datepicker");i.opts=e.extend(!0,i.opts,t),i.update()}else e.data(this,"datepicker",new a(this,t))}))},e.fn.datepicker.Constructor=a,e.fn.datepicker.language={ru:{days:["ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","ÐÑÐ¾ÑÐ½Ð¸Ðº","Ð¡ÑÐµÐ´Ð°","Ð§ÐµÑÐ²ÐµÑÐ³","ÐÑÑÐ½Ð¸ÑÐ°","Ð¡ÑÐ±Ð±Ð¾ÑÐ°"],daysShort:["ÐÐ¾Ñ","ÐÐ¾Ð½","ÐÑÐ¾","Ð¡ÑÐµ","Ð§ÐµÑ","ÐÑÑ","Ð¡ÑÐ±"],daysMin:["ÐÑ","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"],months:["Ð¯Ð½Ð²Ð°ÑÑ","Ð¤ÐµÐ²ÑÐ°Ð»Ñ","ÐÐ°ÑÑ","ÐÐ¿ÑÐµÐ»Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ","ÐÐ²Ð³ÑÑÑ","Ð¡ÐµÐ½ÑÑÐ±ÑÑ","ÐÐºÑÑÐ±ÑÑ","ÐÐ¾ÑÐ±ÑÑ","ÐÐµÐºÐ°Ð±ÑÑ"],monthsShort:["Ð¯Ð½Ð²","Ð¤ÐµÐ²","ÐÐ°Ñ","ÐÐ¿Ñ","ÐÐ°Ð¹","ÐÑÐ½","ÐÑÐ»","ÐÐ²Ð³","Ð¡ÐµÐ½","ÐÐºÑ","ÐÐ¾Ñ","ÐÐµÐº"],today:"Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ",clear:"ÐÑÐ¸ÑÑÐ¸ÑÑ",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:1}},e((function(){e(".datepicker-here").datepicker()}))}).call(this,i(0))},function(e,t,i){(function(e){var t,i,n;t={days:'<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',months:'<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',years:'<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'},i=e.fn.datepicker,n=i.Constructor,i.Body=function(t,i,n){this.d=t,this.type=i,this.opts=n,this.$el=e(""),this.opts.onlyTimepicker||this.init()},i.Body.prototype={init:function(){this._buildBaseHtml(),this._render(),this._bindEvents()},_bindEvents:function(){this.$el.on("click",".datepicker--cell",e.proxy(this._onClickCell,this))},_buildBaseHtml:function(){this.$el=e(t[this.type]).appendTo(this.d.$content),this.$names=e(".datepicker--days-names",this.$el),this.$cells=e(".datepicker--cells",this.$el)},_getDayNamesHtml:function(e,t,i,n){return i=i||"",(n=null!=n?n:0)>7?i:7==(t=null!=t?t:e)?this._getDayNamesHtml(e,0,i,++n):(i+='<div class="datepicker--day-name'+(this.d.isWeekend(t)?" -weekend-":"")+'">'+this.d.loc.daysMin[t]+"</div>",this._getDayNamesHtml(e,++t,i,++n))},_getCellContents:function(e,t){var i="datepicker--cell datepicker--cell-"+t,o=new Date,s=this.d,r=n.resetTime(s.minRange),a=n.resetTime(s.maxRange),l=s.opts,c=n.getParsedDate(e),u={},d=c.date;switch(t){case"day":s.isWeekend(c.day)&&(i+=" -weekend-"),c.month!=this.d.parsedDate.month&&(i+=" -other-month-",l.selectOtherMonths||(i+=" -disabled-"),l.showOtherMonths||(d=""));break;case"month":d=s.loc[s.opts.monthsField][c.month];break;case"year":var p=s.curDecade;d=c.year,(c.year<p[0]||c.year>p[1])&&(i+=" -other-decade-",l.selectOtherYears||(i+=" -disabled-"),l.showOtherYears||(d=""))}return l.onRenderCell&&(d=(u=l.onRenderCell(e,t)||{}).html?u.html:d,i+=u.classes?" "+u.classes:""),l.range&&(n.isSame(r,e,t)&&(i+=" -range-from-"),n.isSame(a,e,t)&&(i+=" -range-to-"),1==s.selectedDates.length&&s.focused?((n.bigger(r,e)&&n.less(s.focused,e)||n.less(a,e)&&n.bigger(s.focused,e))&&(i+=" -in-range-"),n.less(a,e)&&n.isSame(s.focused,e)&&(i+=" -range-from-"),n.bigger(r,e)&&n.isSame(s.focused,e)&&(i+=" -range-to-")):2==s.selectedDates.length&&n.bigger(r,e)&&n.less(a,e)&&(i+=" -in-range-")),n.isSame(o,e,t)&&(i+=" -current-"),s.focused&&n.isSame(e,s.focused,t)&&(i+=" -focus-"),s._isSelected(e,t)&&(i+=" -selected-"),s._isInRange(e,t)&&!u.disabled||(i+=" -disabled-"),{html:d,classes:i}},_getDaysHtml:function(e){for(var t,i,o=n.getDaysCount(e),s=new Date(e.getFullYear(),e.getMonth(),1).getDay(),r=new Date(e.getFullYear(),e.getMonth(),o).getDay(),a=s-this.d.loc.firstDay,l=6-r+this.d.loc.firstDay,c="",u=1-(a=a<0?a+7:a),d=o+(l=l>6?l-7:l);u<=d;u++)i=e.getFullYear(),t=e.getMonth(),c+=this._getDayHtml(new Date(i,t,u));return c},_getDayHtml:function(e){var t=this._getCellContents(e,"day");return'<div class="'+t.classes+'" data-date="'+e.getDate()+'" data-month="'+e.getMonth()+'" data-year="'+e.getFullYear()+'">'+t.html+"</div>"},_getMonthsHtml:function(e){for(var t="",i=n.getParsedDate(e),o=0;o<12;)t+=this._getMonthHtml(new Date(i.year,o)),o++;return t},_getMonthHtml:function(e){var t=this._getCellContents(e,"month");return'<div class="'+t.classes+'" data-month="'+e.getMonth()+'">'+t.html+"</div>"},_getYearsHtml:function(e){n.getParsedDate(e);for(var t=n.getDecade(e),i="",o=t[0]-1;o<=t[1]+1;o++)i+=this._getYearHtml(new Date(o,0));return i},_getYearHtml:function(e){var t=this._getCellContents(e,"year");return'<div class="'+t.classes+'" data-year="'+e.getFullYear()+'">'+t.html+"</div>"},_renderTypes:{days:function(){var e=this._getDayNamesHtml(this.d.loc.firstDay),t=this._getDaysHtml(this.d.currentDate);this.$cells.html(t),this.$names.html(e)},months:function(){var e=this._getMonthsHtml(this.d.currentDate);this.$cells.html(e)},years:function(){var e=this._getYearsHtml(this.d.currentDate);this.$cells.html(e)}},_render:function(){this.opts.onlyTimepicker||this._renderTypes[this.type].bind(this)()},_update:function(){var t,i,n,o=e(".datepicker--cell",this.$cells),s=this;o.each((function(o,r){i=e(this),n=s.d._getDateFromCell(e(this)),t=s._getCellContents(n,s.d.cellType),i.attr("class",t.classes)}))},show:function(){this.opts.onlyTimepicker||(this.$el.addClass("active"),this.acitve=!0)},hide:function(){this.$el.removeClass("active"),this.active=!1},_handleClick:function(e){var t=e.data("date")||1,i=e.data("month")||0,n=e.data("year")||this.d.parsedDate.year,o=this.d;if(o.view==this.opts.minView){var s=new Date(n,i,t),r=this.d._isSelected(s,this.d.cellType);r?o._handleAlreadySelectedDates.bind(o,r,s)():o._trigger("clickCell",s)}else o.down(new Date(n,i,t))},_onClickCell:function(t){var i=e(t.target).closest(".datepicker--cell");i.hasClass("-disabled-")||this._handleClick.bind(this)(i)}}}).call(this,i(0))},function(e,t,i){(function(e){var t,i;t=e.fn.datepicker,i=t.Constructor,t.Navigation=function(e,t){this.d=e,this.opts=t,this.$buttonsContainer="",this.init()},t.Navigation.prototype={init:function(){this._buildBaseHtml(),this._bindEvents()},_bindEvents:function(){this.d.$nav.on("click",".datepicker--nav-action",e.proxy(this._onClickNavButton,this)),this.d.$nav.on("click",".datepicker--nav-title",e.proxy(this._onClickNavTitle,this)),this.d.$datepicker.on("click",".datepicker--button",e.proxy(this._onClickNavButton,this))},_buildBaseHtml:function(){this.opts.onlyTimepicker||this._render(),this._addButtonsIfNeed()},_addButtonsIfNeed:function(){this.opts.todayButton&&this._addButton("today"),this.opts.clearButton&&this._addButton("clear")},_render:function(){var t=this._getTitle(this.d.currentDate),n=i.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',e.extend({title:t},this.opts));this.d.$nav.html(n),"years"==this.d.view&&e(".datepicker--nav-title",this.d.$nav).addClass("-disabled-"),this.setNavStatus()},_getTitle:function(e){return this.d.formatDate(this.opts.navTitles[this.d.view],e)},_addButton:function(t){this.$buttonsContainer.length||this._addButtonsContainer();var n={action:t,label:this.d.loc[t]},o=i.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>',n);e("[data-action="+t+"]",this.$buttonsContainer).length||this.$buttonsContainer.append(o)},_addButtonsContainer:function(){this.d.$datepicker.append('<div class="datepicker--buttons"></div>'),this.$buttonsContainer=e(".datepicker--buttons",this.d.$datepicker)},setNavStatus:function(){if((this.opts.minDate||this.opts.maxDate)&&this.opts.disableNavWhenOutOfRange){var e=this.d.parsedDate,t=e.month,n=e.year,o=e.date;switch(this.d.view){case"days":this.d._isInRange(new Date(n,t-1,1),"month")||this._disableNav("prev"),this.d._isInRange(new Date(n,t+1,1),"month")||this._disableNav("next");break;case"months":this.d._isInRange(new Date(n-1,t,o),"year")||this._disableNav("prev"),this.d._isInRange(new Date(n+1,t,o),"year")||this._disableNav("next");break;case"years":var s=i.getDecade(this.d.date);this.d._isInRange(new Date(s[0]-1,0,1),"year")||this._disableNav("prev"),this.d._isInRange(new Date(s[1]+1,0,1),"year")||this._disableNav("next")}}},_disableNav:function(t){e('[data-action="'+t+'"]',this.d.$nav).addClass("-disabled-")},_activateNav:function(t){e('[data-action="'+t+'"]',this.d.$nav).removeClass("-disabled-")},_onClickNavButton:function(t){var i=e(t.target).closest("[data-action]").data("action");this.d[i]()},_onClickNavTitle:function(t){if(!e(t.target).hasClass("-disabled-"))return"days"==this.d.view?this.d.view="months":void(this.d.view="years")}}}).call(this,i(0))},function(e,t,i){(function(e){var t,i;t=e.fn.datepicker,i=t.Constructor,t.Timepicker=function(e,t){this.d=e,this.opts=t,this.init()},t.Timepicker.prototype={init:function(){var e="input";this._setTime(this.d.date),this._buildHTML(),navigator.userAgent.match(/trident/gi)&&(e="change"),this.d.$el.on("selectDate",this._onSelectDate.bind(this)),this.$ranges.on(e,this._onChangeRange.bind(this)),this.$ranges.on("mouseup",this._onMouseUpRange.bind(this)),this.$ranges.on("mousemove focus ",this._onMouseEnterRange.bind(this)),this.$ranges.on("mouseout blur",this._onMouseOutRange.bind(this))},_setTime:function(e){var t=i.getParsedDate(e);this._handleDate(e),this.hours=t.hours<this.minHours?this.minHours:t.hours,this.minutes=t.minutes<this.minMinutes?this.minMinutes:t.minutes},_setMinTimeFromDate:function(e){this.minHours=e.getHours(),this.minMinutes=e.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()>e.getHours()&&(this.minMinutes=this.opts.minMinutes)},_setMaxTimeFromDate:function(e){this.maxHours=e.getHours(),this.maxMinutes=e.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()<e.getHours()&&(this.maxMinutes=this.opts.maxMinutes)},_setDefaultMinMaxTime:function(){var e=this.opts;this.minHours=e.minHours<0||e.minHours>23?0:e.minHours,this.minMinutes=e.minMinutes<0||e.minMinutes>59?0:e.minMinutes,this.maxHours=e.maxHours<0||e.maxHours>23?23:e.maxHours,this.maxMinutes=e.maxMinutes<0||e.maxMinutes>59?59:e.maxMinutes},_validateHoursMinutes:function(e){this.hours<this.minHours?this.hours=this.minHours:this.hours>this.maxHours&&(this.hours=this.maxHours),this.minutes<this.minMinutes?this.minutes=this.minMinutes:this.minutes>this.maxMinutes&&(this.minutes=this.maxMinutes)},_buildHTML:function(){var t=i.getLeadingZeroNum,n={hourMin:this.minHours,hourMax:t(this.maxHours),hourStep:this.opts.hoursStep,hourValue:this.hours,hourVisible:t(this.displayHours),minMin:this.minMinutes,minMax:t(this.maxMinutes),minStep:this.opts.minutesStep,minValue:t(this.minutes)},o=i.template('<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',n);this.$timepicker=e(o).appendTo(this.d.$datepicker),this.$ranges=e('[type="range"]',this.$timepicker),this.$hours=e('[name="hours"]',this.$timepicker),this.$minutes=e('[name="minutes"]',this.$timepicker),this.$hoursText=e(".datepicker--time-current-hours",this.$timepicker),this.$minutesText=e(".datepicker--time-current-minutes",this.$timepicker),this.d.ampm&&(this.$ampm=e('<span class="datepicker--time-current-ampm">').appendTo(e(".datepicker--time-current",this.$timepicker)).html(this.dayPeriod),this.$timepicker.addClass("-am-pm-"))},_updateCurrentTime:function(){var e=i.getLeadingZeroNum(this.displayHours),t=i.getLeadingZeroNum(this.minutes);this.$hoursText.html(e),this.$minutesText.html(t),this.d.ampm&&this.$ampm.html(this.dayPeriod)},_updateRanges:function(){this.$hours.attr({min:this.minHours,max:this.maxHours}).val(this.hours),this.$minutes.attr({min:this.minMinutes,max:this.maxMinutes}).val(this.minutes)},_handleDate:function(e){this._setDefaultMinMaxTime(),e&&(i.isSame(e,this.d.opts.minDate)?this._setMinTimeFromDate(this.d.opts.minDate):i.isSame(e,this.d.opts.maxDate)&&this._setMaxTimeFromDate(this.d.opts.maxDate)),this._validateHoursMinutes(e)},update:function(){this._updateRanges(),this._updateCurrentTime()},_getValidHoursFromDate:function(e,t){var n=e;e instanceof Date&&(n=i.getParsedDate(e).hours);var o="am";if(t||this.d.ampm)switch(!0){case 0==n:n=12;break;case 12==n:o="pm";break;case n>11:n-=12,o="pm"}return{hours:n,dayPeriod:o}},set hours(e){this._hours=e;var t=this._getValidHoursFromDate(e);this.displayHours=t.hours,this.dayPeriod=t.dayPeriod},get hours(){return this._hours},_onChangeRange:function(t){var i=e(t.target),n=i.attr("name");this.d.timepickerIsActive=!0,this[n]=i.val(),this._updateCurrentTime(),this.d._trigger("timeChange",[this.hours,this.minutes]),this._handleDate(this.d.lastSelectedDate),this.update()},_onSelectDate:function(e,t){this._handleDate(t),this.update()},_onMouseEnterRange:function(t){var i=e(t.target).attr("name");e(".datepicker--time-current-"+i,this.$timepicker).addClass("-focus-")},_onMouseOutRange:function(t){var i=e(t.target).attr("name");this.d.inFocus||e(".datepicker--time-current-"+i,this.$timepicker).removeClass("-focus-")},_onMouseUpRange:function(e){this.d.timepickerIsActive=!1}}}).call(this,i(0))},,,function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));i(26);function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=this.state()}var t,i,o;return t=e,(i=[{key:"state",value:function(){return{activeClassName:"pagination__link_active",disableClassName:"disabled",ulClassName:"pagination__list",prevText:'<i class="pagination__icon material-icons">arrow_back</i>',nextText:'<i class="pagination__icon material-icons">arrow_forward</i>',pageRange:1,autoHideNext:!0,autoHidePrevious:!0,dataSource:function(){for(var e=[],t=1;t<150;t+=1)e.push(t);return e}()}}},{key:"init",value:function(e){e.pagination(this.options)}}])&&n(t.prototype,i),o&&n(t,o),e}();function s(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.adapter=new o,this.element=t,this.init()}var t,i,n;return t=e,(i=[{key:"init",value:function(){this.adapter.init(this.element)}}])&&s(t.prototype,i),n&&s(t,n),e}()},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));i(24);function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=this.state()}var t,i,o;return t=e,(i=[{key:"state",value:function(){return{fromTo:!0,max:15e3,from:5e3,to:1e4,isColor:!1,isScale:!1,isLabel:!1,color:"#6fcf97",gradient:"#66d2ea",gradientDeg:"180"}}},{key:"init",value:function(e){e.colorSlider(this.options)}}])&&n(t.prototype,i),o&&n(t,o),e}();function s(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.adapter=new o,this.element=t,this.init()}var t,i,n;return t=e,(i=[{key:"init",value:function(){this.adapter.init(this.element)}}])&&s(t.prototype,i),n&&s(t,n),e}()},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));i(22);function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=this.state()}var t,i,o;return t=e,(i=[{key:"state",value:function(){return{dots:!0,waitForAnimate:!1,nextArrow:'<button type="button" class="slick-next"><i class="slick-icon__right slick-icon material-icons">expand_more</i></button>',prevArrow:'<button type="button" class="slick-prev"><i class="slick-icon__left slick-icon material-icons">expand_more</i></button>'}}},{key:"init",value:function(e){e.slick(this.options)}}])&&n(t.prototype,i),o&&n(t,o),e}();function s(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.adapter=new o,this.element=t,this.init()}var t,i,n;return t=e,(i=[{key:"init",value:function(){this.adapter.init(this.element)}}])&&s(t.prototype,i),n&&s(t,n),e}()},function(e,t,i){"use strict";i.r(t),function(e){var t=i(20);e(".js-slick").each((function(i,n){new t.a(e(n))}))}.call(this,i(0))},function(e,t,i){var n,o,s;!function(r){"use strict";o=[i(0)],void 0===(s="function"==typeof(n=function(e){var t=window.Slick||{};(i=0,t=function(t,n){var o,s=this;s.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,i){return e('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},s.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(s,s.initials),s.activeBreakpoint=null,s.animType=null,s.animProp=null,s.breakpoints=[],s.breakpointSettings=[],s.cssTransitions=!1,s.focussed=!1,s.interrupted=!1,s.hidden="hidden",s.paused=!0,s.positionProp=null,s.respondTo=null,s.rowCount=1,s.shouldClick=!0,s.$slider=e(t),s.$slidesCache=null,s.transformType=null,s.transitionType=null,s.visibilityChange="visibilitychange",s.windowWidth=0,s.windowTimer=null,o=e(t).data("slick")||{},s.options=e.extend({},s.defaults,n,o),s.currentSlide=s.options.initialSlide,s.originalSettings=s.options,void 0!==document.mozHidden?(s.hidden="mozHidden",s.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(s.hidden="webkitHidden",s.visibilityChange="webkitvisibilitychange"),s.autoPlay=e.proxy(s.autoPlay,s),s.autoPlayClear=e.proxy(s.autoPlayClear,s),s.autoPlayIterator=e.proxy(s.autoPlayIterator,s),s.changeSlide=e.proxy(s.changeSlide,s),s.clickHandler=e.proxy(s.clickHandler,s),s.selectHandler=e.proxy(s.selectHandler,s),s.setPosition=e.proxy(s.setPosition,s),s.swipeHandler=e.proxy(s.swipeHandler,s),s.dragHandler=e.proxy(s.dragHandler,s),s.keyHandler=e.proxy(s.keyHandler,s),s.instanceUid=i++,s.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,s.registerBreakpoints(),s.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,i,n){var o=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=o.slideCount)return!1;o.unload(),"number"==typeof i?0===i&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):n?e(t).insertBefore(o.$slides.eq(i)):e(t).insertAfter(o.$slides.eq(i)):!0===n?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each((function(t,i){e(i).attr("data-slick-index",t)})),o.$slidesCache=o.$slides,o.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,i){var n={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,i):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,i):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(n[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(n)):(n[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?n[o.animType]="translate3d("+t+"px, 0px, 0px)":n[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(n),i&&setTimeout((function(){o.disableTransition(),i.call()}),o.options.speed))},t.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=e(t).not(this.$slider)),t},t.prototype.asNavFor=function(t){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each((function(){var i=e(this).slick("getSlick");i.unslicked||i.slideHandler(t,!0)}))},t.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,i,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),i=e("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)i.append(e("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each((function(t,i){e(i).attr("data-slick-index",t).data("originalStyling",e(i).attr("style")||"")})),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,i,n,o,s,r,a=this;if(n=document.createDocumentFragment(),s=a.$slider.children(),a.options.rows>0){for(r=a.options.slidesPerRow*a.options.rows,o=Math.ceil(s.length/r),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var u=e*r+(t*a.options.slidesPerRow+i);s.get(u)&&c.appendChild(s.get(u))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,i){var n,o,s,r=this,a=!1,l=r.$slider.width(),c=window.innerWidth||e(window).width();if("window"===r.respondTo?s=c:"slider"===r.respondTo?s=l:"min"===r.respondTo&&(s=Math.min(c,l)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in o=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?s<r.breakpoints[n]&&(o=r.breakpoints[n]):s>r.breakpoints[n]&&(o=r.breakpoints[n]));null!==o?null!==r.activeBreakpoint?(o!==r.activeBreakpoint||i)&&(r.activeBreakpoint=o,"unslick"===r.breakpointSettings[o]?r.unslick(o):(r.options=e.extend({},r.originalSettings,r.breakpointSettings[o]),!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t)),a=o):(r.activeBreakpoint=o,"unslick"===r.breakpointSettings[o]?r.unslick(o):(r.options=e.extend({},r.originalSettings,r.breakpointSettings[o]),!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t)),a=o):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t),a=o),t||!1===a||r.$slider.trigger("breakpoint",[r,a])}},t.prototype.changeSlide=function(t,i){var n,o,s=this,r=e(t.currentTarget);switch(r.is("a")&&t.preventDefault(),r.is("li")||(r=r.closest("li")),n=s.slideCount%s.options.slidesToScroll!=0?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,t.data.message){case"previous":o=0===n?s.options.slidesToScroll:s.options.slidesToShow-n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-o,!1,i);break;case"next":o=0===n?s.options.slidesToScroll:n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+o,!1,i);break;case"index":var a=0===t.data.index?0:t.data.index||r.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(a),!1,i),r.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var n in t){if(e<t[n]){e=i;break}i=t[n]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&((e=t.$slides.children().children()).removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),e(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){e(this).attr("style",e(this).data("originalStyling"))})),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,t||i.$slider.trigger("destroy",[i])},t.prototype.disableTransition=function(e){var t=this,i={};i[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},t.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout((function(){i.disableTransition(e),t.call()}),i.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(i){i.stopImmediatePropagation();var n=e(this);setTimeout((function(){t.options.pauseOnFocus&&(t.focussed=n.is(":focus"),t.autoPlay())}),0)}))},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){return this.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},t.prototype.getLeft=function(e){var t,i,n,o,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,o=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?o=-1.5:1===s.options.slidesToShow&&(o=-2)),r=i*s.options.slidesToShow*o),s.slideCount%s.options.slidesToScroll!=0&&e+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(e>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(e-s.slideCount))*s.slideWidth*-1,r=(s.options.slidesToShow-(e-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,r=s.slideCount%s.options.slidesToScroll*i*-1))):e+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(e+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(e+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(s.slideOffset=0,r=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),t=!1===s.options.vertical?e*s.slideWidth*-1+s.slideOffset:e*i*-1+r,!0===s.options.variableWidth&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow),t=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===s.options.centerMode&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow+1),t=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,t+=(s.$list.width()-n.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){return this.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(i=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,e=2*t.slideCount);i<e;)o.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,i,n=this;return i=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each((function(o,s){if(s.offsetLeft-i+e(s).outerWidth()/2>-1*n.swipeLeft)return t=s,!1})),Math.abs(e(t).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var i=this;e(i.$slider).hasClass("slick-initialized")||(e(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),t&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},t.prototype.initADA=function(){var t=this,i=Math.ceil(t.slideCount/t.options.slidesToShow),n=t.getNavigableIndexes().filter((function(e){return e>=0&&e<t.slideCount}));t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each((function(i){var o=n.indexOf(i);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+i,tabindex:-1}),-1!==o){var s="slick-slide-control"+t.instanceUid+o;e("#"+s).length&&e(this).attr({"aria-describedby":s})}})),t.$dots.attr("role","tablist").find("li").each((function(o){var s=n[o];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+o,"aria-controls":"slick-slide"+t.instanceUid+s,"aria-label":o+1+" of "+i,"aria-selected":null,tabindex:"-1"})})).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=t.currentSlide,s=o+t.options.slidesToShow;o<s;o++)t.options.focusOnChange?t.$slides.eq(o).attr({tabindex:"0"}):t.$slides.eq(o).removeAttr("tabindex");t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},t.prototype.lazyLoad=function(){var t,i,n,o=this;function s(t){e("img[data-lazy]",t).each((function(){var t=e(this),i=e(this).attr("data-lazy"),n=e(this).attr("data-srcset"),s=e(this).attr("data-sizes")||o.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){t.animate({opacity:0},100,(function(){n&&(t.attr("srcset",n),s&&t.attr("sizes",s)),t.attr("src",i).animate({opacity:1},200,(function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),o.$slider.trigger("lazyLoaded",[o,t,i])}))},r.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,t,i])},r.src=i}))}if(!0===o.options.centerMode?!0===o.options.infinite?n=(i=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(i=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),n=o.options.slidesToShow/2+1+2+o.currentSlide):(i=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,n=Math.ceil(i+o.options.slidesToShow),!0===o.options.fade&&(i>0&&i--,n<=o.slideCount&&n++)),t=o.$slider.find(".slick-slide").slice(i,n),"anticipated"===o.options.lazyLoad)for(var r=i-1,a=n,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)r<0&&(r=o.slideCount-1),t=(t=t.add(l.eq(r))).add(l.eq(a)),r--,a++;s(t),o.slideCount<=o.options.slidesToShow?s(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?s(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&s(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var i=this;i.unslicked||(i.$slider.trigger("afterChange",[i,t]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange&&e(i.$slides.get(i.currentSlide)).attr("tabindex",0).focus()))},t.prototype.prev=t.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var i,n,o,s,r,a=this,l=e("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),o=i.attr("data-srcset"),s=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){o&&(i.attr("srcset",o),s&&i.attr("sizes",s)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},r.onerror=function(){t<3?setTimeout((function(){a.progressiveLazyLoad(t+1)}),500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},r.src=n):a.$slider.trigger("allImagesLoaded",[a])},t.prototype.refresh=function(t){var i,n,o=this;n=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>n&&(o.currentSlide=n),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),i=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:i}),o.init(),t||o.changeSlide({data:{message:"index",index:i}},!1)},t.prototype.registerBreakpoints=function(){var t,i,n,o=this,s=o.options.responsive||null;if("array"===e.type(s)&&s.length){for(t in o.respondTo=o.options.respondTo||"window",s)if(n=o.breakpoints.length-1,s.hasOwnProperty(t)){for(i=s[t].breakpoint;n>=0;)o.breakpoints[n]&&o.breakpoints[n]===i&&o.breakpoints.splice(n,1),n--;o.breakpoints.push(i),o.breakpointSettings[i]=s[t].settings}o.breakpoints.sort((function(e,t){return o.options.mobileFirst?e-t:t-e}))}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout((function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()}),50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,i){var n=this;if(e="boolean"==typeof e?!0===(t=e)?0:n.slideCount-1:!0===t?--e:e,n.slideCount<1||e<0||e>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},t.prototype.setCSS=function(e){var t,i,n=this,o={};!0===n.options.rtl&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",o[n.positionProp]=e,!1===n.transformsEnabled?n.$slideTrack.css(o):(o={},!1===n.cssTransitions?(o[n.animType]="translate("+t+", "+i+")",n.$slideTrack.css(o)):(o[n.animType]="translate3d("+t+", "+i+", 0px)",n.$slideTrack.css(o)))},t.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,i=this;i.$slides.each((function(n,o){t=i.slideWidth*n*-1,!0===i.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:i.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:i.options.zIndex-2,opacity:0})})),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,i,n,o,s,r=this,a=!1;if("object"===e.type(arguments[0])?(n=arguments[0],a=arguments[1],s="multiple"):"string"===e.type(arguments[0])&&(n=arguments[0],o=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?s="responsive":void 0!==arguments[1]&&(s="single")),"single"===s)r.options[n]=o;else if("multiple"===s)e.each(n,(function(e,t){r.options[e]=t}));else if("responsive"===s)for(i in o)if("array"!==e.type(r.options.responsive))r.options.responsive=[o[i]];else{for(t=r.options.responsive.length-1;t>=0;)r.options.responsive[t].breakpoint===o[i].breakpoint&&r.options.responsive.splice(t,1),t--;r.options.responsive.push(o[i])}a&&(r.unload(),r.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},t.prototype.setSlideClasses=function(e){var t,i,n,o,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(e).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;t=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(e>=t&&e<=s.slideCount-1-t?s.$slides.slice(e-t+r,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=s.options.slidesToShow+e,i.slice(n-t+1+r,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):e===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=s.slideCount-s.options.slidesToShow?s.$slides.slice(e,e+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(o=s.slideCount%s.options.slidesToShow,n=!0===s.options.infinite?s.options.slidesToShow+e:e,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-e<s.options.slidesToShow?i.slice(n-(s.options.slidesToShow-o),n+o).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},t.prototype.setupInfinite=function(){var t,i,n,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(i=null,o.slideCount>o.options.slidesToShow)){for(n=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-n;t-=1)i=t-1,e(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<n+o.slideCount;t+=1)i=t,e(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each((function(){e(this).attr("id","")}))}},t.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},t.prototype.selectHandler=function(t){var i=this,n=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(n.attr("data-slick-index"));o||(o=0),i.slideCount<=i.options.slidesToShow?i.slideHandler(o,!1,!0):i.slideHandler(o)},t.prototype.slideHandler=function(e,t,i){var n,o,s,r,a,l,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),n=e,a=c.getLeft(n),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=n<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),s=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(s),c.fadeSlide(o,(function(){c.postSlide(o)}))):c.postSlide(o),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,(function(){c.postSlide(o)})):c.postSlide(o)}},t.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,i,n,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,i=Math.atan2(t,e),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&n>=0||n<=360&&n>=315?!1===o.options.rtl?"left":"right":n>=135&&n<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?n>=35&&n<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,i,n,o,s,r,a=this;return s=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:e.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&r>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+n*o:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+n*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},t.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return i.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,i,n=this,o=arguments[0],s=Array.prototype.slice.call(arguments,1),r=n.length;for(e=0;e<r;e++)if("object"==typeof o||void 0===o?n[e].slick=new t(n[e],o):i=n[e].slick[o].apply(n[e].slick,s),void 0!==i)return i;return n};var i})?n.apply(t,o):n)||(e.exports=s)}()},function(e,t,i){"use strict";i.r(t),function(e){var t=i(19);e(".js-range-slider").each((function(i,n){new t.a(e(n))}))}.call(this,i(0))},function(e,t,i){(function(e){!function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=3)}([function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0;var n=function(){function e(){this.events={}}return e.prototype.subscribe=function(e,t){!this.events[e]&&(this.events[e]=[]),this.events[e].push(t)},e.prototype.unsubscribe=function(e,t){this.events[e]=this.events[e].filter((function(e){return t!==e}))},e.prototype.emit=function(e,t){var i=this.events[e];i&&i.forEach((function(e){return e.call(null,t)}))},e}();t.EventEmitter=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.standardOptions=void 0;var n={orientation:"horizontal",type:"double",min:0,max:10,step:1,from:3,to:7,prefix:"â½",isPrefix:!0,isLabel:!0,isScale:!0,color:"orange",isScalePrefix:!0,scalePrefix:"â½",minMax:!1,fromTo:!1,isTrackPrefix:!0,trackPrefix:"â½",isColor:!0,changeColor:!0,isChangeColor:!0,isGradient:!0,gradient:"purple",gradientDeg:45,isColorOut:!1,onlyDivisions:!1,allColors:i(11).allColors};t.standardOptions=n},function(e,t,i){"use strict";var n,o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),s=[];function r(e){for(var t=-1,i=0;i<s.length;i++)if(s[i].identifier===e){t=i;break}return t}function a(e,t){for(var i={},n=[],o=0;o<e.length;o++){var a=e[o],l=t.base?a[0]+t.base:a[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var d=r(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(s[d].references++,s[d].updater(p)):s.push({identifier:u,updater:m(p,t),references:1}),n.push(u)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var s=i.nc;s&&(n.nonce=s)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var s=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function p(e,t,i){var n=i.css,o=i.media,s=i.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var h=null,f=0;function m(e,t){var i,n,o;if(t.singleton){var s=f++;i=h||(h=l(t)),n=d.bind(null,i,s,!1),o=d.bind(null,i,s,!0)}else i=l(t),n=p.bind(null,i,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var o=r(i[n]);s[o].references--}for(var l=a(e,t),c=0;c<i.length;c++){var u=r(i[c]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}i=l}}}},function(t,i,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(i,"__esModule",{value:!0});var s,r=n(4),a=n(1);n(12),(s=e).fn.colorSlider=function(e,t){var i={init:function(e,t){var i=s.extend({},a.standardOptions,t);return e.data("presenter",new r.Presenter(i,e)),e.data("options",o(o({},i),e.data("presenter").getOptions())),e},change:function(e,t){return void 0===t?e.data("presenter"):(e.data("presenter").setOptions(t),e.data("presenter").upDataView(),this)},getValue:function(e,t){return e.data("presenter").emitter.subscribe("newData",t),void 0===t||e.data("presenter").emitter.subscribe("newData",t),this}};return"string"==typeof e&&"change"===e?i[e].call(this,this,arguments[1]):("string"==typeof e&&"getValue"===e&&i[e].call(this,this,arguments[1]),"object"!=typeof e&&e?void 0:i.init(this,e))}},function(e,t,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Presenter=void 0;var o=i(5),s=i(6),r=i(0),a=i(1),l=function(){function e(e,t){this.element=t,this.emitter=new r.EventEmitter,this.model=this.createModel(e),this.view=this.createView(this.model.state,t),this.bindSubscribe()}return e.prototype.upDataView=function(){this.view.upDataSlider()},e.prototype.setOptions=function(e){var t=n(n({},a.standardOptions),e);this.model.setData(t)},e.prototype.getOptions=function(){return this.model.state},e.prototype.createModel=function(e){return new o.Model(e)},e.prototype.createView=function(e,t){return new s.View(e,t)},e.prototype.bindSubscribe=function(){this.getNewData=this.getNewData.bind(this),this.sendNewPosition=this.sendNewPosition.bind(this),this.addSubscribtions()},e.prototype.addSubscribtions=function(){this.model.emitter.subscribe("newData",this.getNewData),this.view.emitter.subscribe("newPosition",this.sendNewPosition)},e.prototype.getNewData=function(e){this.view.upData(e),this.emitter.emit("newData",e)},e.prototype.sendNewPosition=function(e){var t=this.model.state,i=n(n({},t),e);this.model.setData(i)},e}();t.Presenter=l},function(e,t,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Model=void 0;var o=i(0),s=function(){function e(e){this.emitter=new o.EventEmitter,this.state=this.init(e)}return e.prototype.setData=function(e){var t=this.validateFromTo(e),i=this.validateMinMaxStep(e);this.state=n(n(n({},e),t),i),this.emitter.emit("newData",this.state)},e.prototype.init=function(e){return this.setData(e),this.state},e.prototype.validateMinMaxStep=function(e){var t=e.min,i=e.max,n=e.step;n<1&&(e.step=1);var o=Math.abs(i)/2;return n>o&&(e.step=o),i<=t&&i<0&&(e.min=t-n),t>=i&&i>0&&(e.min=t,e.max=t+n),i<0&&i<t&&(e.max=t+n,e.min=t),e},e.prototype.validateFromTo=function(e){var t=e.from,i=e.to,n=e.max,o=e.min,s=e.type,r=e.step;return"single"===s&&(e.to=n),o>t&&(e.from=o),i>n&&(e.to=n),n<0&&0===o&&(e.from=o,e.to=o),"double"===s&&t>=i&&(e.from=i-r),i<=o&&(e.to=o+r,e.from=o),t>0&&o<0&&n<0&&(e.from=o),n<o&&(e.to=o+r),e},e}();t.Model=s},function(e,t,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var o=i(0),s=i(7),r=i(8),a=i(9),l=i(10),c=function(){function e(e,t){this.emitter=new o.EventEmitter,this.element=t,this.slider=this.createSlider(e,t),this.state=this.init(e),this.rollers=this.createRollers(this.state),this.bar=this.createBar(this.state),this.track=this.createTrack(this.state),this.scale=this.createScale(this.state),this.upData(this.state),this.bindEventListeners()}return e.prototype.init=function(e){var t=this.getSliderSize(e),i=this.getOneStep(e),o=this.slider;return n(n({},e),{size:t,oneStep:i,slider:o})},e.prototype.createSlider=function(e,t){var i=e.orientation,n=document.createElement("div");return n.className="slider slider_"+i,t.append(n),n},e.prototype.createTrack=function(e){return new r.Track(e)},e.prototype.createBar=function(e){return new l.Bar(e)},e.prototype.createRollers=function(e){return new s.Rollers(e)},e.prototype.createScale=function(e){return new a.Scale(e)},e.prototype.upData=function(e){var t=n(n({},this.state),e);this.rollers.upData(t),this.bar.upData(t),this.scale.upData(t),this.track.upData(t),this.state=n({},t)},e.prototype.upDataSlider=function(){this.slider.remove(),this.slider=this.createSlider(this.state,this.element),this.state=this.init(this.state),this.rollers=this.createRollers(this.state),this.scale=this.createScale(this.state),this.track=this.createTrack(this.state),this.bar=this.createBar(this.state),this.upData(this.state),this.bindEventListeners()},e.prototype.getOneStep=function(e){var t=e.min,i=e.max,n=e.step,o=Math.ceil((i-t)/n);return this.getSliderSize(e)/o},e.prototype.bindEventListeners=function(){this.onTrackClick=this.onTrackClick.bind(this),this.onScaleClick=this.onScaleClick.bind(this),this.addEventListeners()},e.prototype.addEventListeners=function(){var e=this.dragStart.bind(this);this.slider.addEventListener("touchstart",e),this.slider.addEventListener("mousedown",e),this.slider.addEventListener("click",this.onTrackClick),this.slider.addEventListener("scaleclick",this.onScaleClick)},e.prototype.dragStart=function(e){var t=e.target;if(this.getTargetType(t)){var i=this.drag.bind(this,t),n=function(){document.removeEventListener("mousemove",i),t.removeEventListener("touchmove",i),document.removeEventListener("mouseup",n),t.removeEventListener("touchend",n)};document.addEventListener("mousemove",i),t.addEventListener("touchmove",i),document.addEventListener("mouseup",n),t.addEventListener("touchend",n)}},e.prototype.drag=function(e,t){var i=this.state.orientation,n=0;t.preventDefault(),/roller/.test(e.className)&&(n="horizontal"===i?"touchmove"===t.type?this.convertPxToValue(t.touches[0].clientX):this.convertPxToValue(t.clientX):"touchmove"===t.type?this.convertPxToValue(t.touches[0].clientY):this.convertPxToValue(t.clientY),this.updatePosition(n,e))},e.prototype.getTargetType=function(e){var t=this.slider.querySelectorAll(".slider__roller");return t[0]&&t[0].contains(e)?"from":t[1].contains(e)?"to":"undefined"},e.prototype.onScaleClick=function(e){var t=e.detail.value;this.updatePosition(t)},e.prototype.onTrackClick=function(e){var t=this.state.orientation,i=e.target,n=0;if(!/scale/.test(i.className)){n="horizontal"===t?e.clientX:e.clientY;var o=this.convertPxToValue(n);this.updatePosition(o)}},e.prototype.updatePosition=function(e,t){var i=this.state,n=i.from,o=i.to,s=i.type,r=i.step;this.convertValueToColor(e);var a=Math.abs(n-e),l=Math.abs(o-e);"single"===s&&a?this.emitter.emit("newPosition",{from:e}):t?"from"===this.getTargetType(t)?(e>o-r&&(e=n),this.emitter.emit("newPosition",{from:e})):(e<n+r&&(e=o),this.emitter.emit("newPosition",{to:e})):"from"==(a<l?"from":"to")?this.emitter.emit("newPosition",{from:e}):this.emitter.emit("newPosition",{to:e})},e.prototype.convertPxToValue=function(e){var t,i=this.state,n=i.min,o=i.max,s=i.step,r=i.oneStep,a=i.size,l=i.orientation,c=this.getSliderPosition();return(t="horizontal"===l?e-c:c+a-e)>a?o:t<0?n:Math.round(t/r)*s+n},e.prototype.convertValueToColor=function(e){var t=this.state,i=t.color,n=t.gradient,o=this.state,s=o.max,r=o.isColor,a=o.changeColor,l=e/s;if(!0===r){var c=0,u=0;!1===a?(c=Math.round(255*l*255*255),u=Math.round(255*l*254*254)):(c=Math.round(256*l*256*255),u=Math.round(254*l*254*254));var d=Math.abs(u);i="#"+Math.abs(c).toString(16),n="#"+d.toString(16),this.emitter.emit("newPosition",{color:i}),this.emitter.emit("newPosition",{gradient:n})}},e.prototype.getSliderPosition=function(){var e=this.state,t=e.orientation,i=e.slider;return"horizontal"===t?i.getBoundingClientRect().left:i.getBoundingClientRect().top},e.prototype.getSliderSize=function(e){return"horizontal"===e.orientation?this.slider.getBoundingClientRect().width:this.slider.getBoundingClientRect().height},e}();t.View=c},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rollers=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,i=e.orientation,n=document.createElement("div");n.className="slider__roller slider__roller_first slider__roller_"+i;var o=document.createElement("div");o.className="slider__roller_second\n      slider__roller\n      slider__roller_"+i,t.append(n),t.append(o),this.createTooltip(n,o,e),this.moveRollersAtValue(e,n,o),this.toggleRollers(e,o),this.updataColor(e,n,o)},e.prototype.createTooltip=function(e,t,i){var n=i.orientation,o=document.createElement("div");o.className="slider__tooltip_first slider__tooltip slider__tooltip_"+n;var s=document.createElement("div");s.className="slider__tooltip_second slider__tooltip slider__tooltip_"+n,e.append(o),t.append(s),this.updataOutTooltip(o,s,i)},e.prototype.updataOutTooltip=function(e,t,i){var n=i.to,o=i.from,s=i.color,r=i.prefix,a=i.isPrefix,l=i.isLabel,c=i.gradient,u=i.isColorOut,d=i.allColors,p=i.isChangeColor;!0===l&&(!0===a&&(e.innerHTML=""+o.toLocaleString()+r,t.innerHTML=""+n.toLocaleString()+r),!1===a&&(e.innerHTML=o.toLocaleString(),t.innerHTML=n.toLocaleString()));var h=d[s],f=d[c];void 0===f&&(f=c),void 0===h&&(h=s),!0===p&&!0===u&&(e.innerHTML=h.toLocaleString(),t.innerHTML=f.toLocaleString(),e.style.backgroundColor=""+s,t.style.backgroundColor=""+c,e.classList.add("slider__tooltip_bg"),t.classList.add("slider__tooltip_bg")),!1===l&&(e.classList.add("slider__tooltip_display-none"),t.classList.add("slider__tooltip_display-none"))},e.prototype.updataColor=function(e,t,i){var n=e.color,o=e.isGradient,s=e.gradient,r=e.isChangeColor,a=e.gradientDeg;!0===r&&(!0===o?(t.style.background="linear-gradient("+a+"deg, "+n+", "+s+")",i.style.background="linear-gradient("+a+"deg, "+n+", "+s+")"):(t.style.background=n,i.style.background=n))},e.prototype.moveRollersAtValue=function(e,t,i){var n=e.to,o=e.from,s=e.orientation,r=this.convertValueToPx(n,e),a=this.convertValueToPx(o,e),l=this.convertPxToProcent(r,e),c=this.convertPxToProcent(a,e);"horizontal"===s?(t.style.left=c+"%",i.style.left=l+"%"):(t.style.bottom=c+"%",i.style.bottom=l+"%")},e.prototype.upData=function(e){var t=e.slider,i=t.querySelector(".slider__roller_first"),n=t.querySelector(".slider__roller_second"),o=t.querySelector(".slider__tooltip_first"),s=t.querySelector(".slider__tooltip_second");this.moveRollersAtValue(e,i,n),this.toggleRollers(e,n),this.updataColor(e,i,n),this.updataOutTooltip(o,s,e)},e.prototype.convertValueToPx=function(e,t){var i=t.min,n=t.max,o=t.step,s=t.size,r=t.oneStep;return e===n?s:Math.round((e-i)/o)*r},e.prototype.convertPxToProcent=function(e,t){return 100*e/t.size},e.prototype.toggleRollers=function(e,t){var i=e.type;t.style.display="single"===i?"none":"block"},e}();t.Rollers=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Track=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,i=e.orientation,n=document.createElement("div");n.className="slider__track slider__track_"+i,t.append(n),this.createOutElement(n,e)},e.prototype.createOutElement=function(e,t){var i=t.orientation,n=document.createElement("div"),o=document.createElement("div");n.className="slider__out slider__out-start slider__out-start_"+i,o.className="slider__out slider__out-end slider__out-end_"+i,e.append(n),e.append(o),this.setStartEndTrackOut(n,o,t)},e.prototype.setStartEndTrackOut=function(e,t,i){var n=i.min,o=i.max,s=i.from,r=i.to,a=i.minMax,l=i.fromTo,c=i.isTrackPrefix,u=i.trackPrefix;!1===c&&(u=""),!0===a&&(e.innerHTML=""+n.toLocaleString()+u,t.innerHTML=""+o.toLocaleString()+u),!0===l&&(e.innerHTML=""+s.toLocaleString()+u,t.innerHTML=""+r.toLocaleString()+u)},e.prototype.upData=function(e){var t=e.slider,i=t.querySelector(".slider__out-start"),n=t.querySelector(".slider__out-end");this.setStartEndTrackOut(i,n,e)},e}();t.Track=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Scale=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,i=e.orientation,n=document.createElement("div");n.className="slider__scale slider__scale_"+i,t.append(n),this.addEventListeners(n),this.addScaleMarker(e,n),this.checkScale(e,n)},e.prototype.upData=function(e){var t=e.slider.querySelector(".slider__scale");this.checkScale(e,t),this.updataScaleMarker(e)},e.prototype.updataScaleMarker=function(e){var t=e.scalePrefix,i=e.isScalePrefix,n=e.onlyDivisions,o=e.slider,s=e.color;o.querySelectorAll(".slider__scale-value").forEach((function(e){!0===i?e.setAttribute("data-text",""+t):e.setAttribute("data-text",""),!0===n?(e.setAttribute("data-text",""),e.classList.add("slider__scale-value_fs-0")):e.classList.add("slider__scale-value_fs-normal")})),document.documentElement.style.setProperty("--scale-color"," "+s)},e.prototype.checkScale=function(e,t){var i=e.isScale;!1===i&&(t.style.display="none"),!0===i&&(t.style.display="")},e.prototype.addEventListeners=function(e){this.onScaleClick=this.onScaleClick.bind(this),e.addEventListener("click",this.onScaleClick)},e.prototype.addScaleMarker=function(e,t){for(var i=e.min,n=e.max,o=e.step,s=e.size,r=e.oneStep,a=this.getIncrement(e),l=a/o*r,c=document.createDocumentFragment(),u=0,d=i;d<n&&!(u>s-50);d+=a)this.createScaleMarker(c,d,u,e),u+=l;this.createScaleMarker(c,n,s,e),t.append(c)},e.prototype.getIncrement=function(e){var t=e.size,i=e.oneStep,n=e.step,o=Math.ceil(t/i);return Math.ceil(o/5)*n},e.prototype.createScaleMarker=function(e,t,i,n){var o=n.orientation,s=document.createElement("span");s.className="slider__scale-value slider__scale-value_"+o,e.append(s),s.innerHTML=t.toString(),this.updataScaleMarker(n);var r=this.convertPxToPercent(i,n);"horizontal"===o?s.style.left=r+"%":s.style.bottom=r+"%"},e.prototype.convertPxToPercent=function(e,t){return 100*e/t.size},e.prototype.onScaleClick=function(e){var t=e.target;if(t instanceof HTMLElement&&t.classList.contains("slider__scale-value")){var i=Number(t.innerHTML),n=new CustomEvent("scaleclick",{bubbles:!0,detail:{event:e,value:i}});t.dispatchEvent(n)}},e}();t.Scale=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=void 0;var n=function(){function e(e){this.create(e)}return e.prototype.create=function(e){var t=e.slider,i=e.orientation,n=document.createElement("div");n.className="slider__bar slider__bar_"+i,t.append(n),this.updataColor(e,n),this.updataBar(e,n)},e.prototype.upData=function(e){var t=e.slider.querySelector(".slider__bar");this.updataColor(e,t),this.updataBar(e,t)},e.prototype.updataColor=function(e,t){var i=e.color,n=e.isGradient,o=e.gradient,s=e.gradientDeg;!0===e.isChangeColor&&(t.style.background=!0===n?"linear-gradient("+s+"deg, "+i+", "+o+")":i)},e.prototype.getRollerPositions=function(e){var t=e.slider.querySelectorAll(".slider__roller");return[this.calculatePosition(t[0],e),this.calculatePosition(t[1],e)].sort((function(e,t){return e-t}))},e.prototype.calculatePosition=function(e,t){var i="horizontal"===t.orientation?"left":"top",n=Number.parseInt(getComputedStyle(e).width,10);return e.getBoundingClientRect()[i]+n/2},e.prototype.convertPxToProcent=function(e,t){return 100*e/t.size},e.prototype.updataBar=function(e,t){var i=e.type,n="horizontal"===e.orientation,o=n?"left":"top",s=n?"width":"height",r=this.getRollerPositions(e),a="single"===i,l=this.getNewSliderPos(e);if(a)if(n){var c=this.convertPxToProcent(Math.abs(r[1]-l),e);t.style[o]="0%",t.style[s]=c+"%"}else c=100-(u=this.convertPxToProcent(Math.abs(r[1]-l),e)),t.style[o]=u+"%",t.style[s]=c+"%";else{var u=this.convertPxToProcent(Math.abs(r[0]-l),e);c=this.convertPxToProcent(Math.abs(r[1]-r[0]),e),t.style[o]=u+"%",t.style[s]=c+"%"}},e.prototype.getNewSliderPos=function(e){var t=e.orientation,i=e.slider;return"horizontal"===t?i.getBoundingClientRect().left:i.getBoundingClientRect().top},e}();t.Bar=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.allColors=void 0,t.allColors={"#f0f8ff":"aliceblue","#faebd7":"antiquewhite","#00ffff":"aqua","#7fffd4":"aquamarine","#f0ffff":"azure","#f5f5dc":"beige","#ffe4c4":"bisque","#000000":"black","#ffebcd":"blanchedalmond","#0000ff":"blue","#8a2be2":"blueviolet","#a52a2a":"brown","#deb887":"burlywood","#5f9ea0":"cadetblue","#7fff00":"chartreuse","#d2691e":"chocolate","#ff7f50":"coral","#6495ed":"cornflowerblue","#fff8dc":"cornsilk","#dc143c":"crimson","#00008b":"darkblue","#008b8b":"darkcyan","#b8860b":"darkgoldenrod","#a9a9a9":"darkgray","#006400":"darkgreen","#bdb76b":"darkkhaki","#8b008b":"darkmagenta","#556b2f":"darkolivegreen","#ff8c00":"darkorange","#9932cc":"darkorchid","#8b0000":"darkred","#e9967a":"darksalmon","#8fbc8f":"darkseagreen","#483d8b":"darkslateblue","#5ddfbe":"aquamarine","#198000":"ÐÐµÐ»ÐµÐ½ÑÐ¹","#2f4f4f":"darkslategray","#00ced1":"darkturquoise","#9400d3":"darkviolet","#ff1493":"deeppink","#00bfff":"deepskyblue","#696969":"dimgray","#1e90ff":"dodgerblue","#b22222":"firebrick","#fffaf0":"floralwhite","#228b22":"forestgreen","#ff00ff":"fuchsia","#dcdcdc":"gainsboro","#f8f8ff":"ghostwhite","#daa520":"goldenrod","#ffd700":"gold","#808080":"gray","#008000":"ÐÐµÐ»ÐµÐ½ÑÐ¹","#adff2f":"greenyellow","#f0fff0":"honeydew","#ff69b4":"hotpink","#cd5c5c":"indianred","#4b0082":"indigo","#fffff0":"ivory","#f0e68c":"khaki","#fff0f5":"lavenderblush","#e6e6fa":"lavender","#7cfc00":"lawngreen","#fffacd":"lemonchiffon","#add8e6":"lightblue","#f08080":"lightcoral","#e0ffff":"lightcyan","#fafad2":"lightgoldenrodyellow","#d3d3d3":"lightgray","#90ee90":"lightgreen","#ffb6c1":"lightpink","#ffa07a":"lightsalmon","#20b2aa":"lightseagreen","#87cefa":"lightskyblue","#778899":"lightslategray","#b0c4de":"lightsteelblue","#ffffe0":"lightyellow","#00ff00":"lime","#32cd32":"limegreen","#faf0e6":"linen","#800000":"maroon","#66cdaa":"mediumaquamarine","#0000cd":"mediumblue","#ba55d3":"mediumorchid","#9370db":"mediumpurple","#3cb371":"mediumseagreen","#7b68ee":"mediumslateblue","#00fa9a":"mediumspringgreen","#48d1cc":"mediumturquoise","#c71585":"mediumvioletred","#191970":"midnightblue","#f5fffa":"mintcream","#ffe4e1":"mistyrose","#ffe4b5":"moccasin","#ffdead":"navajowhite","#000080":"navy","#fdf5e6":"oldlace","#808000":"olive","#6b8e23":"olivedrab","#ffa500":"orange","#ff4500":"orangered","#da70d6":"orchid","#eee8aa":"palegoldenrod","#98fb98":"palegreen","#afeeee":"paleturquoise","#db7093":"palevioletred","#ffefd5":"papayawhip","#ffdab9":"peachpuff","#cd853f":"peru","#ffc0cb":"pink","#dda0dd":"plum","#b0e0e6":"powderblue","#800080":"purple","#663399":"rebeccapurple","#ff0000":"ÐÑÐ°ÑÐ½ÑÐ¹","#bc8f8f":"rosybrown","#4169e1":"royalblue","#8b4513":"saddlebrown","#fa8072":"salmon","#f4a460":"sandybrown","#2e8b57":"seagreen","#fff5ee":"seashell","#a0522d":"sienna","#c0c0c0":"silver","#87ceeb":"skyblue","#6a5acd":"slateblue","#708090":"slategray","#fffafa":"snow","#00ff7f":"springgreen","#4682b4":"steelblue","#d2b48c":"tan","#008080":"teal","#d8bfd8":"thistle","#ff6347":"tomato","#40e0d0":"turquoise","#ee82ee":"violet","#f5deb3":"wheat","#ffffff":"ÐÐµÐ»ÑÐ¹","#f5f5f5":"whitesmoke","#ffff00":"ÐÐµÐ»ÑÑÐ¹","#9acd32":"Ð¯Ð±Ð»Ð¾ÑÐ½Ð¾-Ð·ÐµÐ»ÐµÐ½ÑÐ¹","#e58000":"ÐÐ¾ÑÐºÐ¾Ð²Ð½ÑÐ¹","#cc0000":"ÐÐ¾ÑÑÐ¾Ð½ÑÐºÐ¸Ð¹-ÐºÑÐ°ÑÐ½ÑÐ¹","#330000":"ÐÐ¾ÑÐ¸ÑÐ½ÐµÐ²ÑÐ¹","#7f8000":"ÐÐ»Ð¸Ð²ÐºÐ¾Ð²ÑÐ¹","#990000":"Ð¡Ð°Ð½Ð³ÑÐ¸Ñ","#b28000":"Ð¢ÐµÐ¼Ð½Ð¾-Ð·Ð¾Ð»Ð¾ÑÐ¾Ð¹","#4c8000":"ÐÐµÐ¶Ð½Ð¾-Ð¾Ð»Ð¸Ð²ÐºÐ¾Ð²ÑÐ¹","#660000":"ÐÐ¾ÑÐ¸ÑÐ½ÐµÐ²Ð¾-Ð¼Ð°Ð»Ð¸Ð½Ð¾Ð²ÑÐ¹","#6c6000":"ÐÐ»Ð¸Ð²ÐºÐ¾Ð²ÑÐ¹","#6a55c3":"ÐÑÑÐ¿ÑÑÐ½Ð¾-ÑÐ¸Ð½Ð¸Ð¹","#67c8f6":"Ð¯ÑÐºÐ¾-Ð³Ð¾Ð»ÑÐ±Ð¾Ð¹","#492f5c":"ÐÐ»ÑÐ±Ð¾ÐºÐ¸Ð¹-ÑÐ¸Ð¾Ð»ÐµÑÐ¾Ð²ÑÐ¹","#5cd1ec":"ÐÐ¾Ð»ÑÐ±Ð¾Ð¹","#13ff42":"Ð¯ÑÐºÐ¾-Ð·ÐµÐ»ÐµÐ½ÑÐ¹","#1da426":"ÐÐ°ÑÑÐµÐ»ÑÐ½Ð¾-Ð·ÐµÐ»ÐµÐ½ÑÐ¹","#2fdbc0":"ÐÐ¸ÑÑÐ·Ð¾Ð²ÑÐ¹","#386748":"Ð¢ÐµÐ¼Ð½Ð¾-Ð·ÐµÐ»ÐµÐ½ÑÐ¹","#59a9c1":"Ð¢ÐµÐ¼Ð½Ð¾-Ð³Ð¾Ð»ÑÐ±Ð¾Ð¹","#146666":"Ð¢ÐµÐ¼Ð½Ð¾-Ð±Ð¸ÑÑÐ·Ð¾Ð²ÑÐ¹","#c80993":"Ð¤Ð¸Ð¾Ð»ÐµÑÐ¾Ð²Ð¾-ÐºÑÐ°ÑÐ½ÑÐ¹","#fa0bf8":"Ð¤ÑÐºÑÐ¸Ñ","#190132":"Ð¢ÐµÐ¼Ð½Ð¾-ÑÐ¸Ð¾Ð»ÐµÑÐ¾Ð²ÑÐ¹","#320262":"Ð¢ÐµÐ¼Ð½Ð¾-ÑÐ¸Ð¾Ð»ÐµÑÐ¾Ð²ÑÐ¹","#4b0397":"ÐÐ½Ð´Ð¸Ð³Ð¾","#af0861":"Ð Ð¾Ð·Ð¾Ð²Ð°ÑÐ¾-Ð»Ð¸Ð»Ð¾Ð²ÑÐ¹","#e10ac6":"ÐÐ°Ð»Ð¸Ð½Ð¾Ð²ÑÐ¹","#96072e":"ÐÑÑÐ³ÑÐ½Ð´ÑÐºÐ¸Ð¹","#6404ca":"ÐÑÑÐ¿ÑÑÐ½Ð¾-ÑÐ¸Ð½Ð¸Ð¹","#7d05fc":"Ð¤Ð¸Ð¾Ð»ÐµÑÐ¾Ð²ÑÐ¹","#320265":"Ð¢ÐµÐ¼Ð½ÑÐ¹ Ð¸Ð½Ð´Ð¸Ð³Ð¾","#0":"#000",orange:"ÐÑÐ°Ð½Ð¶ÐµÐ²ÑÐ¹",purple:"Ð¤Ð¸Ð¾Ð»ÐµÑÐ¾Ð²ÑÐ¹","#4be74d":"ÐÐ°Ð»Ð°ÑÐ¸ÑÐ¾Ð²ÑÐ¹","#653466":"ÐÑÑÐ¿ÑÑÐ½ÑÐ¹","#329a33":"ÐÐµÐ»ÐµÐ½ÑÐ¹","#194d1a":"Ð¢ÐµÐ¼Ð½Ð¾-Ð·ÐµÐ»ÐµÐ½ÑÐ¹","#fd02ff":"Ð Ð¾Ð·Ð¾Ð²ÑÐ¹","#b11bb3":"Ð¤Ð¸Ð¾Ð»ÐµÑÐ¾Ð²Ð¾-Ð±Ð°ÐºÐ»Ð°Ð¶Ð°Ð½Ð½ÑÐ¹","#e3b5e6":"Ð¡Ð²ÐµÑÐ»Ð¾-ÑÐ¾Ð·Ð¾Ð²ÑÐ¹"}},function(e,t,i){var n=i(2),o=i(13);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);n(o,{insert:"head",singleton:!1}),e.exports=o.locals||{}},function(e,t,i){}])}).call(this,i(0))},function(e,t,i){"use strict";i.r(t),function(e){var t=i(18);e(".js-pagination").each((function(i,n){new t.a(e(n))}))}.call(this,i(0))},function(e,t,i){(function(n,o){var s;!function(n,r){void 0===r&&u("Pagination requires jQuery.");var a="pagination",l="__pagination-";r.fn.pagination&&(a="pagination2"),r.fn[a]=function(e){if(void 0===e)return this;var t=r(this),i=r.extend({},r.fn[a].defaults,e),o={initialize:function(){var e=this;if(t.data("pagination")||t.data("pagination",{}),!1!==e.callHook("beforeInit")){t.data("pagination").initialized&&r(".paginationjs",t).remove(),e.disabled=!!i.disabled;var n=e.model={pageRange:i.pageRange,pageSize:i.pageSize};e.parseDataSource(i.dataSource,(function(o){e.isAsync=c.isString(o),c.isArray(o)&&(n.totalNumber=i.totalNumber=o.length),e.isDynamicTotalNumber=e.isAsync&&i.totalNumberLocator;var s=e.render(!0);i.className&&s.addClass(i.className),n.el=s,t["bottom"===i.position?"append":"prepend"](s),e.observer(),t.data("pagination").initialized=!0,e.callHook("afterInit",s)}))}},render:function(e){var t=this.model,n=t.el||r('<div class="paginationjs"></div>'),o=!0!==e;this.callHook("beforeRender",o);var s=t.pageNumber||i.pageNumber,a=i.pageRange||0,l=this.getTotalPage(),c=s-a,u=s+a;return u>l&&(u=l,c=(c=l-2*a)<1?1:c),c<=1&&(c=1,u=Math.min(2*a+1,l)),n.html(this.generateHTML({currentPage:s,pageRange:a,rangeStart:c,rangeEnd:u})),i.hideWhenLessThanOnePage&&n[l<=1?"hide":"show"](),this.callHook("afterRender",o),n},generatePageNumbersHTML:function(e){var t,n=e.currentPage,o=this.getTotalPage(),s=e.rangeStart,r=e.rangeEnd,a="",l=i.pageLink,c=i.ellipsisText,u=i.classPrefix,d=i.activeClassName,p=i.disableClassName;if(null===i.pageRange){for(t=1;t<=o;t++)a+=t==n?'<li class="'+u+"-page J-paginationjs-page "+d+'" data-num="'+t+'"><a>'+t+"</a></li>":'<li class="'+u+'-page J-paginationjs-page" data-num="'+t+'"><a href="'+l+'">'+t+"</a></li>";return a}if(s<=3)for(t=1;t<s;t++)a+=t==n?'<li class="'+u+"-page J-paginationjs-page "+d+'" data-num="'+t+'"><a>'+t+"</a></li>":'<li class="'+u+'-page J-paginationjs-page" data-num="'+t+'"><a href="'+l+'">'+t+"</a></li>";else i.showFirstOnEllipsisShow&&(a+='<li class="'+u+"-page "+u+'-first J-paginationjs-page" data-num="1"><a href="'+l+'">1</a></li>'),a+='<li class="'+u+"-ellipsis "+p+'"><a>'+c+"</a></li>";for(t=s;t<=r;t++)a+=t==n?'<li class="'+u+"-page J-paginationjs-page "+d+'" data-num="'+t+'"><a>'+t+"</a></li>":'<li class="'+u+'-page J-paginationjs-page" data-num="'+t+'"><a href="'+l+'">'+t+"</a></li>";if(r>=o-2)for(t=r+1;t<=o;t++)a+='<li class="'+u+'-page J-paginationjs-page" data-num="'+t+'"><a href="'+l+'">'+t+"</a></li>";else a+='<li class="'+u+"-ellipsis "+p+'"><a>'+c+"</a></li>",i.showLastOnEllipsisShow&&(a+='<li class="'+u+"-page "+u+'-last J-paginationjs-page" data-num="'+o+'"><a href="'+l+'">'+o+"</a></li>");return a},generateHTML:function(e){var t=e.currentPage,n=this.getTotalPage(),o=this.getTotalNumber(),s=i.showPrevious,a=i.showNext,l=i.showPageNumbers,c=i.showNavigator,u=i.showGoInput,d=i.showGoButton,p=i.pageLink,h=i.prevText,f=i.nextText,m=i.goButtonText,g=i.classPrefix,v=i.disableClassName,y=i.ulClassName,b="",k='<input type="text" class="J-paginationjs-go-pagenumber">',w='<input type="button" class="J-paginationjs-go-button" value="'+m+'">',x=r.isFunction(i.formatNavigator)?i.formatNavigator(t,n,o):i.formatNavigator,T=r.isFunction(i.formatGoInput)?i.formatGoInput(k,t,n,o):i.formatGoInput,S=r.isFunction(i.formatGoButton)?i.formatGoButton(w,t,n,o):i.formatGoButton,C=r.isFunction(i.autoHidePrevious)?i.autoHidePrevious():i.autoHidePrevious,D=r.isFunction(i.autoHideNext)?i.autoHideNext():i.autoHideNext,_=r.isFunction(i.header)?i.header(t,n,o):i.header,$=r.isFunction(i.footer)?i.footer(t,n,o):i.footer;return _&&(b+=this.replaceVariables(_,{currentPage:t,totalPage:n,totalNumber:o})),(s||l||a)&&(b+='<div class="paginationjs-pages">',b+=y?'<ul class="'+y+'">':"<ul>",s&&(t<=1?C||(b+='<li class="'+g+"-prev "+v+'"><a>'+h+"</a></li>"):b+='<li class="'+g+'-prev J-paginationjs-previous" data-num="'+(t-1)+'" title="Previous page"><a href="'+p+'">'+h+"</a></li>"),l&&(b+=this.generatePageNumbersHTML(e)),a&&(t>=n?D||(b+='<li class="'+g+"-next "+v+'"><a>'+f+"</a></li>"):b+='<li class="'+g+'-next J-paginationjs-next" data-num="'+(t+1)+'" title="Next page"><a href="'+p+'">'+f+"</a></li>"),b+="</ul></div>"),c&&x&&(b+='<div class="'+g+'-nav J-paginationjs-nav">'+this.replaceVariables(x,{currentPage:t,totalPage:n,totalNumber:o})+"</div>"),u&&T&&(b+='<div class="'+g+'-go-input">'+this.replaceVariables(T,{currentPage:t,totalPage:n,totalNumber:o,input:k})+"</div>"),d&&S&&(b+='<div class="'+g+'-go-button">'+this.replaceVariables(S,{currentPage:t,totalPage:n,totalNumber:o,button:w})+"</div>"),$&&(b+=this.replaceVariables($,{currentPage:t,totalPage:n,totalNumber:o})),b},findTotalNumberFromRemoteResponse:function(e){this.model.totalNumber=i.totalNumberLocator(e)},go:function(e,n){var o=this,s=o.model;if(!o.disabled){var a=e;if((a=parseInt(a))&&!(a<1)){var l=i.pageSize,u=o.getTotalNumber(),d=o.getTotalPage();if(!(u>0&&a>d))if(o.isAsync){var p={},h=i.alias||{};p[h.pageSize?h.pageSize:"pageSize"]=l,p[h.pageNumber?h.pageNumber:"pageNumber"]=a;var f=r.isFunction(i.ajax)?i.ajax():i.ajax,m={type:"get",cache:!1,data:{},contentType:"application/x-www-form-urlencoded; charset=UTF-8",dataType:"json",async:!0};r.extend(!0,m,f),r.extend(m.data,p),m.url=i.dataSource,m.success=function(e){o.isDynamicTotalNumber?o.findTotalNumberFromRemoteResponse(e):o.model.totalNumber=i.totalNumber,g(o.filterDataByLocator(e))},m.error=function(e,t,n){i.formatAjaxError&&i.formatAjaxError(e,t,n),o.enable()},o.disable(),r.ajax(m)}else g(o.getDataFragment(a))}}function g(e){if(!1===o.callHook("beforePaging",a))return!1;if(s.direction=void 0===s.pageNumber?0:a>s.pageNumber?1:-1,s.pageNumber=a,o.render(),o.disabled&&o.isAsync&&o.enable(),t.data("pagination").model=s,i.formatResult){var l=r.extend(!0,[],e);c.isArray(e=i.formatResult(l))||(e=l)}t.data("pagination").currentPageData=e,o.doCallback(e,n),o.callHook("afterPaging",a),1==a&&o.callHook("afterIsFirstPage"),a==o.getTotalPage()&&o.callHook("afterIsLastPage")}},doCallback:function(e,t){var n=this.model;r.isFunction(t)?t(e,n):r.isFunction(i.callback)&&i.callback(e,n)},destroy:function(){!1!==this.callHook("beforeDestroy")&&(this.model.el.remove(),t.off(),r("#paginationjs-style").remove(),this.callHook("afterDestroy"))},previous:function(e){this.go(this.model.pageNumber-1,e)},next:function(e){this.go(this.model.pageNumber+1,e)},disable:function(){var e=this.isAsync?"async":"sync";!1!==this.callHook("beforeDisable",e)&&(this.disabled=!0,this.model.disabled=!0,this.callHook("afterDisable",e))},enable:function(){var e=this.isAsync?"async":"sync";!1!==this.callHook("beforeEnable",e)&&(this.disabled=!1,this.model.disabled=!1,this.callHook("afterEnable",e))},refresh:function(e){this.go(this.model.pageNumber,e)},show:function(){this.model.el.is(":visible")||this.model.el.show()},hide:function(){this.model.el.is(":visible")&&this.model.el.hide()},replaceVariables:function(e,t){var i;for(var n in t){var o=t[n],s=new RegExp("<%=\\s*"+n+"\\s*%>","img");i=(i||e).replace(s,o)}return i},getDataFragment:function(e){var t=i.pageSize,n=i.dataSource,o=this.getTotalNumber(),s=t*(e-1)+1,r=Math.min(e*t,o);return n.slice(s-1,r)},getTotalNumber:function(){return this.model.totalNumber||i.totalNumber||0},getTotalPage:function(){return Math.ceil(this.getTotalNumber()/i.pageSize)},getLocator:function(e){var t;return"string"==typeof e?t=e:r.isFunction(e)?t=e():u('"locator" is incorrect. (String | Function)'),t},filterDataByLocator:function(e){var t,n=this.getLocator(i.locator);if(c.isObject(e)){try{r.each(n.split("."),(function(i,n){t=(t||e)[n]}))}catch(e){}t?c.isArray(t)||u("dataSource."+n+" must be an Array."):u("dataSource."+n+" is undefined.")}return t||e},parseDataSource:function(e,t){var n=this;c.isObject(e)?t(i.dataSource=n.filterDataByLocator(e)):c.isArray(e)?t(i.dataSource=e):r.isFunction(e)?i.dataSource((function(e){c.isArray(e)||u('The parameter of "done" Function should be an Array.'),n.parseDataSource.call(n,e,t)})):"string"==typeof e?(/^https?|file:/.test(e)&&(i.ajaxDataType="jsonp"),t(e)):u('Unexpected type of "dataSource".')},callHook:function(e){var o,s=t.data("pagination"),a=Array.prototype.slice.apply(arguments);return a.shift(),i[e]&&r.isFunction(i[e])&&!1===i[e].apply(n,a)&&(o=!1),s.hooks&&s.hooks[e]&&r.each(s.hooks[e],(function(e,t){!1===t.apply(n,a)&&(o=!1)})),!1!==o},observer:function(){var e=this,n=e.model.el;t.on(l+"go",(function(t,i,n){(i=parseInt(r.trim(i)))&&(r.isNumeric(i)||u('"pageNumber" is incorrect. (Number)'),e.go(i,n))})),n.delegate(".J-paginationjs-page","click",(function(t){var n=r(t.currentTarget),o=r.trim(n.attr("data-num"));if(o&&!n.hasClass(i.disableClassName)&&!n.hasClass(i.activeClassName))return!1!==e.callHook("beforePageOnClick",t,o)&&(e.go(o),e.callHook("afterPageOnClick",t,o),!!i.pageLink&&void 0)})),n.delegate(".J-paginationjs-previous","click",(function(t){var n=r(t.currentTarget),o=r.trim(n.attr("data-num"));if(o&&!n.hasClass(i.disableClassName))return!1!==e.callHook("beforePreviousOnClick",t,o)&&(e.go(o),e.callHook("afterPreviousOnClick",t,o),!!i.pageLink&&void 0)})),n.delegate(".J-paginationjs-next","click",(function(t){var n=r(t.currentTarget),o=r.trim(n.attr("data-num"));if(o&&!n.hasClass(i.disableClassName))return!1!==e.callHook("beforeNextOnClick",t,o)&&(e.go(o),e.callHook("afterNextOnClick",t,o),!!i.pageLink&&void 0)})),n.delegate(".J-paginationjs-go-button","click",(function(i){var o=r(".J-paginationjs-go-pagenumber",n).val();if(!1===e.callHook("beforeGoButtonOnClick",i,o))return!1;t.trigger(l+"go",o),e.callHook("afterGoButtonOnClick",i,o)})),n.delegate(".J-paginationjs-go-pagenumber","keyup",(function(i){if(13===i.which){var o=r(i.currentTarget).val();if(!1===e.callHook("beforeGoInputOnEnter",i,o))return!1;t.trigger(l+"go",o),r(".J-paginationjs-go-pagenumber",n).focus(),e.callHook("afterGoInputOnEnter",i,o)}})),t.on(l+"previous",(function(t,i){e.previous(i)})),t.on(l+"next",(function(t,i){e.next(i)})),t.on(l+"disable",(function(){e.disable()})),t.on(l+"enable",(function(){e.enable()})),t.on(l+"refresh",(function(t,i){e.refresh(i)})),t.on(l+"show",(function(){e.show()})),t.on(l+"hide",(function(){e.hide()})),t.on(l+"destroy",(function(){e.destroy()}));var o=Math.max(e.getTotalPage(),1),s=i.pageNumber;e.isDynamicTotalNumber&&(s=1),i.triggerPagingOnInit&&t.trigger(l+"go",Math.min(s,o))}};if(t.data("pagination")&&!0===t.data("pagination").initialized){if(r.isNumeric(e))return t.trigger.call(this,l+"go",e,arguments[1]),this;if("string"==typeof e){var s=Array.prototype.slice.apply(arguments);switch(s[0]=l+s[0],e){case"previous":case"next":case"go":case"disable":case"enable":case"refresh":case"show":case"hide":case"destroy":t.trigger.apply(this,s);break;case"getSelectedPageNum":return t.data("pagination").model?t.data("pagination").model.pageNumber:t.data("pagination").attributes.pageNumber;case"getTotalPage":return Math.ceil(t.data("pagination").model.totalNumber/t.data("pagination").model.pageSize);case"getSelectedPageData":return t.data("pagination").currentPageData;case"isDisabled":return!0===t.data("pagination").model.disabled;default:u("Unknown action: "+e)}return this}p(t)}else c.isObject(e)||u("Illegal options");return d(i),o.initialize(),this},r.fn[a].defaults={totalNumber:0,pageNumber:1,pageSize:10,pageRange:2,showPrevious:!0,showNext:!0,showPageNumbers:!0,showNavigator:!1,showGoInput:!1,showGoButton:!1,pageLink:"",prevText:"&laquo;",nextText:"&raquo;",ellipsisText:"...",goButtonText:"Go",classPrefix:"paginationjs",activeClassName:"active",disableClassName:"disabled",inlineStyle:!0,formatNavigator:"<%= currentPage %> / <%= totalPage %>",formatGoInput:"<%= input %>",formatGoButton:"<%= button %>",position:"bottom",autoHidePrevious:!1,autoHideNext:!1,triggerPagingOnInit:!0,hideWhenLessThanOnePage:!1,showFirstOnEllipsisShow:!0,showLastOnEllipsisShow:!0,callback:function(){}},r.fn.addHook=function(e,t){arguments.length<2&&u("Missing argument."),r.isFunction(t)||u("callback must be a function.");var i=r(this),n=i.data("pagination");n||(i.data("pagination",{}),n=i.data("pagination")),!n.hooks&&(n.hooks={}),n.hooks[e]=n.hooks[e]||[],n.hooks[e].push(t)},r[a]=function(e,t){var i;if(arguments.length<2&&u("Requires two parameters."),(i="string"!=typeof e&&e instanceof o?e:r(e)).length)return i.pagination(t),i};var c={};function u(e){throw new Error("Pagination: "+e)}function d(e){e.dataSource||u('"dataSource" is required.'),"string"==typeof e.dataSource?void 0===e.totalNumberLocator?void 0===e.totalNumber?u('"totalNumber" is required.'):r.isNumeric(e.totalNumber)||u('"totalNumber" is incorrect. (Number)'):r.isFunction(e.totalNumberLocator)||u('"totalNumberLocator" should be a Function.'):c.isObject(e.dataSource)&&(void 0===e.locator?u('"dataSource" is an Object, please specify "locator".'):"string"==typeof e.locator||r.isFunction(e.locator)||u(e.locator+" is incorrect. (String | Function)")),void 0===e.formatResult||r.isFunction(e.formatResult)||u('"formatResult" should be a Function.')}function p(e){r.each(["go","previous","next","disable","enable","refresh","show","hide","destroy"],(function(t,i){e.off(l+i)})),e.data("pagination",{}),r(".paginationjs",e).remove()}r.each(["Object","Array","String"],(function(e,t){c["is"+t]=function(e){return function(e,t){return("object"==(t=typeof e)?null==e?"null":Object.prototype.toString.call(e).slice(8,-1):t).toLowerCase()}(e)===t.toLowerCase()}})),void 0===(s=function(){return r}.call(t,i,t,e))||(e.exports=s)}(this,n)}).call(this,i(0),i(0))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(28);document.querySelectorAll(".js-checkbox-list").forEach((function(e){new n.CheckboxList(e)}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CheckboxList=void 0;var n=function(){function e(e){this.accordion=e,this.elements=this.findElement(),this.bindEventListeners()}return e.prototype.findElement=function(){return[this.accordion.querySelector(".js-checkbox-list__wrapper"),this.accordion.querySelector(".js-checkbox-list__icon")]},e.prototype.bindEventListeners=function(){this.handleAccordionClick=this.handleAccordionClick.bind(this),this.accordion.addEventListener("click",this.handleAccordionClick)},e.prototype.handleAccordionClick=function(){"block"===this.elements[0].style.display?(this.elements[0].style.display="none",this.elements[1].classList.toggle("checkbox-list__icon_rotate")):(this.elements[0].style.display="block",this.elements[1].classList.toggle("checkbox-list__icon_rotate"))},e}();t.CheckboxList=n},,,,,,,,,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i(7),i(21),i(23),i(25),i(27),i(2),i(39),i(8),i(10)},function(e,t,i){var n=i(40);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};i(1)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,i){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvbWFpbi5zY3NzP2E5ODMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2NhbGVuZGFyL0NhbGVuZGFyLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJzL2RhdGVwaWNrZXIvRGF0ZXBpY2tlckFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9kcm9wZG93bi1jb250cm9sL0Ryb3Bkb3duQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2Ryb3Bkb3duL0Ryb3Bkb3duLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvZHJvcGRvd24vZHJvcGRvd24taW5pdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2J1cmdlci9idXJnZXItaW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL2J1cmdlci9CdXJnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9jYWxlbmRhci9jYWxlbmRhci1pbml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXItZGF0ZXBpY2tlci9zcmMvanMvYWlyLWRhdGVwaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL3NyYy9qcy9kYXRlcGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXItZGF0ZXBpY2tlci9zcmMvanMvYm9keS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyLWRhdGVwaWNrZXIvc3JjL2pzL25hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fpci1kYXRlcGlja2VyL3NyYy9qcy90aW1lcGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9saWJzL3BhZ2luYXRpb24vUGFnaW5hdGlvbkFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9wYWdpbmF0aW9uL1BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvcmFuZ2Utc2xpZGVyL1NsaWRlckFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9yYW5nZS1zbGlkZXIvUmFuZ2VTbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYnMvc2xpY2svU2xpY2tBZGFwdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3Mvc2xpY2svU2xpY2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2Nrcy9zbGljay9zbGljay1pbml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbGljay1jYXJvdXNlbC9zbGljay9zbGljay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL3JhbmdlLXNsaWRlci9yYW5nZS1zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbG9yLXJhbmdlLXNsaWRlci9kaXN0L3NsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2tzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi1pbml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYWdpbmF0aW9uanMvZGlzdC9wYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvY2hlY2tib3gtbGlzdC9jaGVja2JveC1saXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9ibG9ja3MvY2hlY2tib3gtbGlzdC9DaGVja2JveExpc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL3Jvb20tc2VhcmNoL3Jvb20tc2VhcmNoLnRzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9yb29tLXNlYXJjaC9yb29tLXNlYXJjaC5zY3NzP2M1NTIiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwic2xpY2UiLCJmbGF0IiwiYXJyYXkiLCJjb25jYXQiLCJhcHBseSIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJpc0FycmF5TGlrZSIsImxlbmd0aCIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiZWxlbSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJpdGVyYXRvciIsInNwbGl0IiwiX2kiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJ0ZXN0Q29udGV4dCIsInNjb3BlIiwidG9TZWxlY3RvciIsImpvaW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJrZXlzIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInNlbGYiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsImhhcyIsInRhcmdldHMiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJlcnIiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsIml0ZW0iLCJkb21TdHlsZSIsInJlZnMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImZvckVhY2giLCJ1cGRhdGUiLCJ0cmFuc2Zvcm0iLCJkZWZhdWx0Iiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsInVwZGF0ZUxpbmsiLCJhcHBseVRvVGFnIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJzdHlsZVNoZWV0IiwiY3NzTm9kZSIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJzdHJpbmdpZnkiLCJibG9iIiwib2xkU3JjIiwibG9jYWxzIiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIkNhbGVuZGFyIiwiZWxlbWVudCIsImFkYXB0ZXIiLCJEYXRlcGlja2VyQWRhcHRlciIsImRhdGVGcm9tIiwiZGF0ZVRvIiwiZGF0ZXBpY2tlciIsImNsZWFyQnV0dG9uIiwicmFuZ2UiLCJtdWx0aXBsZURhdGVzU2VwYXJhdG9yIiwicHJldkh0bWwiLCJuZXh0SHRtbCIsIm5hdlRpdGxlcyIsImRheXMiLCJvblNlbGVjdCIsImNhbGVuZGFyIiwiY2FsZW5kYXJFbCIsIiRkYXRlcGlja2VyIiwiYWRkQnV0dG9uIiwiYXBwbHlCdXR0b24iLCJzZWxlY3RlZERhdGVzIiwiRHJvcGRvd25Db250cm9sIiwiaXRlbXMiLCJoYW5kbGVyc0JpbmQiLCJjaGVja1ZhbHVlIiwiTnVtYmVyIiwibWluIiwicGx1c0FsbCIsInBsdXMiLCJwbHVzQnV0dG9uIiwibWludXNBbGwiLCJtaW51cyIsIm1pbnVzQnV0dG9uIiwiaGFuZGxlckJ1dHRvblBsdXNDbGljayIsImhhbmRsZXJCdXR0b25NaW51c0NsaWNrIiwidXBWYWx1ZSIsImlzWmVybyIsInVwZGF0ZVZhbHVlIiwiZGVhY3RpdmF0ZU1pbnVzIiwiYWN0aXZhdGVNaW51cyIsImRlYWN0aXZhdGVQbHVzIiwiYWN0aXZhdGVQbHVzIiwiY2xhc3NMaXN0IiwiRHJvcGRvd24iLCJkcm9wZG93biIsImZpbmRFbGVtZW50IiwiZGVmYXVsdFN1bSIsImNvbnRyb2xzIiwibWVudSIsInRpdGxlIiwiaXNHdWVzdHMiLCJkZWZhdWx0VGl0bGUiLCJkYXRhc2V0IiwiYnV0dG9uQ2xlYXIiLCJidXR0b25Vc2UiLCJoYW5kbGVyTWVudUNsaWNrIiwiaGFuZGxlckRvY3VtZW50Q2xpY2siLCJoYW5kbGVyVXNlQnV0dG9uQ2xpY2siLCJoYW5kbGVyQnV0dG9uQ2xlYXJDbGljayIsImNsb3NlRHJvcGRvd24iLCJzdW1HdWVzdHMiLCJ1cGRhdGVUaXRsZSIsImNoZWNrQWR1bHRCdXR0b25Vc2UiLCJpc01pbiIsImluY2x1ZGVzIiwiaGlkZGVuQ2xlYXJCdXR0b24iLCJ2aXNpYmxlQ2xlYXJCdXR0b24iLCJoaWRkZW5CdXR0b25Vc2UiLCJ2aXNpYmxlQnV0dG9uVXNlIiwic3VtQWR1bHQiLCJzdW1CYWJpZXMiLCJudW1iZXIiLCJmb3JtIiwibjEiLCJhYnMiLCJpc051bVJhbmdlIiwiRGVmYXVsdFN1bSIsIkFsbElucHV0IiwidXBkYXRlRHJvcGRvd25HdWVzdHMiLCJ1cGRhdGVEcm9wZG93blJvb20iLCJnZXRWYWx1ZSIsImFkdWx0cyIsImJhYmllcyIsImNoZWNrQnV0dG9uQ2xlYXIiLCJjaGVja0J1dHRvblVzZSIsIm1lc3NhZ2VHdWVzdHMiLCJmb3JtRGVjbGVuc2lvbiIsIm1lc3NhZ2VOZXdib3JucyIsImd1ZXN0WmVybyIsImlzQWR1bHRaZXJvIiwiQmVkcm9vbSIsIkJlZCIsIkJhdGhyb29tIiwic3VtIiwibWVzc2FnZUJlZHJvb20iLCJtZXNzYWdlQmVkIiwibWVzc2FnZUJhdGhyb29tIiwiQnVyZ2VyXzEiLCJidXJnZXIiLCJCdXJnZXIiLCJoZWFkZXIiLCJiaW5kRXZlbnRMaXN0ZW5lcnMiLCJoYW5kbGVCdXR0b25DbGljayIsIiRib2R5IiwiJGRhdGVwaWNrZXJzQ29udGFpbmVyIiwiY29udGFpbmVyQnVpbHQiLCJkZWZhdWx0cyIsImhvdEtleXMiLCJEYXRlcGlja2VyIiwiaW5saW5lIiwibGFuZ3VhZ2UiLCJzdGFydERhdGUiLCJmaXJzdERheSIsIndlZWtlbmRzIiwiZGF0ZUZvcm1hdCIsImFsdEZpZWxkIiwiYWx0RmllbGREYXRlRm9ybWF0IiwidG9nZ2xlU2VsZWN0ZWQiLCJrZXlib2FyZE5hdiIsIm1pblZpZXciLCJzaG93T3RoZXJNb250aHMiLCJzZWxlY3RPdGhlck1vbnRocyIsIm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QiLCJzaG93T3RoZXJZZWFycyIsInNlbGVjdE90aGVyWWVhcnMiLCJtb3ZlVG9PdGhlclllYXJzT25TZWxlY3QiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZSIsIm11bHRpcGxlRGF0ZXMiLCJ0b2RheUJ1dHRvbiIsInNob3dFdmVudCIsImF1dG9DbG9zZSIsIm1vbnRoc0ZpZWxkIiwibW9udGhzIiwieWVhcnMiLCJ0aW1lcGlja2VyIiwib25seVRpbWVwaWNrZXIiLCJkYXRlVGltZVNlcGFyYXRvciIsInRpbWVGb3JtYXQiLCJtaW5Ib3VycyIsIm1heEhvdXJzIiwibWluTWludXRlcyIsIm1heE1pbnV0ZXMiLCJob3Vyc1N0ZXAiLCJtaW51dGVzU3RlcCIsIm9uU2hvdyIsIm9uSGlkZSIsIm9uQ2hhbmdlTW9udGgiLCJvbkNoYW5nZVllYXIiLCJvbkNoYW5nZURlY2FkZSIsIm9uQ2hhbmdlVmlldyIsIm9uUmVuZGVyQ2VsbCIsIiRlbCIsImVsSXNJbnB1dCIsIiRhbHRGaWVsZCIsImluaXRlZCIsInNpbGVudCIsImN1cnJlbnREYXRlIiwiY3VycmVudFZpZXciLCJfY3JlYXRlU2hvcnRDdXRzIiwidmlld3MiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwiX3ByZXZPblNlbGVjdFZhbHVlIiwiVkVSU0lPTiIsInZpZXdJbmRleGVzIiwiX2J1aWxkRGF0ZXBpY2tlcnNDb250YWluZXIiLCJfYnVpbGRCYXNlSHRtbCIsIl9kZWZpbmVMb2NhbGUiLCJfc3luY1dpdGhNaW5NYXhEYXRlcyIsIl9zZXRQb3NpdGlvbkNsYXNzZXMiLCJfYmluZEV2ZW50cyIsIl9iaW5kS2V5Ym9hcmRFdmVudHMiLCJfb25Nb3VzZURvd25EYXRlcGlja2VyIiwiX29uTW91c2VVcERhdGVwaWNrZXIiLCJUaW1lcGlja2VyIiwiX2JpbmRUaW1lcGlja2VyRXZlbnRzIiwiQm9keSIsIm5hdiIsIk5hdmlnYXRpb24iLCJfb25DbGlja0NlbGwiLCJfb25Nb3VzZUVudGVyQ2VsbCIsIl9vbk1vdXNlTGVhdmVDZWxsIiwiX29uU2hvd0V2ZW50IiwiX29uTW91c2VVcEVsIiwiX29uQmx1ciIsIl9vbktleVVwR2VuZXJhbCIsIl9vblJlc2l6ZSIsIl9vbk1vdXNlVXBCb2R5IiwiX29uS2V5RG93biIsIl9vbktleVVwIiwiX29uSG90S2V5IiwiX29uVGltZUNoYW5nZSIsImlzV2Vla2VuZCIsImRheSIsImxvYyIsInJ1IiwiYm91bmRhcnkiLCJfZ2V0V29yZEJvdW5kYXJ5UmVnRXhwIiwiYW1wbSIsIiRhcHBlbmRUYXJnZXQiLCIkaW5saW5lIiwiJGNvbnRlbnQiLCIkbmF2IiwiX3RyaWdnZXJPbkNoYW5nZSIsImZvcm1hdHRlZERhdGVzIiwicGFyc2VkU2VsZWN0ZWQiLCJnZXRQYXJzZWREYXRlIiwiX3RoaXMiLCJkYXRlcyIsInllYXIiLCJtb250aCIsImRhdGUiLCJob3VycyIsIm1pbnV0ZXMiLCJmb3JtYXREYXRlIiwicGFyc2VkRGF0ZSIsImN1ckRlY2FkZSIsInZhbGlkSG91cnMiLCJsb2NhbGUiLCJsZWFkaW5nWmVybyIsImdldExlYWRpbmdaZXJvTnVtIiwiZGVjYWRlIiwiZ2V0RGVjYWRlIiwiZnVsbEhvdXJzIiwiZGF5UGVyaW9kIiwicmVwbGFjZXIiLCJfcmVwbGFjZXIiLCJfZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlIiwiZ2V0VGltZSIsImZ1bGxEYXRlIiwiZGF5c1Nob3J0IiwiZnVsbE1vbnRoIiwibW9udGhzU2hvcnQiLCJmdWxsTWludXRlcyIsInN0ciIsInJlZyIsInAxIiwicDIiLCJwMyIsInNpZ24iLCJzeW1ib2xzIiwic2VsZWN0RGF0ZSIsIm5ld0RhdGUiLCJsYXN0U2VsZWN0ZWREYXRlIiwiX3NldFRpbWUiLCJfdHJpZ2dlciIsInNldEhvdXJzIiwic2V0TWludXRlcyIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJfcmVuZGVyIiwiX2lzU2VsZWN0ZWQiLCJiaWdnZXIiLCJfc2V0SW5wdXRWYWx1ZSIsInRpbWVwaWNrZXJJc0FjdGl2ZSIsInJlbW92ZURhdGUiLCJzb21lIiwiY3VyRGF0ZSIsImlzU2FtZSIsInRvZGF5IiwiY2xlYXIiLCJfYWRkQnV0dG9uc0lmTmVlZCIsInNldFBvc2l0aW9uIiwiX2hhbmRsZURhdGUiLCJfdXBkYXRlUmFuZ2VzIiwiX3VwZGF0ZUN1cnJlbnRUaW1lIiwiY3VyVGltZSIsIm1pblRpbWUiLCJtYXhUaW1lIiwiY2hlY2tEYXRlIiwiY2VsbFR5cGUiLCJyZXMiLCJhbHRWYWx1ZXMiLCJmb3JtYXQiLCJhbHRGb3JtYXQiLCJfaXNJblJhbmdlIiwiZE1pblRpbWUiLCJkTWF4VGltZSIsIl9nZXREaW1lbnNpb25zIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiX2dldERhdGVGcm9tQ2VsbCIsImNlbGwiLCJtYWluIiwiZGltcyIsInNlbGZEaW1zIiwic2Vjb25kYXJ5IiwiX2JpbmRWaXNpb25FdmVudHMiLCJmb2N1c2VkIiwiaW5Gb2N1cyIsImRvd24iLCJfY2hhbmdlVmlldyIsInVwIiwibmV4dFZpZXciLCJ2aWV3SW5kZXgiLCJfaGFuZGxlSG90S2V5IiwiZm9jdXNlZFBhcnNlZCIsInRvdGFsRGF5c0luTmV4dE1vbnRoIiwiX2dldEZvY3VzZWREYXRlIiwibW9udGhDaGFuZ2VkIiwieWVhckNoYW5nZWQiLCJkZWNhZGVDaGFuZ2VkIiwieSIsImdldERheXNDb3VudCIsIl9yZWdpc3RlcktleSIsImN1cktleSIsIl91blJlZ2lzdGVyS2V5IiwiX2lzSG90S2V5UHJlc3NlZCIsImN1cnJlbnRIb3RLZXkiLCJmb3VuZCIsInByZXNzZWRLZXlzIiwiaG90S2V5IiwiZXZlcnkiLCJfZm9jdXNOZXh0Q2VsbCIsIm5kIiwiZ2V0RGF0ZSIsIl9nZXRDZWxsIiwiJGNlbGwiLCJkZXN0cm95IiwiX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzIiwiYWxyZWFkeVNlbGVjdGVkIiwic2VsZWN0ZWREYXRlIiwidGltZXBpY2tlckZvY3VzIiwibGVzcyIsIl91cGRhdGUiLCJoIiwiX2ZvY3VzZWQiLCJwcmV2VmlldyIsInN1YnN0cmluZyIsImdldERheSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImZpcnN0WWVhciIsImZsb29yIiwidGVtcGxhdGUiLCJkYXRlMSIsImRhdGUyIiwiZDEiLCJkMiIsIl90eXBlIiwiZGF0ZUNvbXBhcmVUbyIsInJlc2V0VGltZSIsIkNvbnN0cnVjdG9yIiwiZGF5c01pbiIsInRlbXBsYXRlcyIsImRwIiwiJG5hbWVzIiwiJGNlbGxzIiwiX2dldERheU5hbWVzSHRtbCIsImN1ckRheSIsIl9nZXRDZWxsQ29udGVudHMiLCJyZW5kZXIiLCJfZ2V0RGF5c0h0bWwiLCJ0b3RhbE1vbnRoRGF5cyIsImZpcnN0TW9udGhEYXkiLCJsYXN0TW9udGhEYXkiLCJkYXlzRnJvbVBldk1vbnRoIiwiZGF5c0Zyb21OZXh0TW9udGgiLCJfZ2V0RGF5SHRtbCIsIl9nZXRNb250aHNIdG1sIiwiX2dldE1vbnRoSHRtbCIsIl9nZXRZZWFyc0h0bWwiLCJfZ2V0WWVhckh0bWwiLCJfcmVuZGVyVHlwZXMiLCJkYXlOYW1lcyIsImFjaXR2ZSIsIl9oYW5kbGVDbGljayIsIiRidXR0b25zQ29udGFpbmVyIiwiX29uQ2xpY2tOYXZCdXR0b24iLCJfb25DbGlja05hdlRpdGxlIiwiX2FkZEJ1dHRvbiIsIl9nZXRUaXRsZSIsInNldE5hdlN0YXR1cyIsIl9hZGRCdXR0b25zQ29udGFpbmVyIiwiYWN0aW9uIiwibGFiZWwiLCJfZGlzYWJsZU5hdiIsIl9hY3RpdmF0ZU5hdiIsImluc3QiLCJfYnVpbGRIVE1MIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX29uU2VsZWN0RGF0ZSIsIiRyYW5nZXMiLCJfb25DaGFuZ2VSYW5nZSIsIl9vbk1vdXNlVXBSYW5nZSIsIl9vbk1vdXNlRW50ZXJSYW5nZSIsIl9vbk1vdXNlT3V0UmFuZ2UiLCJfZGF0ZSIsIl9zZXRNaW5UaW1lRnJvbURhdGUiLCJfc2V0TWF4VGltZUZyb21EYXRlIiwiX3NldERlZmF1bHRNaW5NYXhUaW1lIiwiX3ZhbGlkYXRlSG91cnNNaW51dGVzIiwibHoiLCJob3VyTWluIiwiaG91ck1heCIsImhvdXJTdGVwIiwiaG91clZhbHVlIiwiaG91clZpc2libGUiLCJkaXNwbGF5SG91cnMiLCJtaW5NaW4iLCJtaW5NYXgiLCJtaW5TdGVwIiwibWluVmFsdWUiLCJfdGVtcGxhdGUiLCIkdGltZXBpY2tlciIsIiRob3VycyIsIiRtaW51dGVzIiwiJGhvdXJzVGV4dCIsIiRtaW51dGVzVGV4dCIsIiRhbXBtIiwiX2hvdXJzIiwiJHRhcmdldCIsIlBhZ2luYXRpb25BZGFwdGVyIiwiYWN0aXZlQ2xhc3NOYW1lIiwiZGlzYWJsZUNsYXNzTmFtZSIsInVsQ2xhc3NOYW1lIiwicHJldlRleHQiLCJuZXh0VGV4dCIsInBhZ2VSYW5nZSIsImF1dG9IaWRlTmV4dCIsImF1dG9IaWRlUHJldmlvdXMiLCJkYXRhU291cmNlIiwicGFnaW5hdGlvbiIsIlBhZ2luYXRpb24iLCJTbGlkZXJBZGFwdGVyIiwiZnJvbVRvIiwiZnJvbSIsImlzQ29sb3IiLCJpc1NjYWxlIiwiaXNMYWJlbCIsImNvbG9yIiwiZ3JhZGllbnQiLCJncmFkaWVudERlZyIsImNvbG9yU2xpZGVyIiwiUmFuZ2VTbGlkZXIiLCJTbGlja0FkYXB0ZXIiLCJkb3RzIiwid2FpdEZvckFuaW1hdGUiLCJuZXh0QXJyb3ciLCJwcmV2QXJyb3ciLCJzbGljayIsIlNsaWNrIiwiaW5zdGFuY2VVaWQiLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXJyb3dzIiwiYXNOYXZGb3IiLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJzbGlkZXIiLCJkb3RzQ2xhc3MiLCJkcmFnZ2FibGUiLCJlZGdlRnJpY3Rpb24iLCJmYWRlIiwiZm9jdXNPblNlbGVjdCIsImZvY3VzT25DaGFuZ2UiLCJpbmZpbml0ZSIsImluaXRpYWxTbGlkZSIsImxhenlMb2FkIiwibW9iaWxlRmlyc3QiLCJwYXVzZU9uSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uRG90c0hvdmVyIiwicmVzcG9uZFRvIiwicmVzcG9uc2l2ZSIsInJvd3MiLCJydGwiLCJzbGlkZSIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3dpcGUiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbCIsInZlcnRpY2FsU3dpcGluZyIsInpJbmRleCIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiZGlyZWN0aW9uIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzd2lwZUhhbmRsZXIiLCJkcmFnSGFuZGxlciIsImtleUhhbmRsZXIiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJhY3RpdmF0ZUFEQSIsImFkZFNsaWRlIiwic2xpY2tBZGQiLCJtYXJrdXAiLCJhZGRCZWZvcmUiLCJ1bmxvYWQiLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0IiwidGFyZ2V0SGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImFwcGx5VHJhbnNpdGlvbiIsImRpc2FibGVUcmFuc2l0aW9uIiwiZ2V0TmF2VGFyZ2V0Iiwic2xpZGVIYW5kbGVyIiwidHJhbnNpdGlvbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImJ1aWxkRG90cyIsImRvdCIsImdldERvdENvdW50IiwiYnVpbGRPdXQiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsIm5ld1NsaWRlcyIsIm51bU9mU2xpZGVzIiwib3JpZ2luYWxTbGlkZXMiLCJzbGlkZXNQZXJTZWN0aW9uIiwicm93IiwiY2hlY2tSZXNwb25zaXZlIiwiZm9yY2VVcGRhdGUiLCJicmVha3BvaW50IiwidGFyZ2V0QnJlYWtwb2ludCIsInJlc3BvbmRUb1dpZHRoIiwidHJpZ2dlckJyZWFrcG9pbnQiLCJzbGlkZXJXaWR0aCIsImlubmVyV2lkdGgiLCJ1bnNsaWNrIiwicmVmcmVzaCIsImRvbnRBbmltYXRlIiwiaW5kZXhPZmZzZXQiLCJjaGVja05hdmlnYWJsZSIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsImNsZWFuVXBFdmVudHMiLCJpbnRlcnJ1cHQiLCJjbGVhblVwU2xpZGVFdmVudHMiLCJvcmllbnRhdGlvbkNoYW5nZSIsInJlc2l6ZSIsImNsZWFuVXBSb3dzIiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInRhcmdldFNsaWRlIiwiY29lZiIsInZlcnRpY2FsT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiaW5kZXhlcyIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsInN3aXBlZFNsaWRlIiwiY2VudGVyT2Zmc2V0IiwiZ29UbyIsInNsaWNrR29UbyIsImNyZWF0aW9uIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJudW1Eb3RHcm91cHMiLCJ0YWJDb250cm9sSW5kZXhlcyIsInNsaWRlQ29udHJvbEluZGV4IiwiYXJpYUJ1dHRvbkNvbnRyb2wiLCJtYXBwZWRTbGlkZUluZGV4IiwiaW5pdEFycm93RXZlbnRzIiwiaW5pdERvdEV2ZW50cyIsImluaXRTbGlkZUV2ZW50cyIsImluaXRVSSIsInRhZ05hbWUiLCJsb2FkUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJsb2FkSW1hZ2VzIiwiaW1hZ2VzU2NvcGUiLCJpbWFnZVNvdXJjZSIsImltYWdlU3JjU2V0IiwiaW1hZ2VTaXplcyIsImltYWdlVG9Mb2FkIiwicHJldlNsaWRlIiwibmV4dFNsaWRlIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsInNsaWNrTmV4dCIsInBhdXNlIiwic2xpY2tQYXVzZSIsInBsYXkiLCJzbGlja1BsYXkiLCJwb3N0U2xpZGUiLCJzbGlja1ByZXYiLCJ0cnlDb3VudCIsIiRpbWdzVG9Mb2FkIiwiaW5pdGlhbGl6aW5nIiwibGFzdFZpc2libGVJbmRleCIsImN1cnJlbnRCcmVha3BvaW50IiwicmVzcG9uc2l2ZVNldHRpbmdzIiwid2luZG93RGVsYXkiLCJyZW1vdmVTbGlkZSIsInNsaWNrUmVtb3ZlIiwicmVtb3ZlQmVmb3JlIiwicmVtb3ZlQWxsIiwic2V0Q1NTIiwieCIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiYm9keVN0eWxlIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsImFsbFNsaWRlcyIsInJlbWFpbmRlciIsImV2ZW5Db2VmIiwiaW5maW5pdGVDb3VudCIsInRhcmdldEVsZW1lbnQiLCJzeW5jIiwiYW5pbVNsaWRlIiwib2xkU2xpZGUiLCJzbGlkZUxlZnQiLCJuYXZUYXJnZXQiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0IiwieURpc3QiLCJzd2lwZUFuZ2xlIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJwb3NpdGlvbk9mZnNldCIsInZlcnRpY2FsU3dpcGVMZW5ndGgiLCJzcXJ0IiwicG93IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJyZWFrcG9pbnQiLCJFdmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiLCJ1bnN1YnNjcmliZSIsImVtaXQiLCJzdGFuZGFyZE9wdGlvbnMiLCJvcmllbnRhdGlvbiIsImlzUHJlZml4IiwiaXNTY2FsZVByZWZpeCIsInNjYWxlUHJlZml4IiwiaXNUcmFja1ByZWZpeCIsInRyYWNrUHJlZml4IiwiY2hhbmdlQ29sb3IiLCJpc0NoYW5nZUNvbG9yIiwiaXNHcmFkaWVudCIsImlzQ29sb3JPdXQiLCJvbmx5RGl2aXNpb25zIiwiYWxsQ29sb3JzIiwidSIsImYiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsIm5jIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJQcmVzZW50ZXIiLCJnZXRPcHRpb25zIiwiY2hhbmdlIiwic2V0T3B0aW9ucyIsInVwRGF0YVZpZXciLCJlbWl0dGVyIiwibW9kZWwiLCJjcmVhdGVNb2RlbCIsImNyZWF0ZVZpZXciLCJiaW5kU3Vic2NyaWJlIiwidXBEYXRhU2xpZGVyIiwic2V0RGF0YSIsIk1vZGVsIiwiVmlldyIsImdldE5ld0RhdGEiLCJzZW5kTmV3UG9zaXRpb24iLCJhZGRTdWJzY3JpYnRpb25zIiwidXBEYXRhIiwidmFsaWRhdGVGcm9tVG8iLCJ2YWxpZGF0ZU1pbk1heFN0ZXAiLCJjcmVhdGVTbGlkZXIiLCJyb2xsZXJzIiwiY3JlYXRlUm9sbGVycyIsImJhciIsImNyZWF0ZUJhciIsInRyYWNrIiwiY3JlYXRlVHJhY2siLCJjcmVhdGVTY2FsZSIsImdldFNsaWRlclNpemUiLCJnZXRPbmVTdGVwIiwic2l6ZSIsIm9uZVN0ZXAiLCJUcmFjayIsIkJhciIsIlJvbGxlcnMiLCJTY2FsZSIsIm9uVHJhY2tDbGljayIsIm9uU2NhbGVDbGljayIsImFkZEV2ZW50TGlzdGVuZXJzIiwiZHJhZ1N0YXJ0IiwiZ2V0VGFyZ2V0VHlwZSIsImRyYWciLCJjb252ZXJ0UHhUb1ZhbHVlIiwidXBkYXRlUG9zaXRpb24iLCJjb252ZXJ0VmFsdWVUb0NvbG9yIiwiZ2V0U2xpZGVyUG9zaXRpb24iLCJjcmVhdGVUb29sdGlwIiwibW92ZVJvbGxlcnNBdFZhbHVlIiwidG9nZ2xlUm9sbGVycyIsInVwZGF0YUNvbG9yIiwidXBkYXRhT3V0VG9vbHRpcCIsInRvTG9jYWxlU3RyaW5nIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZCIsImNvbnZlcnRWYWx1ZVRvUHgiLCJjb252ZXJ0UHhUb1Byb2NlbnQiLCJib3R0b20iLCJjcmVhdGVPdXRFbGVtZW50Iiwic2V0U3RhcnRFbmRUcmFja091dCIsImFkZFNjYWxlTWFya2VyIiwiY2hlY2tTY2FsZSIsInVwZGF0YVNjYWxlTWFya2VyIiwiZ2V0SW5jcmVtZW50IiwiY3JlYXRlU2NhbGVNYXJrZXIiLCJjb252ZXJ0UHhUb1BlcmNlbnQiLCJIVE1MRWxlbWVudCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInVwZGF0YUJhciIsImdldFJvbGxlclBvc2l0aW9ucyIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiZ2V0TmV3U2xpZGVyUG9zIiwib3JhbmdlIiwicHVycGxlIiwidGhyb3dFcnJvciIsInBsdWdpbk5hbWUiLCJldmVudFByZWZpeCIsImluaXRpYWxpemUiLCJjYWxsSG9vayIsImluaXRpYWxpemVkIiwicGFnZVNpemUiLCJwYXJzZURhdGFTb3VyY2UiLCJpc0FzeW5jIiwiSGVscGVycyIsImlzU3RyaW5nIiwidG90YWxOdW1iZXIiLCJpc0R5bmFtaWNUb3RhbE51bWJlciIsInRvdGFsTnVtYmVyTG9jYXRvciIsIm9ic2VydmVyIiwiaXNCb290IiwiaXNGb3JjZWQiLCJjdXJyZW50UGFnZSIsInBhZ2VOdW1iZXIiLCJ0b3RhbFBhZ2UiLCJnZXRUb3RhbFBhZ2UiLCJnZW5lcmF0ZUhUTUwiLCJoaWRlV2hlbkxlc3NUaGFuT25lUGFnZSIsImdlbmVyYXRlUGFnZU51bWJlcnNIVE1MIiwicGFnZUxpbmsiLCJlbGxpcHNpc1RleHQiLCJjbGFzc1ByZWZpeCIsInNob3dGaXJzdE9uRWxsaXBzaXNTaG93Iiwic2hvd0xhc3RPbkVsbGlwc2lzU2hvdyIsImdldFRvdGFsTnVtYmVyIiwic2hvd1ByZXZpb3VzIiwic2hvd05leHQiLCJzaG93UGFnZU51bWJlcnMiLCJzaG93TmF2aWdhdG9yIiwic2hvd0dvSW5wdXQiLCJzaG93R29CdXR0b24iLCJnb0J1dHRvblRleHQiLCJnb0lucHV0IiwiZ29CdXR0b24iLCJmb3JtYXROYXZpZ2F0b3IiLCJmb3JtYXRHb0lucHV0IiwiZm9ybWF0R29CdXR0b24iLCJmb290ZXIiLCJyZXBsYWNlVmFyaWFibGVzIiwiZmluZFRvdGFsTnVtYmVyRnJvbVJlbW90ZVJlc3BvbnNlIiwiZ28iLCJwb3N0RGF0YSIsImFsaWFzIiwiYWpheFBhcmFtcyIsImZvcm1hdEFqYXhQYXJhbXMiLCJmaWx0ZXJEYXRhQnlMb2NhdG9yIiwidGV4dFN0YXR1cyIsImVycm9yVGhyb3duIiwiZm9ybWF0QWpheEVycm9yIiwiZW5hYmxlIiwiZ2V0RGF0YUZyYWdtZW50IiwiZm9ybWF0UmVzdWx0IiwiY2xvbmVEYXRhIiwiY3VycmVudFBhZ2VEYXRhIiwiZG9DYWxsYmFjayIsImN1c3RvbUNhbGxiYWNrIiwicHJldmlvdXMiLCJ2YXJpYWJsZXMiLCJmb3JtYXR0ZWRTdHJpbmciLCJyZWdleHAiLCJnZXRMb2NhdG9yIiwibG9jYXRvciIsImZpbHRlcmVkRGF0YSIsImlzT2JqZWN0IiwiYWpheERhdGFUeXBlIiwicGFnaW5hdGlvbkRhdGEiLCJ2YWxpZFRvdGFsUGFnZSIsImRlZmF1bHRQYWdlTnVtYmVyIiwidHJpZ2dlclBhZ2luZ09uSW5pdCIsInVuaW5zdGFsbFBsdWdpbiIsInBhcmFtZXRlckNoZWNrZXIiLCJpbmxpbmVTdHlsZSIsImdldE9iamVjdFR5cGUiLCJDaGVja2JveExpc3RfMSIsImFjY29yZGlvbiIsIkNoZWNrYm94TGlzdCIsImhhbmRsZUFjY29yZGlvbkNsaWNrIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9B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U0FBUyxVQUFVLFFBQVEsVUFBVSxpQkFBaUIsVUFBVSxPQUFPLFVBQVUsYUFBYSxVQUFVLFFBQVEsVUFBVSxZQUFZLFVBQVUsWUFBWSxVQUFVLGFBQWEsVUFBVSxZQUFZLFVBQVUsUUFBUSxVQUFVLGlCQUFpQixVQUFVLFdBQVcsVUFBVSxVQUFVLFVBQVUsV0FBVyxVQUFVLFdBQVcsVUFBVSxnQkFBZ0IsVUFBVSxXQUFXLFVBQVUsWUFBWSxVQUFVLFlBQVksVUFBVSxjQUFjLFVBQVUsaUJBQWlCLFVBQVUsYUFBYSxVQUFVLGFBQWEsVUFBVSxVQUFVLFVBQVUsYUFBYSxVQUFVLGVBQWUsVUFBVSxnQkFBZ0IsVUFBVSxhQUFhLFVBQVUsVUFBVSxVQUFVLGdCQUFnQixVQUFVLGdCQUFnQixVQUFVLGFBQWEsVUFBVSxXQUFXLFVBQVUsY0FBYyxVQUFVLFVBQVUsVUFBVSxhQUFhLFVBQVUsWUFBWSxVQUFVLGNBQWMsVUFBVSxjQUFjLFVBQVUsVUFBVSxVQUFVLFlBQVksVUFBVSxhQUFhLFVBQVUsWUFBWSxVQUFVLE9BQU8sVUFBVSxPQUFPLFVBQVUsVUFBVSxVQUFVLGNBQWMsVUFBVSxXQUFXLFVBQVUsVUFBVSxVQUFVLFlBQVksVUFBVSxTQUFTLFVBQVUsUUFBUSxVQUFVLFFBQVEsVUFBVSxnQkFBZ0IsVUFBVSxXQUFXLFVBQVUsWUFBWSxVQUFVLGVBQWUsVUFBVSxZQUFZLFVBQVUsYUFBYSxVQUFVLFlBQVksVUFBVSx1QkFBdUIsVUFBVSxZQUFZLFVBQVUsYUFBYSxVQUFVLFlBQVksVUFBVSxjQUFjLFVBQVUsZ0JBQWdCLFVBQVUsZUFBZSxVQUFVLGlCQUFpQixVQUFVLGlCQUFpQixVQUFVLGNBQWMsVUFBVSxPQUFPLFVBQVUsWUFBWSxVQUFVLFFBQVEsVUFBVSxTQUFTLFVBQVUsbUJBQW1CLFVBQVUsYUFBYSxVQUFVLGVBQWUsVUFBVSxlQUFlLFVBQVUsaUJBQWlCLFVBQVUsa0JBQWtCLFVBQVUsb0JBQW9CLFVBQVUsa0JBQWtCLFVBQVUsa0JBQWtCLFVBQVUsZUFBZSxVQUFVLFlBQVksVUFBVSxZQUFZLFVBQVUsV0FBVyxVQUFVLGNBQWMsVUFBVSxPQUFPLFVBQVUsVUFBVSxVQUFVLFFBQVEsVUFBVSxZQUFZLFVBQVUsU0FBUyxVQUFVLFlBQVksVUFBVSxTQUFTLFVBQVUsZ0JBQWdCLFVBQVUsWUFBWSxVQUFVLGdCQUFnQixVQUFVLGdCQUFnQixVQUFVLGFBQWEsVUFBVSxZQUFZLFVBQVUsT0FBTyxVQUFVLE9BQU8sVUFBVSxPQUFPLFVBQVUsYUFBYSxVQUFVLFNBQVMsVUFBVSxnQkFBZ0IsVUFBVSxVQUFVLFVBQVUsWUFBWSxVQUFVLFlBQVksVUFBVSxjQUFjLFVBQVUsU0FBUyxVQUFVLGFBQWEsVUFBVSxXQUFXLFVBQVUsV0FBVyxVQUFVLFNBQVMsVUFBVSxTQUFTLFVBQVUsVUFBVSxVQUFVLFlBQVksVUFBVSxZQUFZLFVBQVUsT0FBTyxVQUFVLGNBQWMsVUFBVSxZQUFZLFVBQVUsTUFBTSxVQUFVLE9BQU8sVUFBVSxVQUFVLFVBQVUsU0FBUyxVQUFVLFlBQVksVUFBVSxTQUFTLFVBQVUsUUFBUSxVQUFVLFFBQVEsVUFBVSxhQUFhLFVBQVUsU0FBUyxVQUFVLGtCQUFrQixVQUFVLFlBQVksVUFBVSxxQkFBcUIsVUFBVSxhQUFhLFVBQVUsWUFBWSxVQUFVLFVBQVUsVUFBVSxnQkFBZ0IsVUFBVSxrQkFBa0IsVUFBVSxzQkFBc0IsVUFBVSxZQUFZLFVBQVUsaUJBQWlCLFVBQVUsZUFBZSxVQUFVLHNCQUFzQixVQUFVLFVBQVUsVUFBVSxlQUFlLFVBQVUsb0JBQW9CLFVBQVUsWUFBWSxVQUFVLGdCQUFnQixVQUFVLGdCQUFnQixVQUFVLGtCQUFrQixVQUFVLG9CQUFvQixVQUFVLFNBQVMsVUFBVSxtQkFBbUIsVUFBVSxtQkFBbUIsVUFBVSxTQUFTLFVBQVUsbUJBQW1CLFVBQVUsWUFBWSxVQUFVLGNBQWMsVUFBVSxpQkFBaUIsVUFBVSxhQUFhLFVBQVUsZ0JBQWdCLEtBQUssT0FBT2dGLE9BQU8sWUFBWUMsT0FBTyxhQUFhLFVBQVUsY0FBYyxVQUFVLFlBQVksVUFBVSxVQUFVLFVBQVUsZ0JBQWdCLFVBQVUsVUFBVSxVQUFVLHdCQUF3QixVQUFVLG1CQUFtQixTQUFTNTFELEVBQUUxTSxFQUFFSixHQUFHLElBQUlkLEVBQUVjLEVBQUUsR0FBR0wsRUFBRUssRUFBRSxJQUFJLGlCQUFpQkwsRUFBRUEsRUFBRVcsV0FBV1gsRUFBRTJzQyxRQUFRM3NDLEtBQUtBLEVBQUUsQ0FBQyxDQUFDbU4sRUFBRTVOLEVBQUVTLEVBQUUsTUFBeUNULEVBQUVTLEVBQS9CLENBQUM2d0IsT0FBTyxPQUFPcWEsV0FBVSxJQUFXLzlCLEVBQUU5TixRQUFRVyxFQUFFd3VDLFFBQVEsSUFBSSxTQUFTcmhDLEVBQUUxTSxFQUFFSixTLDhDQ0FwNnhCLCtCQUVrQmlxQyxFQUFFLGtCQUVWL2tDLE1BQUssU0FBQ3NYLEVBQUdxeUIsR0FDakIsSUFBSXlhLElBQVdyZixFQUFFNEUsUSxrQ0NMbkIscUJBV0EsU0FBVTN0QyxFQUFRK29DLFFBRUMsSUFBTkEsR0FDVDA0QixFQUFXLCtCQUdiLElBQUlDLEVBQWEsYUFJYkMsRUFBYyxnQkFHZDU0QixFQUFFNWxDLEdBQUdnbEQsYUFDUHVaLEVBQWEsZUFHZjM0QixFQUFFNWxDLEdBQUd1K0QsR0FBYyxTQUFTeDhELEdBRTFCLFFBQXVCLElBQVpBLEVBQ1QsT0FBTzVFLEtBR1QsSUFBSW13QixFQUFZc1ksRUFBRXpvQyxNQUVkaUosRUFBYXcvQixFQUFFOWpDLE9BQU8sR0FBSThqQyxFQUFFNWxDLEdBQUd1K0QsR0FBWXR0QixTQUFVbHZDLEdBRXJEaWpELEVBQWEsQ0FFZnlaLFdBQVksV0FDVixJQUFJOW9ELEVBQU94WSxLQU9YLEdBSkttd0IsRUFBVTFQLEtBQUssZUFDbEIwUCxFQUFVMVAsS0FBSyxhQUFjLEtBR0ssSUFBaENqSSxFQUFLK29ELFNBQVMsY0FBbEIsQ0FHSXB4QyxFQUFVMVAsS0FBSyxjQUFjK2dELGFBQy9CLzRCLEVBQUUsZ0JBQWlCdFksR0FBV3ZVLFNBSWhDcEQsRUFBS3ZOLFdBQWFoQyxFQUFXZ0MsU0FHN0IsSUFBSTh4RCxFQUFRdmtELEVBQUt1a0QsTUFBUSxDQUN2QnRWLFVBQVd4K0MsRUFBV3crQyxVQUN0QmdhLFNBQVV4NEQsRUFBV3c0RCxVQUl2QmpwRCxFQUFLa3BELGdCQUFnQno0RCxFQUFXMitDLFlBQVksU0FBU0EsR0FHbkRwdkMsRUFBS21wRCxRQUFVQyxFQUFRQyxTQUFTamEsR0FDNUJnYSxFQUFReDhELFFBQVF3aUQsS0FDbEJtVixFQUFNK0UsWUFBYzc0RCxFQUFXNjRELFlBQWNsYSxFQUFXNWtELFFBSTFEd1YsRUFBS3VwRCxxQkFBdUJ2cEQsRUFBS21wRCxTQUFXMTRELEVBQVcrNEQsbUJBRXZELElBQUk3MEQsRUFBS3FMLEVBQUs2cUMsUUFBTyxHQUdmcDZDLEVBQVc0RixXQUNmMUIsRUFBR2l1QixTQUFTbnlCLEVBQVc0RixXQUd6Qmt1RCxFQUFNNXZELEdBQUtBLEVBR1hnakIsRUFBa0MsV0FBeEJsbkIsRUFBVzRuQixTQUF3QixTQUFXLFdBQVcxakIsR0FHbkVxTCxFQUFLeXBELFdBR0w5eEMsRUFBVTFQLEtBQUssY0FBYytnRCxhQUFjLEVBRzNDaHBELEVBQUsrb0QsU0FBUyxZQUFhcDBELFFBSS9CazJDLE9BQVEsU0FBUzZlLEdBQ2YsSUFDSW5GLEVBRE8vOEQsS0FDTSs4RCxNQUNiNXZELEVBQUs0dkQsRUFBTTV2RCxJQUFNczdCLEVBQUUsb0NBQ25CMDVCLEdBQXNCLElBQVhELEVBSEpsaUUsS0FLTnVoRSxTQUFTLGVBQWdCWSxHQUU5QixJQUFJQyxFQUFjckYsRUFBTXNGLFlBQWNwNUQsRUFBV281RCxXQUM3QzVhLEVBQVl4K0MsRUFBV3crQyxXQUFhLEVBQ3BDNmEsRUFUT3RpRSxLQVNVdWlFLGVBRWpCdk0sRUFBYW9NLEVBQWMzYSxFQUMzQndPLEVBQVdtTSxFQUFjM2EsRUEyQjdCLE9BekJJd08sRUFBV3FNLElBQ2JyTSxFQUFXcU0sRUFFWHRNLEdBREFBLEVBQWFzTSxFQUF3QixFQUFaN2EsR0FDQyxFQUFJLEVBQUl1TyxHQUdoQ0EsR0FBYyxJQUNoQkEsRUFBYSxFQUNiQyxFQUFXMXdELEtBQUt1cEMsSUFBZ0IsRUFBWjJZLEVBQWdCLEVBQUc2YSxJQUd6Q24xRCxFQUFHdWdCLEtBekJRMXRCLEtBeUJFd2lFLGFBQWEsQ0FDeEJKLFlBQWFBLEVBQ2IzYSxVQUFXQSxFQUNYdU8sV0FBWUEsRUFDWkMsU0FBVUEsS0FJUmh0RCxFQUFXdzVELHlCQUNidDFELEVBQUdtMUQsR0FBYSxFQUFJLE9BQVMsVUFsQ3BCdGlFLEtBcUNOdWhFLFNBQVMsY0FBZVksR0FFdEJoMUQsR0FJVHUxRCx3QkFBeUIsU0FBUzN2RCxHQUNoQyxJQU1JclYsRUFMQTBrRSxFQUFjcnZELEVBQUtxdkQsWUFDbkJFLEVBRk90aUUsS0FFVXVpRSxlQUNqQnZNLEVBQWFqakQsRUFBS2lqRCxXQUNsQkMsRUFBV2xqRCxFQUFLa2pELFNBQ2hCdm9DLEVBQU8sR0FHUGkxQyxFQUFXMTVELEVBQVcwNUQsU0FDdEJDLEVBQWUzNUQsRUFBVzI1RCxhQUUxQkMsRUFBYzU1RCxFQUFXNDVELFlBQ3pCemIsRUFBa0JuK0MsRUFBV20rQyxnQkFDN0JDLEVBQW1CcCtDLEVBQVdvK0MsaUJBR2xDLEdBQTZCLE9BQXpCcCtDLEVBQVd3K0MsVUFBb0IsQ0FDakMsSUFBSy9wRCxFQUFJLEVBQUdBLEdBQUs0a0UsRUFBVzVrRSxJQUV4Qmd3QixHQURFaHdCLEdBQUswa0UsRUFDQyxjQUFnQlMsRUFBYyw2QkFBK0J6YixFQUFrQixlQUFpQjFwRCxFQUFJLFFBQVVBLEVBQUksWUFFbEgsY0FBZ0JtbEUsRUFBYyx3Q0FBMENubEUsRUFBSSxjQUFnQmlsRSxFQUFXLEtBQU9qbEUsRUFBSSxZQUc5SCxPQUFPZ3dCLEVBR1QsR0FBSXNvQyxHQUFjLEVBQ2hCLElBQUt0NEQsRUFBSSxFQUFHQSxFQUFJczRELEVBQVl0NEQsSUFFeEJnd0IsR0FERWh3QixHQUFLMGtFLEVBQ0MsY0FBZ0JTLEVBQWMsNkJBQStCemIsRUFBa0IsZUFBaUIxcEQsRUFBSSxRQUFVQSxFQUFJLFlBRWxILGNBQWdCbWxFLEVBQWMsd0NBQTBDbmxFLEVBQUksY0FBZ0JpbEUsRUFBVyxLQUFPamxFLEVBQUksaUJBSTFIdUwsRUFBVzY1RCwwQkFDYnAxQyxHQUFRLGNBQWdCbTFDLEVBQWMsU0FBV0EsRUFBYyxxREFBdURGLEVBQVcsZ0JBRW5JajFDLEdBQVEsY0FBZ0JtMUMsRUFBYyxhQUFleGIsRUFBbUIsUUFBVXViLEVBQWUsWUFHbkcsSUFBS2xsRSxFQUFJczRELEVBQVl0NEQsR0FBS3U0RCxFQUFVdjRELElBRWhDZ3dCLEdBREVod0IsR0FBSzBrRSxFQUNDLGNBQWdCUyxFQUFjLDZCQUErQnpiLEVBQWtCLGVBQWlCMXBELEVBQUksUUFBVUEsRUFBSSxZQUVsSCxjQUFnQm1sRSxFQUFjLHdDQUEwQ25sRSxFQUFJLGNBQWdCaWxFLEVBQVcsS0FBT2psRSxFQUFJLFlBSTlILEdBQUl1NEQsR0FBWXFNLEVBQVksRUFDMUIsSUFBSzVrRSxFQUFJdTRELEVBQVcsRUFBR3Y0RCxHQUFLNGtFLEVBQVc1a0UsSUFDckNnd0IsR0FBUSxjQUFnQm0xQyxFQUFjLHdDQUEwQ25sRSxFQUFJLGNBQWdCaWxFLEVBQVcsS0FBT2psRSxFQUFJLGlCQUc1SGd3QixHQUFRLGNBQWdCbTFDLEVBQWMsYUFBZXhiLEVBQW1CLFFBQVV1YixFQUFlLFlBRTdGMzVELEVBQVc4NUQseUJBQ2JyMUMsR0FBUSxjQUFnQm0xQyxFQUFjLFNBQVdBLEVBQWMsd0NBQTBDUCxFQUFZLGNBQWdCSyxFQUFXLEtBQU9MLEVBQVksYUFJdkssT0FBTzUwQyxHQUlUODBDLGFBQWMsU0FBU3p2RCxHQUNyQixJQUNJcXZELEVBQWNydkQsRUFBS3F2RCxZQUNuQkUsRUFGT3RpRSxLQUVVdWlFLGVBRWpCVCxFQUpPOWhFLEtBSVlnakUsaUJBRW5CQyxFQUFlaDZELEVBQVdnNkQsYUFDMUJDLEVBQVdqNkQsRUFBV2k2RCxTQUN0QkMsRUFBa0JsNkQsRUFBV2s2RCxnQkFDN0JDLEVBQWdCbjZELEVBQVdtNkQsY0FDM0JDLEVBQWNwNkQsRUFBV282RCxZQUN6QkMsRUFBZXI2RCxFQUFXcTZELGFBRTFCWCxFQUFXMTVELEVBQVcwNUQsU0FDdEJwYixFQUFXdCtDLEVBQVdzK0MsU0FDdEJDLEVBQVd2K0MsRUFBV3UrQyxTQUN0QitiLEVBQWV0NkQsRUFBV3M2RCxhQUUxQlYsRUFBYzU1RCxFQUFXNDVELFlBQ3pCeGIsRUFBbUJwK0MsRUFBV28rQyxpQkFDOUJDLEVBQWNyK0MsRUFBV3ErQyxZQUV6QjU1QixFQUFPLEdBQ1A4MUMsRUFBVSwyREFDVkMsRUFBVyxnRUFBa0VGLEVBQWUsS0FHNUZHLEVBQWtCajdCLEVBQUV2bkMsV0FBVytILEVBQVd5NkQsaUJBQW1CejZELEVBQVd5NkQsZ0JBQWdCdEIsRUFBYUUsRUFBV1IsR0FBZTc0RCxFQUFXeTZELGdCQUMxSUMsRUFBZ0JsN0IsRUFBRXZuQyxXQUFXK0gsRUFBVzA2RCxlQUFpQjE2RCxFQUFXMDZELGNBQWNILEVBQVNwQixFQUFhRSxFQUFXUixHQUFlNzRELEVBQVcwNkQsY0FDN0lDLEVBQWlCbjdCLEVBQUV2bkMsV0FBVytILEVBQVcyNkQsZ0JBQWtCMzZELEVBQVcyNkQsZUFBZUgsRUFBVXJCLEVBQWFFLEVBQVdSLEdBQWU3NEQsRUFBVzI2RCxlQUVqSmpjLEVBQW1CbGYsRUFBRXZuQyxXQUFXK0gsRUFBVzArQyxrQkFBb0IxK0MsRUFBVzArQyxtQkFBcUIxK0MsRUFBVzArQyxpQkFDMUdELEVBQWVqZixFQUFFdm5DLFdBQVcrSCxFQUFXeStDLGNBQWdCeitDLEVBQVd5K0MsZUFBaUJ6K0MsRUFBV3krQyxhQUU5RmxVLEVBQVMvSyxFQUFFdm5DLFdBQVcrSCxFQUFXdXFDLFFBQVV2cUMsRUFBV3VxQyxPQUFPNHVCLEVBQWFFLEVBQVdSLEdBQWU3NEQsRUFBV3VxQyxPQUMvR3F3QixFQUFTcDdCLEVBQUV2bkMsV0FBVytILEVBQVc0NkQsUUFBVTU2RCxFQUFXNDZELE9BQU96QixFQUFhRSxFQUFXUixHQUFlNzRELEVBQVc0NkQsT0FrR25ILE9BL0ZJcndCLElBTUY5bEIsR0E1Q1MxdEIsS0F1Q2M4akUsaUJBQWlCdHdCLEVBQVEsQ0FDOUM0dUIsWUFBYUEsRUFDYkUsVUFBV0EsRUFDWFIsWUFBYUEsTUFLYm1CLEdBQWdCRSxHQUFtQkQsS0FDckN4MUMsR0FBUSxtQ0FHTkEsR0FERTQ1QixFQUNNLGNBQWdCQSxFQUFjLEtBRTlCLE9BSU4yYixJQUNFYixHQUFlLEVBQ1p6YSxJQUNIajZCLEdBQVEsY0FBZ0JtMUMsRUFBYyxTQUFXeGIsRUFBbUIsUUFBVUUsRUFBVyxhQUczRjc1QixHQUFRLGNBQWdCbTFDLEVBQWMsNkNBQStDVCxFQUFjLEdBQUssb0NBQXNDTyxFQUFXLEtBQU9wYixFQUFXLGFBSzNLNGIsSUFDRnoxQyxHQXJFTzF0QixLQXFFTTBpRSx3QkFBd0IzdkQsSUFJbkNtd0QsSUFDRWQsR0FBZUUsRUFDWjVhLElBQ0hoNkIsR0FBUSxjQUFnQm0xQyxFQUFjLFNBQVd4YixFQUFtQixRQUFVRyxFQUFXLGFBRzNGOTVCLEdBQVEsY0FBZ0JtMUMsRUFBYyx5Q0FBMkNULEVBQWMsR0FBSyxnQ0FBa0NPLEVBQVcsS0FBT25iLEVBQVcsYUFHdks5NUIsR0FBUSxlQUlOMDFDLEdBQ0VNLElBTUZoMkMsR0FBUSxlQUFpQm0xQyxFQUFjLDRCQTdGaEM3aUUsS0F3RmdCOGpFLGlCQUFpQkosRUFBaUIsQ0FDdkR0QixZQUFhQSxFQUNiRSxVQUFXQSxFQUNYUixZQUFhQSxJQUV3RSxVQUt2RnVCLEdBQ0VNLElBT0ZqMkMsR0FBUSxlQUFpQm0xQyxFQUFjLGNBMUdoQzdpRSxLQW9HZ0I4akUsaUJBQWlCSCxFQUFlLENBQ3JEdkIsWUFBYUEsRUFDYkUsVUFBV0EsRUFDWFIsWUFBYUEsRUFDYnZ5RCxNQUFPaTBELElBRWdFLFVBS3pFRixHQUNFTSxJQU9GbDJDLEdBQVEsZUFBaUJtMUMsRUFBYyxlQXZIaEM3aUUsS0FpSGdCOGpFLGlCQUFpQkYsRUFBZ0IsQ0FDdER4QixZQUFhQSxFQUNiRSxVQUFXQSxFQUNYUixZQUFhQSxFQUNieDRDLE9BQVFtNkMsSUFFZ0UsVUFLMUVJLElBTUZuMkMsR0FsSVMxdEIsS0E2SGM4akUsaUJBQWlCRCxFQUFRLENBQzlDekIsWUFBYUEsRUFDYkUsVUFBV0EsRUFDWFIsWUFBYUEsS0FLVnAwQyxHQUtUcTJDLGtDQUFtQyxTQUFTcmhDLEdBQy9CMWlDLEtBQ04rOEQsTUFBTStFLFlBQWM3NEQsRUFBVys0RCxtQkFBbUJ0L0IsSUFJekRzaEMsR0FBSSxTQUFTcnlCLEVBQVFodUMsR0FDbkIsSUFBSTZVLEVBQU94WSxLQUNQKzhELEVBQVF2a0QsRUFBS3VrRCxNQUVqQixJQUFJdmtELEVBQUt2TixTQUFULENBRUEsSUFBSW8zRCxFQUFhMXdCLEVBSWpCLElBSEEwd0IsRUFBYXR3QyxTQUFTc3dDLE9BR0hBLEVBQWEsR0FBaEMsQ0FFQSxJQUFJWixFQUFXeDRELEVBQVd3NEQsU0FDdEJLLEVBQWN0cEQsRUFBS3dxRCxpQkFDbkJWLEVBQVk5cEQsRUFBSytwRCxlQUdyQixLQUFJVCxFQUFjLEdBQ1pPLEVBQWFDLEdBSW5CLEdBQUs5cEQsRUFBS21wRCxRQUFWLENBS0EsSUFBSXNDLEVBQVcsR0FDWEMsRUFBUWo3RCxFQUFXaTdELE9BQVMsR0FDaENELEVBQVNDLEVBQU16QyxTQUFXeUMsRUFBTXpDLFNBQVcsWUFBY0EsRUFDekR3QyxFQUFTQyxFQUFNN0IsV0FBYTZCLEVBQU03QixXQUFhLGNBQWdCQSxFQUUvRCxJQUFJOEIsRUFBYTE3QixFQUFFdm5DLFdBQVcrSCxFQUFXcTNCLE1BQVFyM0IsRUFBV3EzQixPQUFTcjNCLEVBQVdxM0IsS0FDNUU4akMsRUFBbUIsQ0FDckI3aUUsS0FBTSxNQUNOdUwsT0FBTyxFQUNQMlQsS0FBTSxHQUNOb2YsWUFBYSxtREFDYnBCLFNBQVUsT0FDVm1CLE9BQU8sR0FHVDZJLEVBQUU5akMsUUFBTyxFQUFNeS9ELEVBQWtCRCxHQUNqQzE3QixFQUFFOWpDLE9BQU95L0QsRUFBaUIzakQsS0FBTXdqRCxHQUVoQ0csRUFBaUI1a0MsSUFBTXYyQixFQUFXMitDLFdBQ2xDd2MsRUFBaUIvaEMsUUFBVSxTQUFTSyxHQUM5QmxxQixFQUFLdXBELHFCQUNQdnBELEVBQUt1ckQsa0NBQWtDcmhDLEdBRXZDbHFCLEVBQUt1a0QsTUFBTStFLFlBQWM3NEQsRUFBVzY0RCxZQUl0Q3plLEVBRGdCN3FDLEVBQUs2ckQsb0JBQW9CM2hDLEtBRzNDMGhDLEVBQWlCeitELE1BQVEsU0FBU2k1QixFQUFPMGxDLEVBQVlDLEdBQ25EdDdELEVBQVd1N0QsaUJBQW1CdjdELEVBQVd1N0QsZ0JBQWdCNWxDLEVBQU8wbEMsRUFBWUMsR0FDNUUvckQsRUFBS2lzRCxVQUdQanNELEVBQUtzRCxVQUVMMnNCLEVBQUVuSSxLQUFLOGpDLFFBeENML2dCLEVBQU83cUMsRUFBS2tzRCxnQkFBZ0JyQyxLQTBDOUIsU0FBU2hmLEVBQU81aUMsR0FFZCxJQUFrRCxJQUE5Q2pJLEVBQUsrb0QsU0FBUyxlQUFnQmMsR0FBdUIsT0FBTyxFQWtCaEUsR0FmQXRGLEVBQU16USxlQUF3QyxJQUFyQnlRLEVBQU1zRixXQUE2QixFQUFLQSxFQUFhdEYsRUFBTXNGLFdBQWEsR0FBSyxFQUV0R3RGLEVBQU1zRixXQUFhQSxFQUVuQjdwRCxFQUFLNnFDLFNBRUQ3cUMsRUFBS3ZOLFVBQVl1TixFQUFLbXBELFNBRXhCbnBELEVBQUtpc0QsU0FJUHQwQyxFQUFVMVAsS0FBSyxjQUFjczhDLE1BQVFBLEVBR2pDOXpELEVBQVcwN0QsYUFBYyxDQUMzQixJQUFJQyxFQUFZbjhCLEVBQUU5akMsUUFBTyxFQUFNLEdBQUk4YixHQUM5Qm1oRCxFQUFReDhELFFBQVFxYixFQUFPeFgsRUFBVzA3RCxhQUFhQyxNQUNsRG5rRCxFQUFPbWtELEdBSVh6MEMsRUFBVTFQLEtBQUssY0FBY29rRCxnQkFBa0Jwa0QsRUFHL0NqSSxFQUFLc3NELFdBQVdya0QsRUFBTTljLEdBRXRCNlUsRUFBSytvRCxTQUFTLGNBQWVjLEdBR1gsR0FBZEEsR0FDRjdwRCxFQUFLK29ELFNBQVMsb0JBSVpjLEdBQWM3cEQsRUFBSytwRCxnQkFDckIvcEQsRUFBSytvRCxTQUFTLHFCQUtwQnVELFdBQVksU0FBU3JrRCxFQUFNc2tELEdBQ3pCLElBQ0loSSxFQURPLzhELEtBQ00rOEQsTUFFYnQwQixFQUFFdm5DLFdBQVc2akUsR0FDZkEsRUFBZXRrRCxFQUFNczhDLEdBQ1p0MEIsRUFBRXZuQyxXQUFXK0gsRUFBV3RGLFdBQ2pDc0YsRUFBV3RGLFNBQVM4YyxFQUFNczhDLElBSTlCM2IsUUFBUyxZQUVnQyxJQUFuQ3BoRCxLQUFLdWhFLFNBQVMsbUJBRWxCdmhFLEtBQUsrOEQsTUFBTTV2RCxHQUFHeU8sU0FDZHVVLEVBQVV0SixNQUdWNGhCLEVBQUUsdUJBQXVCN3NCLFNBR3pCNWIsS0FBS3VoRSxTQUFTLGtCQUdoQnlELFNBQVUsU0FBU3JoRSxHQUNqQjNELEtBQUtna0UsR0FBR2hrRSxLQUFLKzhELE1BQU1zRixXQUFhLEVBQUcxK0QsSUFHckN5SCxLQUFNLFNBQVN6SCxHQUNiM0QsS0FBS2drRSxHQUFHaGtFLEtBQUsrOEQsTUFBTXNGLFdBQWEsRUFBRzErRCxJQUdyQ21ZLFFBQVMsV0FDUCxJQUNJbUcsRUFET2ppQixLQUNPMmhFLFFBQVUsUUFBVSxRQUdTLElBSnBDM2hFLEtBSUZ1aEUsU0FBUyxnQkFBaUJ0L0MsS0FKeEJqaUIsS0FNTmlMLFVBQVcsRUFOTGpMLEtBT04rOEQsTUFBTTl4RCxVQUFXLEVBUFhqTCxLQVVOdWhFLFNBQVMsZUFBZ0J0L0MsS0FHaEN3aUQsT0FBUSxXQUNOLElBQ0l4aUQsRUFET2ppQixLQUNPMmhFLFFBQVUsUUFBVSxRQUdRLElBSm5DM2hFLEtBSUZ1aEUsU0FBUyxlQUFnQnQvQyxLQUp2QmppQixLQU1OaUwsVUFBVyxFQU5MakwsS0FPTis4RCxNQUFNOXhELFVBQVcsRUFQWGpMLEtBVU51aEUsU0FBUyxjQUFldC9DLEtBRy9CcXdDLFFBQVMsU0FBUzN1RCxHQUNoQjNELEtBQUtna0UsR0FBR2hrRSxLQUFLKzhELE1BQU1zRixXQUFZMStELElBR2pDK2YsS0FBTSxXQUNPMWpCLEtBRUYrOEQsTUFBTTV2RCxHQUFHNkssR0FBRyxhQUZWaFksS0FJTis4RCxNQUFNNXZELEdBQUd1VyxRQUdoQkUsS0FBTSxXQUNPNWpCLEtBRUQrOEQsTUFBTTV2RCxHQUFHNkssR0FBRyxhQUZYaFksS0FJTis4RCxNQUFNNXZELEdBQUd5VyxRQUloQmtnRCxpQkFBa0IsU0FBUzFoQixFQUFVNmlCLEdBQ25DLElBQUlDLEVBRUosSUFBSyxJQUFJam1FLEtBQU9nbUUsRUFBVyxDQUN6QixJQUFJdG1FLEVBQVFzbUUsRUFBVWhtRSxHQUNsQmttRSxFQUFTLElBQUkvN0QsT0FBTyxVQUFZbkssRUFBTSxTQUFVLE9BRXBEaW1FLEdBQW1CQSxHQUFtQjlpQixHQUFVMzhDLFFBQVEwL0QsRUFBUXhtRSxHQUdsRSxPQUFPdW1FLEdBSVRSLGdCQUFpQixTQUFTL3lCLEdBQ3hCLElBQUk4dkIsRUFBV3g0RCxFQUFXdzRELFNBQ3RCN1osRUFBYTMrQyxFQUFXMitDLFdBQ3hCa2EsRUFBYzloRSxLQUFLZ2pFLGlCQUVuQnZ3RCxFQUFRZ3ZELEdBQVk5dkIsRUFBUyxHQUFLLEVBQ2xDbnRDLEVBQU1lLEtBQUt1cEMsSUFBSTZDLEVBQVM4dkIsRUFBVUssR0FFdEMsT0FBT2xhLEVBQVd2bkQsTUFBTW9TLEVBQVEsRUFBR2pPLElBSXJDdytELGVBQWdCLFdBQ2QsT0FBT2hqRSxLQUFLKzhELE1BQU0rRSxhQUFlNzRELEVBQVc2NEQsYUFBZSxHQUk3RFMsYUFBYyxXQUNaLE9BQU9oOUQsS0FBS211QixLQUFLMXpCLEtBQUtnakUsaUJBQW1CLzVELEVBQVd3NEQsV0FJdEQyRCxXQUFZLFNBQVNDLEdBQ25CLElBQUl2ekQsRUFVSixNQVJ1QixpQkFBWnV6RCxFQUNUdnpELEVBQVN1ekQsRUFDQTU4QixFQUFFdm5DLFdBQVdta0UsR0FDdEJ2ekQsRUFBU3V6RCxJQUVUbEUsRUFBVywrQ0FHTnJ2RCxHQUlUdXlELG9CQUFxQixTQUFTemMsR0FDNUIsSUFDSTBkLEVBREFELEVBQVVybEUsS0FBS29sRSxXQUFXbjhELEVBQVdvOEQsU0FJekMsR0FBSXpELEVBQVEyRCxTQUFTM2QsR0FBYSxDQUNoQyxJQUNFbmYsRUFBRS9rQyxLQUFLMmhFLEVBQVF6K0QsTUFBTSxNQUFNLFNBQVMwUyxFQUFPb3dCLEdBQ3pDNDdCLEdBQWdCQSxHQUE4QjFkLEdBQVlsZSxNQUc5RCxNQUFPcCtCLElBR0ZnNkQsRUFFTzFELEVBQVF4OEQsUUFBUWtnRSxJQUMxQm5FLEVBQVcsY0FBZ0JrRSxFQUFVLHNCQUZyQ2xFLEVBQVcsY0FBZ0JrRSxFQUFVLGtCQU16QyxPQUFPQyxHQUFnQjFkLEdBSXpCOFosZ0JBQWlCLFNBQVM5WixFQUFZamtELEdBQ3BDLElBQUk2VSxFQUFPeFksS0FFUDRoRSxFQUFRMkQsU0FBUzNkLEdBQ25CamtELEVBQVNzRixFQUFXMitDLFdBQWFwdkMsRUFBSzZyRCxvQkFBb0J6YyxJQUNqRGdhLEVBQVF4OEQsUUFBUXdpRCxHQUN6QmprRCxFQUFTc0YsRUFBVzIrQyxXQUFhQSxHQUN4Qm5mLEVBQUV2bkMsV0FBVzBtRCxHQUN0QjMrQyxFQUFXMitDLFlBQVcsU0FBU25uQyxHQUN4Qm1oRCxFQUFReDhELFFBQVFxYixJQUNuQjBnRCxFQUFXLHdEQUViM29ELEVBQUtrcEQsZ0JBQWdCN2pFLEtBQUsyYSxFQUFNaUksRUFBTTljLE1BRVQsaUJBQWZpa0QsR0FDWixnQkFBZ0J2N0MsS0FBS3U3QyxLQUN2QjMrQyxFQUFXdThELGFBQWUsU0FFNUI3aEUsRUFBU2lrRCxJQUVUdVosRUFBVyxxQ0FJZkksU0FBVSxTQUFTLzNDLEdBQ2pCLElBQ0kxWCxFQURBMnpELEVBQWlCdDFDLEVBQVUxUCxLQUFLLGNBR2hDMU4sRUFBTzVOLE1BQU03RixVQUFVZSxNQUFNSSxNQUFNcUQsV0FpQnZDLE9BaEJBaVAsRUFBSy9GLFFBRUQvRCxFQUFXdWdCLElBQVNpZixFQUFFdm5DLFdBQVcrSCxFQUFXdWdCLE1BQ0QsSUFBekN2Z0IsRUFBV3VnQixHQUFNL29CLE1BQU1mLEVBQVFxVCxLQUNqQ2pCLEdBQVMsR0FJVDJ6RCxFQUFlaGtELE9BQVNna0QsRUFBZWhrRCxNQUFNK0gsSUFDL0NpZixFQUFFL2tDLEtBQUsraEUsRUFBZWhrRCxNQUFNK0gsSUFBTyxTQUFTbFEsRUFBT293QixJQUNoQixJQUE3QkEsRUFBS2pwQyxNQUFNZixFQUFRcVQsS0FDckJqQixHQUFTLE9BS0csSUFBWEEsR0FHVG13RCxTQUFVLFdBQ1IsSUFBSXpwRCxFQUFPeFksS0FDUG1OLEVBQUtxTCxFQUFLdWtELE1BQU01dkQsR0FHcEJnakIsRUFBVTNKLEdBQUc2NkMsRUFBYyxNQUFNLFNBQVN6NkMsRUFBT3k3QyxFQUFZbjZELElBQzNEbTZELEVBQWF0d0MsU0FBUzBXLEVBQUVILEtBQUsrNUIsT0FJeEI1NUIsRUFBRUwsVUFBVWk2QixJQUNmbEIsRUFBVyx1Q0FHYjNvRCxFQUFLd3JELEdBQUczQixFQUFZbjZELE9BSXRCaUYsRUFBR3c2QixTQUFTLHVCQUF3QixTQUFTLFNBQVMvZ0IsR0FDcEQsSUFBSXFjLEVBQVV3RixFQUFFN2hCLEVBQU1vQyxlQUNsQnE1QyxFQUFhNTVCLEVBQUVILEtBQUtyRixFQUFRdnlCLEtBQUssYUFFckMsR0FBSzJ4RCxJQUFjcC9CLEVBQVFuSCxTQUFTN3lCLEVBQVdvK0Msb0JBQXFCcGtCLEVBQVFuSCxTQUFTN3lCLEVBQVdtK0MsaUJBR2hHLE9BQThELElBQTFENXVDLEVBQUsrb0QsU0FBUyxvQkFBcUIzNkMsRUFBT3k3QyxLQUU5QzdwRCxFQUFLd3JELEdBQUczQixHQUdSN3BELEVBQUsrb0QsU0FBUyxtQkFBb0IzNkMsRUFBT3k3QyxLQUVwQ3A1RCxFQUFXMDVELGVBQWhCLE1BSUZ4MUQsRUFBR3c2QixTQUFTLDJCQUE0QixTQUFTLFNBQVMvZ0IsR0FDeEQsSUFBSXFjLEVBQVV3RixFQUFFN2hCLEVBQU1vQyxlQUNsQnE1QyxFQUFhNTVCLEVBQUVILEtBQUtyRixFQUFRdnlCLEtBQUssYUFFckMsR0FBSzJ4RCxJQUFjcC9CLEVBQVFuSCxTQUFTN3lCLEVBQVdvK0Msa0JBRy9DLE9BQWtFLElBQTlEN3VDLEVBQUsrb0QsU0FBUyx3QkFBeUIzNkMsRUFBT3k3QyxLQUVsRDdwRCxFQUFLd3JELEdBQUczQixHQUdSN3BELEVBQUsrb0QsU0FBUyx1QkFBd0IzNkMsRUFBT3k3QyxLQUV4Q3A1RCxFQUFXMDVELGVBQWhCLE1BSUZ4MUQsRUFBR3c2QixTQUFTLHVCQUF3QixTQUFTLFNBQVMvZ0IsR0FDcEQsSUFBSXFjLEVBQVV3RixFQUFFN2hCLEVBQU1vQyxlQUNsQnE1QyxFQUFhNTVCLEVBQUVILEtBQUtyRixFQUFRdnlCLEtBQUssYUFFckMsR0FBSzJ4RCxJQUFjcC9CLEVBQVFuSCxTQUFTN3lCLEVBQVdvK0Msa0JBRy9DLE9BQThELElBQTFEN3VDLEVBQUsrb0QsU0FBUyxvQkFBcUIzNkMsRUFBT3k3QyxLQUU5QzdwRCxFQUFLd3JELEdBQUczQixHQUdSN3BELEVBQUsrb0QsU0FBUyxtQkFBb0IzNkMsRUFBT3k3QyxLQUVwQ3A1RCxFQUFXMDVELGVBQWhCLE1BSUZ4MUQsRUFBR3c2QixTQUFTLDRCQUE2QixTQUFTLFNBQVMvZ0IsR0FDekQsSUFBSXk3QyxFQUFhNTVCLEVBQUUsZ0NBQWlDdDdCLEdBQUlwTCxNQUd4RCxJQUFrRSxJQUE5RHlXLEVBQUsrb0QsU0FBUyx3QkFBeUIzNkMsRUFBT3k3QyxHQUF1QixPQUFPLEVBRWhGbHlDLEVBQVU3SSxRQUFRKzVDLEVBQWMsS0FBTWdCLEdBR3RDN3BELEVBQUsrb0QsU0FBUyx1QkFBd0IzNkMsRUFBT3k3QyxNQUkvQ2wxRCxFQUFHdzZCLFNBQVMsZ0NBQWlDLFNBQVMsU0FBUy9nQixHQUM3RCxHQUFvQixLQUFoQkEsRUFBTXFGLE1BQWMsQ0FDdEIsSUFBSW8yQyxFQUFhNTVCLEVBQUU3aEIsRUFBTW9DLGVBQWVqbkIsTUFHeEMsSUFBaUUsSUFBN0R5VyxFQUFLK29ELFNBQVMsdUJBQXdCMzZDLEVBQU95N0MsR0FBdUIsT0FBTyxFQUUvRWx5QyxFQUFVN0ksUUFBUSs1QyxFQUFjLEtBQU1nQixHQUd0QzU1QixFQUFFLGdDQUFpQ3Q3QixHQUFJK2UsUUFHdkMxVCxFQUFLK29ELFNBQVMsc0JBQXVCMzZDLEVBQU95N0MsT0FLaERseUMsRUFBVTNKLEdBQUc2NkMsRUFBYyxZQUFZLFNBQVN6NkMsRUFBTzFlLEdBQ3JEc1EsRUFBS3dzRCxTQUFTOThELE1BSWhCaW9CLEVBQVUzSixHQUFHNjZDLEVBQWMsUUFBUSxTQUFTejZDLEVBQU8xZSxHQUNqRHNRLEVBQUtwTixLQUFLbEQsTUFJWmlvQixFQUFVM0osR0FBRzY2QyxFQUFjLFdBQVcsV0FDcEM3b0QsRUFBS3NELGFBSVBxVSxFQUFVM0osR0FBRzY2QyxFQUFjLFVBQVUsV0FDbkM3b0QsRUFBS2lzRCxZQUlQdDBDLEVBQVUzSixHQUFHNjZDLEVBQWMsV0FBVyxTQUFTejZDLEVBQU8xZSxHQUNwRHNRLEVBQUs4NUMsUUFBUXBxRCxNQUlmaW9CLEVBQVUzSixHQUFHNjZDLEVBQWMsUUFBUSxXQUNqQzdvRCxFQUFLa0wsVUFJUHlNLEVBQVUzSixHQUFHNjZDLEVBQWMsUUFBUSxXQUNqQzdvRCxFQUFLb0wsVUFJUHVNLEVBQVUzSixHQUFHNjZDLEVBQWMsV0FBVyxXQUNwQzdvRCxFQUFLNG9DLGFBSVAsSUFBSXNrQixFQUFpQm5nRSxLQUFLMHRCLElBQUl6YSxFQUFLK3BELGVBQWdCLEdBQy9Db0QsRUFBb0IxOEQsRUFBV281RCxXQUUvQjdwRCxFQUFLdXBELHVCQUNQNEQsRUFBb0IsR0FFbEIxOEQsRUFBVzI4RCxxQkFDYnoxQyxFQUFVN0ksUUFBUSs1QyxFQUFjLEtBQU05N0QsS0FBS3VwQyxJQUFJNjJCLEVBQW1CRCxNQU14RSxHQUFJdjFDLEVBQVUxUCxLQUFLLGdCQUE4RCxJQUE3QzBQLEVBQVUxUCxLQUFLLGNBQWMrZ0QsWUFBc0IsQ0FFckYsR0FBSS80QixFQUFFTCxVQUFVeGpDLEdBR2QsT0FEQXVyQixFQUFVN0ksUUFBUXpwQixLQUFLbUMsS0FBTXFoRSxFQUFjLEtBQU16OEQsRUFBU2QsVUFBVSxJQUM3RDlELEtBQ0YsR0FBdUIsaUJBQVo0RSxFQUFzQixDQUN0QyxJQUFJbU8sRUFBTzVOLE1BQU03RixVQUFVZSxNQUFNSSxNQUFNcUQsV0FHdkMsT0FGQWlQLEVBQUssR0FBS3N1RCxFQUFjdHVELEVBQUssR0FFckJuTyxHQUNOLElBQUssV0FDTCxJQUFLLE9BQ0wsSUFBSyxLQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxVQUNIdXJCLEVBQVU3SSxRQUFRN21CLE1BQU1ULEtBQU0rUyxHQUM5QixNQUVGLElBQUsscUJBQ0gsT0FBSW9kLEVBQVUxUCxLQUFLLGNBQWNzOEMsTUFDeEI1c0MsRUFBVTFQLEtBQUssY0FBY3M4QyxNQUFNc0YsV0FFbkNseUMsRUFBVTFQLEtBQUssY0FBY3hYLFdBQVdvNUQsV0FHbkQsSUFBSyxlQUNILE9BQU85OEQsS0FBS211QixLQUFLdkQsRUFBVTFQLEtBQUssY0FBY3M4QyxNQUFNK0UsWUFBYzN4QyxFQUFVMVAsS0FBSyxjQUFjczhDLE1BQU0wRSxVQUV2RyxJQUFLLHNCQUNILE9BQU90eEMsRUFBVTFQLEtBQUssY0FBY29rRCxnQkFFdEMsSUFBSyxhQUNILE9BQXVELElBQWhEMTBDLEVBQVUxUCxLQUFLLGNBQWNzOEMsTUFBTTl4RCxTQUM1QyxRQUNFazJELEVBQVcsbUJBQXFCdjhELEdBRXBDLE9BQU81RSxLQUdQNmxFLEVBQWdCMTFDLFFBR2J5eEMsRUFBUTJELFNBQVMzZ0UsSUFBVXU4RCxFQUFXLG1CQVE3QyxPQUpBMkUsRUFBaUI3OEQsR0FFakI0K0MsRUFBV3laLGFBRUp0aEUsTUFJVHlvQyxFQUFFNWxDLEdBQUd1K0QsR0FBWXR0QixTQUFXLENBYzFCZ3VCLFlBQWEsRUFHYk8sV0FBWSxFQUdaWixTQUFVLEdBR1ZoYSxVQUFXLEVBR1h3YixjQUFjLEVBR2RDLFVBQVUsRUFHVkMsaUJBQWlCLEVBRWpCQyxlQUFlLEVBR2ZDLGFBQWEsRUFHYkMsY0FBYyxFQUdkWCxTQUFVLEdBR1ZwYixTQUFVLFVBR1ZDLFNBQVUsVUFHVm9iLGFBQWMsTUFHZFcsYUFBYyxLQUtkVixZQUFhLGVBR2J6YixnQkFBaUIsU0FHakJDLGlCQUFrQixXQUtsQjBlLGFBQWEsRUFFYnJDLGdCQUFpQix3Q0FFakJDLGNBQWUsZUFFZkMsZUFBZ0IsZ0JBR2hCL3lDLFNBQVUsU0FHVjgyQixrQkFBa0IsRUFHbEJELGNBQWMsRUFVZGtlLHFCQUFxQixFQUdyQm5ELHlCQUF5QixFQUV6QksseUJBQXlCLEVBRXpCQyx3QkFBd0IsRUFHeEJwL0QsU0FBVSxjQUlaOGtDLEVBQUU1bEMsR0FBbUIsUUFBSSxTQUFTMm1CLEVBQU03bEIsR0FDbENHLFVBQVVkLE9BQVMsR0FDckJtK0QsRUFBVyxxQkFHUjE0QixFQUFFdm5DLFdBQVd5QyxJQUNoQnc5RCxFQUFXLGdDQUdiLElBQUloeEMsRUFBWXNZLEVBQUV6b0MsTUFDZHlsRSxFQUFpQnQxQyxFQUFVMVAsS0FBSyxjQUUvQmdsRCxJQUNIdDFDLEVBQVUxUCxLQUFLLGFBQWMsSUFDN0JnbEQsRUFBaUJ0MUMsRUFBVTFQLEtBQUssZ0JBR2pDZ2xELEVBQWVoa0QsUUFBVWdrRCxFQUFlaGtELE1BQVEsSUFHakRna0QsRUFBZWhrRCxNQUFNK0gsR0FBUWk4QyxFQUFlaGtELE1BQU0rSCxJQUFTLEdBQzNEaThDLEVBQWVoa0QsTUFBTStILEdBQU05b0IsS0FBS2lELElBS2xDOGtDLEVBQUUyNEIsR0FBYyxTQUFTeitELEVBQVVpQyxHQUtqQyxJQUFJdXJCLEVBU0osR0FiSXJzQixVQUFVZCxPQUFTLEdBQ3JCbStELEVBQVcsNkJBT1hoeEMsRUFEc0IsaUJBQWJ4dEIsR0FBeUJBLGFBQW9CRCxFQUMxQ0MsRUFFQThsQyxFQUFFOWxDLElBR0RLLE9BSWYsT0FGQW10QixFQUFVMDNCLFdBQVdqakQsR0FFZHVyQixHQU9ULElBQUl5eEMsRUFBVSxHQUdkLFNBQVNULEVBQVdubkQsR0FDbEIsTUFBTSxJQUFJbGEsTUFBTSxlQUFpQmthLEdBSW5DLFNBQVM4ckQsRUFBaUIveUQsR0FDbkJBLEVBQUs2MEMsWUFDUnVaLEVBQVcsNkJBR2tCLGlCQUFwQnB1RCxFQUFLNjBDLGdCQUNrQnZpRCxJQUE1QjBOLEVBQUtpdkQsd0JBQ2tCMzhELElBQXJCME4sRUFBSyt1RCxZQUNQWCxFQUFXLDhCQUNEMTRCLEVBQUVMLFVBQVVyMUIsRUFBSyt1RCxjQUMzQlgsRUFBVyx3Q0FHUjE0QixFQUFFdm5DLFdBQVc2UixFQUFLaXZELHFCQUNyQmIsRUFBVyw4Q0FHTlMsRUFBUTJELFNBQVN4eUQsRUFBSzYwQyxtQkFDSCxJQUFqQjcwQyxFQUFLc3lELFFBQ2RsRSxFQUFXLHdEQUNzQixpQkFBakJwdUQsRUFBS3N5RCxTQUF5QjU4QixFQUFFdm5DLFdBQVc2UixFQUFLc3lELFVBQ2hFbEUsRUFBZ0JwdUQsRUFBS3N5RCxRQUFVLDRDQUlUaGdFLElBQXRCME4sRUFBSzR4RCxjQUErQmw4QixFQUFFdm5DLFdBQVc2UixFQUFLNHhELGVBQ3hEeEQsRUFBVyx3Q0FLZixTQUFTMEUsRUFBZ0I3Z0UsR0FJdkJ5akMsRUFBRS9rQyxLQUhXLENBQUMsS0FBTSxXQUFZLE9BQVEsVUFBVyxTQUFVLFVBQVcsT0FBUSxPQUFRLFlBR3pFLFNBQVM0VixFQUFPM2EsR0FDN0JxRyxFQUFPNmhCLElBQUl3NkMsRUFBYzFpRSxNQUkzQnFHLEVBQU95YixLQUFLLGFBQWMsSUFHMUJnb0IsRUFBRSxnQkFBaUJ6akMsR0FBUTRXLFNBUTdCNnNCLEVBQUUva0MsS0FBSyxDQUFDLFNBQVUsUUFBUyxXQUFXLFNBQVM0VixFQUFPcmIsR0FDcEQyakUsRUFBUSxLQUFPM2pFLEdBQVEsU0FBU21CLEdBQzlCLE9BTkosU0FBdUJBLEVBQVFrUSxHQUM3QixPQUFtQyxXQUF6QkEsU0FBWSxHQUFrQyxNQUFWbFEsRUFBa0IsT0FBVWhCLE9BQU9rQixVQUFVdUIsU0FBU2hELEtBQUt1QixHQUFRaUIsTUFBTSxHQUFJLEdBQUtpUCxHQUFNeEksY0FLN0hrL0QsQ0FBYzVtRSxLQUFZbkIsRUFBSzZJLHVCQVV2QyxLQUZELGFBQ0UsT0FBTzJoQyxHQUNSLDhCQXBsQ0wsQ0F1bENHem9DLEtBQU0sSyxtRENqbUNUNUIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3RELElBQUlzbkUsRUFBaUIsRUFBUSxJQUM3QnJtRSxTQUFTOE0saUJBQWlCLHFCQUFxQmkrQixTQUFRLFNBQVV1N0IsR0FDN0QsSUFBSUQsRUFBZUUsYUFBYUQsTyw2QkNIcEM5bkUsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3REbkIsRUFBUTJvRSxrQkFBZSxFQUN2QixJQUFJQSxFQUE4QixXQUM5QixTQUFTQSxFQUFhRCxHQUNsQmxtRSxLQUFLa21FLFVBQVlBLEVBQ2pCbG1FLEtBQUt5USxTQUFXelEsS0FBS2l3QyxjQUNyQmp3QyxLQUFLeXpDLHFCQXNCVCxPQXBCQTB5QixFQUFhN21FLFVBQVUyd0MsWUFBYyxXQUdqQyxNQUFPLENBRktqd0MsS0FBS2ttRSxVQUFVajlCLGNBQWMsOEJBQzlCanBDLEtBQUtrbUUsVUFBVWo5QixjQUFjLDZCQUk1Q2s5QixFQUFhN21FLFVBQVVtMEMsbUJBQXFCLFdBQ3hDenpDLEtBQUtvbUUscUJBQXVCcG1FLEtBQUtvbUUscUJBQXFCbG5FLEtBQUtjLE1BQzNEQSxLQUFLa21FLFVBQVV2M0QsaUJBQWlCLFFBQVMzTyxLQUFLb21FLHVCQUVsREQsRUFBYTdtRSxVQUFVOG1FLHFCQUF1QixXQUNILFVBQW5DcG1FLEtBQUt5USxTQUFTLEdBQUcrUixNQUFNQyxTQUN2QnppQixLQUFLeVEsU0FBUyxHQUFHK1IsTUFBTUMsUUFBVSxPQUNqQ3ppQixLQUFLeVEsU0FBUyxHQUFHcS9CLFVBQVVqc0IsT0FBTyxnQ0FHbEM3akIsS0FBS3lRLFNBQVMsR0FBRytSLE1BQU1DLFFBQVUsUUFDakN6aUIsS0FBS3lRLFNBQVMsR0FBR3EvQixVQUFVanNCLE9BQU8sZ0NBR25Dc2lELEVBMUJzQixHQTRCakMzb0UsRUFBUTJvRSxhQUFlQSxHLHNDQzlCdkIvbkUsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3RELEVBQVEsR0FDUixFQUFRLElBQ1IsRUFBUSxJQUNSLEVBQVEsSUFDUixFQUFRLElBQ1IsRUFBUSxHQUNSLEVBQVEsSUFDUixFQUFRLEdBQ1IsRUFBUSxLLGdCQ1RSLElBQUlxYixFQUFVLEVBQVEsSUFFQSxpQkFBWkEsSUFBc0JBLEVBQVUsQ0FBQyxDQUFDdmMsRUFBT0MsRUFBSXNjLEVBQVMsTUFPaEUsSUFBSXBWLEVBQVUsQ0FBQyxLQUFNLEVBRXJCLGVBUElpbUMsRUFRSixnQkFBcUJ4bEMsR0FFUixFQUFRLEVBQVIsQ0FBZ0UyVSxFQUFTcFYsR0FFbkZvVixFQUFRMnlCLFNBQVFsdkMsRUFBT0QsUUFBVXdjLEVBQVEyeUIsUyIsImZpbGUiOiJyb29tLXNlYXJjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzOCk7XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNS4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMC0wNS0wNFQyMjo0OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy41LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjVcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjAtMDMtMTRcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4XCI7XG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0ICkgPiAzO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHRcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJiBqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMudG9wID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy50b3AgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMubGVmdCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMubGVmdCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0zIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0zIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImltcG9ydCB7IERhdGVwaWNrZXJBZGFwdGVyIH0gZnJvbSAnLi4vLi4vbGlicy9kYXRlcGlja2VyL0RhdGVwaWNrZXJBZGFwdGVyJztcblxuY2xhc3MgQ2FsZW5kYXIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmFkYXB0ZXIgPSBuZXcgRGF0ZXBpY2tlckFkYXB0ZXIoKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5hZGFwdGVyLmluaXQodGhpcy5lbGVtZW50KTtcbiAgfVxufVxuXG5leHBvcnQgeyBDYWxlbmRhciB9O1xuIiwiaW1wb3J0ICdhaXItZGF0ZXBpY2tlcic7XG5cbmNsYXNzIERhdGVwaWNrZXJBZGFwdGVyIHtcbiAgaW5pdChlbGVtZW50KSB7XG4gICAgY29uc3QgZGF0ZUZyb20gPSBlbGVtZW50LmZpbmQoJy5qcy1kYXRlcGlja2VyLXN0YXJ0Jyk7XG4gICAgY29uc3QgZGF0ZVRvID0gZWxlbWVudC5maW5kKCcuanMtZGF0ZXBpY2tlci1lbmQnKTtcblxuICAgIGVsZW1lbnQuZmluZCgnLmpzLWRhdGVwaWNrZXInKS5kYXRlcGlja2VyKHtcblxuICAgICAgY2xlYXJCdXR0b246IHRydWUsXG4gICAgICByYW5nZTogdHJ1ZSxcbiAgICAgIG11bHRpcGxlRGF0ZXNTZXBhcmF0b3I6ICcgLSAnLFxuICAgICAgcHJldkh0bWw6ICc8aSBjbGFzcz1cImRhdGVwaWNrZXItLWljb24gbWF0ZXJpYWwtaWNvbnNcIj5hcnJvd19iYWNrPC9pPicsXG4gICAgICBuZXh0SHRtbDogJzxpIGNsYXNzPVwiZGF0ZXBpY2tlci0taWNvbiBtYXRlcmlhbC1pY29uc1wiPmFycm93X2ZvcndhcmRzPC9pPicsXG5cbiAgICAgIG5hdlRpdGxlczoge1xuICAgICAgICBkYXlzOiAnTU0gIDxpPnl5eXk8L2k+JyxcbiAgICAgIH0sXG5cbiAgICAgIG9uU2VsZWN0KGRhdGEpIHtcbiAgICAgICAgZGF0ZUZyb20udmFsKGRhdGEuc3BsaXQoJy0nKVswXSk7XG4gICAgICAgIGRhdGVUby52YWwoZGF0YS5zcGxpdCgnLScpWzFdKTtcbiAgICAgIH0sXG5cbiAgICB9KTtcblxuICAgIGNvbnN0IGNhbGVuZGFyID0gZWxlbWVudC5maW5kKCcuanMtZGF0ZXBpY2tlcicpLmRhdGEoJ2RhdGVwaWNrZXInKTtcbiAgICBjb25zdCBjYWxlbmRhckVsID0gY2FsZW5kYXIuJGRhdGVwaWNrZXI7XG5cbiAgICB0aGlzLmFkZEJ1dHRvbihkYXRlRnJvbSwgZGF0ZVRvLCBjYWxlbmRhciwgY2FsZW5kYXJFbCk7XG4gIH1cblxuICBhZGRCdXR0b24oZGF0ZUZyb20sIGRhdGVUbywgY2FsZW5kYXIsIGNhbGVuZGFyRWwpIHtcbiAgICBjb25zdCBhcHBseUJ1dHRvbiA9ICQoXCI8c3BhbiBjbGFzcz0nZGF0ZXBpY2tlci0tYnV0dG9uJz7Qn9GA0LjQvNC10L3QuNGC0Yw8L3NwYW4+XCIpO1xuXG4gICAgYXBwbHlCdXR0b24uY2xpY2soKCkgPT4ge1xuICAgICAgaWYgKGNhbGVuZGFyLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIDwgMikgcmV0dXJuO1xuICAgICAgY2FsZW5kYXIuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgY2FsZW5kYXJFbC5maW5kKCcuZGF0ZXBpY2tlci0tYnV0dG9ucycpLmFwcGVuZChhcHBseUJ1dHRvbik7XG5cbiAgICBkYXRlVG8uY2xpY2soKCkgPT4gY2FsZW5kYXIuc2hvdygpKTtcbiAgICBkYXRlRnJvbS5jbGljaygoKSA9PiBjYWxlbmRhci5zaG93KCkpO1xuICB9XG59XG5cbmV4cG9ydCB7IERhdGVwaWNrZXJBZGFwdGVyIH07XG4iLCJjbGFzcyBEcm9wZG93bkNvbnRyb2wge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCB1cGRhdGUpIHtcbiAgICB0aGlzLml0ZW1zID0gZWxlbWVudDtcbiAgICB0aGlzLmdldEVsZW1lbnQoKTtcbiAgICB0aGlzLmhhbmRsZXJzQmluZCgpO1xuICAgIHRoaXMuY2hlY2tWYWx1ZSgpO1xuICAgIHRoaXMudXBkYXRlID0gdXBkYXRlO1xuICB9XG5cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMuaXRlbXMucXVlcnlTZWxlY3RvcignLmRyb3Bkb3duLWNvdW50ZXJzX19jb250cm9scycpO1xuXG4gICAgdGhpcy5pbnB1dCA9IHRoaXMuaXRlbXMucXVlcnlTZWxlY3RvcignLmRyb3Bkb3duLWNvdW50ZXJzX192YWx1ZScpO1xuICAgIHRoaXMubWF4ID0gTnVtYmVyKHRoaXMuaW5wdXQubWF4KTtcbiAgICB0aGlzLm1pbiA9IE51bWJlcih0aGlzLmlucHV0Lm1pbik7XG4gICAgdGhpcy52YWx1ZSA9IE51bWJlcih0aGlzLmlucHV0LnZhbHVlKTtcbiAgICB0aGlzLnBsdXNBbGwgPSB0aGlzLml0ZW1zLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcm9wZG93bi1jb3VudGVyc19fcGx1cycpO1xuICAgIHRoaXMucGx1c0FsbC5mb3JFYWNoKChwbHVzKSA9PiB7XG4gICAgICB0aGlzLnBsdXNCdXR0b24gPSBwbHVzO1xuICAgIH0pO1xuICAgIHRoaXMubWludXNBbGwgPSB0aGlzLml0ZW1zLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcm9wZG93bi1jb3VudGVyc19fbWludXMnKTtcbiAgICB0aGlzLm1pbnVzQWxsLmZvckVhY2goKG1pbnVzKSA9PiB7XG4gICAgICB0aGlzLm1pbnVzQnV0dG9uID0gbWludXM7XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVyc0JpbmQoKSB7XG4gICAgdGhpcy5oYW5kbGVyQnV0dG9uUGx1c0NsaWNrID0gdGhpcy5oYW5kbGVyQnV0dG9uUGx1c0NsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wbHVzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVyQnV0dG9uUGx1c0NsaWNrKTtcblxuICAgIHRoaXMuaGFuZGxlckJ1dHRvbk1pbnVzQ2xpY2sgPSB0aGlzLmhhbmRsZXJCdXR0b25NaW51c0NsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5taW51c0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlckJ1dHRvbk1pbnVzQ2xpY2spO1xuICB9XG5cbiAgaGFuZGxlckJ1dHRvblBsdXNDbGljaygpIHtcbiAgICB0aGlzLnVwVmFsdWUodGhpcy52YWx1ZSArIDEpO1xuICB9XG5cbiAgaGFuZGxlckJ1dHRvbk1pbnVzQ2xpY2soKSB7XG4gICAgdGhpcy51cFZhbHVlKHRoaXMudmFsdWUgLSAxKTtcbiAgfVxuXG4gIHVwVmFsdWUodmFsKSB7XG4gICAgY29uc3QgaXNSYW5nZSA9IHZhbCA8PSB0aGlzLm1heCAmJiB2YWwgPj0gdGhpcy5taW47XG4gICAgY29uc3QgaXNaZXJvID0gdmFsID09PSAwO1xuXG4gICAgaWYgKGlzUmFuZ2UpIHRoaXMudmFsdWUgPSB2YWw7XG4gICAgaWYgKGlzWmVybykgdGhpcy52YWx1ZSA9IHRoaXMubWluO1xuXG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgIHRoaXMuY2hlY2tWYWx1ZSgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICB1cGRhdGVWYWx1ZSgpIHtcbiAgICB0aGlzLmlucHV0LnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIGNoZWNrVmFsdWUoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IHRoaXMubWluKSB7XG4gICAgICB0aGlzLmRlYWN0aXZhdGVNaW51cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFjdGl2YXRlTWludXMoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdGhpcy5tYXgpIHtcbiAgICAgIHRoaXMuZGVhY3RpdmF0ZVBsdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hY3RpdmF0ZVBsdXMoKTtcbiAgICB9XG4gIH1cblxuICBpc01pbigpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gdGhpcy5taW47XG4gIH1cblxuICBpc1plcm8oKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IDA7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIGFjdGl2YXRlUGx1cygpIHtcbiAgICBpZiAodGhpcy5wbHVzQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnZHJvcGRvd24tY291bnRlcnNfX3BsdXNfZGlzYWJsZWQnKSkge1xuICAgICAgdGhpcy5wbHVzQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Ryb3Bkb3duLWNvdW50ZXJzX19wbHVzX2Rpc2FibGVkJyk7XG4gICAgICB0aGlzLnBsdXNCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlYWN0aXZhdGVQbHVzKCkge1xuICAgIHRoaXMucGx1c0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdkcm9wZG93bi1jb3VudGVyc19fcGx1c19kaXNhYmxlZCcpO1xuICAgIHRoaXMucGx1c0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgfVxuXG4gIGFjdGl2YXRlTWludXMoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5taW51c0J1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3Bkb3duLWNvdW50ZXJzX19taW51c19kaXNhYmxlZCcpXG4gICAgKSB7XG4gICAgICB0aGlzLm1pbnVzQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Ryb3Bkb3duLWNvdW50ZXJzX19taW51c19kaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlYWN0aXZhdGVNaW51cygpIHtcbiAgICB0aGlzLm1pbnVzQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Ryb3Bkb3duLWNvdW50ZXJzX19taW51c19kaXNhYmxlZCcpO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIERyb3Bkb3duQ29udHJvbCxcbn07XG4iLCJpbXBvcnQge1xuICBEcm9wZG93bkNvbnRyb2wsXG59IGZyb20gJy4uL2Ryb3Bkb3duLWNvbnRyb2wvRHJvcGRvd25Db250cm9sJztcblxuY2xhc3MgRHJvcGRvd24ge1xuICBjb25zdHJ1Y3Rvcihkcm9wZG93bikge1xuICAgIHRoaXMuZHJvcGRvd24gPSBkcm9wZG93bjtcbiAgICB0aGlzLmZpbmRFbGVtZW50KCk7XG4gICAgdGhpcy5oYW5kbGVyc0JpbmQoKTtcbiAgICB0aGlzLmRlZmF1bHRTdW0oKTtcbiAgICB0aGlzLmNvbnRyb2xzID0gWy4uLnRoaXMudmFsdWVzXS5tYXAoXG4gICAgICAoaXRlbSkgPT4gbmV3IERyb3Bkb3duQ29udHJvbChpdGVtLCAoKSA9PiB0aGlzLnVwZGF0ZSgpKSxcbiAgICApO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBmaW5kRWxlbWVudCgpIHtcbiAgICB0aGlzLm1lbnUgPSB0aGlzLmRyb3Bkb3duLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wZG93bl9fbWVudScpO1xuICAgIHRoaXMudG9nZ2xlID0gdGhpcy5kcm9wZG93bi5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd25fX3NlY3Rpb24nKTtcbiAgICB0aGlzLnRpdGxlID0gdGhpcy5kcm9wZG93bi5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd25fX3RpdGxlJyk7XG4gICAgdGhpcy5pc0d1ZXN0cyA9IHRoaXMuZHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKCdkcm9wZG93bl9ndWVzdCcpO1xuICAgIHRoaXMuZGVmYXVsdFRpdGxlID0gdGhpcy5kcm9wZG93bi5kYXRhc2V0LmRlZmF1bHQgfHwgJyc7XG4gICAgdGhpcy52YWx1ZXMgPSB0aGlzLmRyb3Bkb3duLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcm9wZG93bi1jb3VudGVycycpO1xuICAgIHRoaXMuYnV0dG9uQ2xlYXIgPSB0aGlzLmRyb3Bkb3duLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wZG93bl9fYnV0dG9uX2NsZWFyJykgfHwgdW5kZWZpbmVkO1xuICAgIHRoaXMuYnV0dG9uVXNlID0gdGhpcy5kcm9wZG93bi5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd25fX2J1dHRvbl91c2UnKSB8fCB1bmRlZmluZWQ7XG4gIH1cblxuICBoYW5kbGVyc0JpbmQoKSB7XG4gICAgdGhpcy5oYW5kbGVyTWVudUNsaWNrID0gdGhpcy5oYW5kbGVyTWVudUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy50b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZXJNZW51Q2xpY2spO1xuXG4gICAgdGhpcy5oYW5kbGVyRG9jdW1lbnRDbGljayA9IHRoaXMuaGFuZGxlckRvY3VtZW50Q2xpY2suYmluZCh0aGlzKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlckRvY3VtZW50Q2xpY2spO1xuXG4gICAgaWYgKHRoaXMuYnV0dG9uVXNlKSB0aGlzLmhhbmRsZXJVc2VCdXR0b25DbGljayA9IHRoaXMuaGFuZGxlclVzZUJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5idXR0b25Vc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZXJVc2VCdXR0b25DbGljayk7XG5cbiAgICBpZiAodGhpcy5idXR0b25DbGVhcikgdGhpcy5oYW5kbGVyQnV0dG9uQ2xlYXJDbGljayA9IHRoaXMuaGFuZGxlckJ1dHRvbkNsZWFyQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmJ1dHRvbkNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVyQnV0dG9uQ2xlYXJDbGljayk7XG4gIH1cblxuICBoYW5kbGVyTWVudUNsaWNrKCkge1xuICAgIHRoaXMubWVudS5jbGFzc0xpc3QudG9nZ2xlKCdkcm9wZG93bl9hY3RpdmUnKTtcbiAgICB0aGlzLnRpdGxlLmNsYXNzTGlzdC50b2dnbGUoJ3RpdGxlLWFjdGl2ZScpO1xuICB9XG5cbiAgaGFuZGxlckRvY3VtZW50Q2xpY2soZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5kcm9wZG93bicpICE9PSB0aGlzLmRyb3Bkb3duKSB7XG4gICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZURyb3Bkb3duKCkge1xuICAgIGNvbnN0IGlzRHJvcGRvd25DbG9zZWQgPSB0aGlzLm1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKCdkcm9wZG93bl9hY3RpdmUnKTtcbiAgICBpZiAoaXNEcm9wZG93bkNsb3NlZCkge1xuICAgICAgdGhpcy5tZW51LmNsYXNzTGlzdC5yZW1vdmUoJ2Ryb3Bkb3duX2FjdGl2ZScpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXJVc2VCdXR0b25DbGljayhldmVudCkge1xuICAgIGlmICh0aGlzLnN1bUd1ZXN0cyAhPT0gMCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuY2xvc2VEcm9wZG93bigpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXJCdXR0b25DbGVhckNsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmNvbnRyb2xzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQudXBWYWx1ZSgwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZVRpdGxlKCk7XG4gICAgdGhpcy5jaGVja0FkdWx0QnV0dG9uVXNlKCk7XG4gIH1cblxuICBjaGVja0J1dHRvbkNsZWFyKCkge1xuICAgIGNvbnN0IGFsbE1pbiA9ICF0aGlzLmNvbnRyb2xzLm1hcCgoaXRlbSkgPT4gaXRlbS5pc01pbigpKS5pbmNsdWRlcyhmYWxzZSk7XG4gICAgaWYgKGFsbE1pbiA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5oaWRkZW5DbGVhckJ1dHRvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpc2libGVDbGVhckJ1dHRvbigpO1xuICAgIH1cbiAgfVxuXG4gIGNoZWNrQnV0dG9uVXNlKCkge1xuICAgIGNvbnN0IGlzQWxsWmVybyA9ICF0aGlzLmNvbnRyb2xzXG4gICAgICAubWFwKChpdGVtKSA9PiBpdGVtLmlzWmVybygpKVxuICAgICAgLmluY2x1ZGVzKGZhbHNlKTtcbiAgICBpZiAoaXNBbGxaZXJvID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmhpZGRlbkJ1dHRvblVzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpc2libGVCdXR0b25Vc2UoKTtcbiAgICB9XG4gIH1cblxuICBjaGVja0FkdWx0QnV0dG9uVXNlKCkge1xuICAgIGNvbnN0IGlzR3Vlc3RNaW4gPSB0aGlzLnN1bUFkdWx0ID09PSAwICYmIHRoaXMuc3VtQmFiaWVzID4gMDtcblxuICAgIGlmIChpc0d1ZXN0TWluKSB0aGlzLmhpZGRlbkJ1dHRvblVzZSgpO1xuICB9XG5cbiAgaGlkZGVuQ2xlYXJCdXR0b24oKSB7XG4gICAgdGhpcy5idXR0b25DbGVhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG5cbiAgdmlzaWJsZUNsZWFyQnV0dG9uKCkge1xuICAgIHRoaXMuYnV0dG9uQ2xlYXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIH1cblxuICBoaWRkZW5CdXR0b25Vc2UoKSB7XG4gICAgdGhpcy5idXR0b25Vc2Uuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuXG4gIHZpc2libGVCdXR0b25Vc2UoKSB7XG4gICAgdGhpcy5idXR0b25Vc2Uuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIH1cblxuICBmb3JtRGVjbGVuc2lvbihudW1iZXIsIGZvcm0pIHtcbiAgICBudW1iZXIgPSBNYXRoLmFicyhudW1iZXIpICUgMTAwO1xuICAgIGNvbnN0IG4xID0gbnVtYmVyICUgMTA7XG4gICAgY29uc3QgaXNOdW1iZXJSYW5nZSA9IG51bWJlciA+IDEwICYmIG51bWJlciA8IDIwO1xuICAgIGNvbnN0IGlzTnVtUmFuZ2UgPSBuMSA+IDEgJiYgbjEgPCA1O1xuICAgIGlmIChpc051bWJlclJhbmdlKSByZXR1cm4gZm9ybVsyXTtcbiAgICBpZiAoaXNOdW1SYW5nZSkgcmV0dXJuIGZvcm1bMV07XG4gICAgaWYgKG4xID09PSAxKSByZXR1cm4gZm9ybVswXTtcbiAgICByZXR1cm4gZm9ybVsyXTtcbiAgfVxuXG4gIGRlZmF1bHRTdW0oKSB7XG4gICAgbGV0IERlZmF1bHRTdW0gPSAwO1xuICAgIHRoaXMudmFsdWVzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIHRoaXMuQWxsSW5wdXQgPSBpdGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcm9wZG93bi1jb3VudGVyc19fdmFsdWUnKTtcblxuICAgICAgdGhpcy5BbGxJbnB1dC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBEZWZhdWx0U3VtICs9IE51bWJlcihlbC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuRGVmYXVsdFN1bSA9IERlZmF1bHRTdW07XG4gIH1cblxuICAvLyDQu9C+0LPQuNC60LAg0LLRgdC10YUg0LfQsNCz0L7Qu9C+0LLQutC+0LJcbiAgdXBkYXRlVGl0bGUoKSB7XG4gICAgaWYgKHRoaXMuaXNHdWVzdHMgPT09IHRydWUpIHtcbiAgICAgIHRoaXMudXBkYXRlRHJvcGRvd25HdWVzdHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVEcm9wZG93blJvb20oKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVEcm9wZG93bkd1ZXN0cygpIHtcbiAgICBjb25zdCBhcnJheSA9IHRoaXMuY29udHJvbHMubWFwKChpdGVtKSA9PiBpdGVtLmdldFZhbHVlKCkpO1xuXG4gICAgY29uc3QgW2FkdWx0cyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgYmFiaWVzXSA9IFthcnJheVswXSxcbiAgICAgIGFycmF5WzFdLFxuICAgICAgYXJyYXlbMl1dO1xuXG4gICAgdGhpcy5zdW1HdWVzdHMgPSBhZHVsdHMgKyBjaGlsZHJlbiArIGJhYmllcztcbiAgICB0aGlzLnN1bUFkdWx0ID0gYWR1bHRzICsgY2hpbGRyZW47XG4gICAgdGhpcy5zdW1CYWJpZXMgPSBiYWJpZXM7XG5cbiAgICBpZiAodGhpcy5zdW1BZHVsdCA8IDEwKSB7XG4gICAgICB0aGlzLmNvbnRyb2xzLm1hcCgoaXRlbSkgPT4gaXRlbS5hY3RpdmF0ZVBsdXMoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VtQWR1bHQgPSAxMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5jb250cm9scy5sZW5ndGg7XG4gICAgICB0aGlzLmNvbnRyb2xzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgaXRlbS5kZWFjdGl2YXRlUGx1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGJhYmllcyA9PT0gMTApIHtcbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzLmNvbnRyb2xzO1xuICAgICAgdGhpcy5jb250cm9scy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBpdGVtLmRlYWN0aXZhdGVQbHVzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBpc0d1ZXN0WmVybyA9IGFkdWx0cyA+IDAgfHwgY2hpbGRyZW4gPiAwO1xuXG4gICAgaWYgKGlzR3Vlc3RaZXJvKSB7XG4gICAgICB0aGlzLmNoZWNrQnV0dG9uQ2xlYXIoKTtcbiAgICAgIHRoaXMuY2hlY2tCdXR0b25Vc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGVja0J1dHRvbkNsZWFyKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZm9ybUd1ZXN0cyA9IFsn0LPQvtGB0YLRjCcsXG4gICAgICAn0LPQvtGB0YLRjycsXG4gICAgICAn0LPQvtGB0YLQtdC5J107XG4gICAgY29uc3QgZm9ybU5ld2Jvcm5zID0gWyfQvNC70LDQtNC10L3QtdGGJyxcbiAgICAgICfQvNC70LDQtNC10L3RhtCwJyxcbiAgICAgICfQvNC70LDQtNC10L3RhtC10LInXTtcbiAgICB0aGlzLm1lc3NhZ2VHdWVzdHMgPSB0aGlzLmZvcm1EZWNsZW5zaW9uKHRoaXMuc3VtQWR1bHQsIGZvcm1HdWVzdHMpO1xuXG4gICAgdGhpcy5tZXNzYWdlTmV3Ym9ybnMgPSB0aGlzLmZvcm1EZWNsZW5zaW9uKHRoaXMuc3VtQmFiaWVzLCBmb3JtTmV3Ym9ybnMpO1xuXG4gICAgY29uc3QgZ3Vlc3RaZXJvID0gdGhpcy5zdW1CYWJpZXMgPT09IDAgJiYgdGhpcy5zdW1BZHVsdCA9PT0gMDtcblxuICAgIGNvbnN0IGlzQWR1bHRaZXJvID0gdGhpcy5zdW1BZHVsdCAhPT0gMCAmJiB0aGlzLnN1bUJhYmllcyA9PT0gMDtcblxuICAgIGlmIChndWVzdFplcm8pIHRoaXMudGl0bGUuaW5uZXJIVE1MID0gJ9Ch0LrQvtC70YzQutC+INCz0L7RgdGC0LXQuSc7XG5cbiAgICBlbHNlIGlmIChpc0FkdWx0WmVybykgdGhpcy50aXRsZS5pbm5lckhUTUwgPSBgJHt0aGlzLnN1bUFkdWx0fSAke3RoaXMubWVzc2FnZUd1ZXN0c31gO1xuXG4gICAgZWxzZSB0aGlzLnRpdGxlLmlubmVySFRNTCA9IGAke3RoaXMuc3VtQWR1bHR9ICR7dGhpcy5tZXNzYWdlR3Vlc3RzfSwgJHt0aGlzLnN1bUJhYmllc30gJHt0aGlzLm1lc3NhZ2VOZXdib3Juc31gO1xuICB9XG5cbiAgdXBkYXRlRHJvcGRvd25Sb29tKCkge1xuICAgIGNvbnN0IGFycmF5ID0gdGhpcy5jb250cm9scy5tYXAoKGl0ZW0pID0+IGl0ZW0uZ2V0VmFsdWUoKSk7XG5cbiAgICBjb25zdCBbQmVkcm9vbSxcbiAgICAgIEJlZCxcbiAgICAgIEJhdGhyb29tXSA9IFthcnJheVswXSxcbiAgICAgIGFycmF5WzFdLFxuICAgICAgYXJyYXlbMl1dO1xuXG4gICAgY29uc3Qgc3VtID0gQmVkcm9vbSArIEJlZCArIEJhdGhyb29tO1xuXG4gICAgaWYgKHN1bSAhPT0gdGhpcy5EZWZhdWx0U3VtKSB7XG4gICAgICB0aGlzLmNoZWNrQnV0dG9uQ2xlYXIoKTtcbiAgICAgIHRoaXMuY2hlY2tCdXR0b25Vc2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtQmVkcm9vbSA9IFsn0YHQv9Cw0LvRjNC90Y8nLFxuICAgICAgJ9GB0L/QsNC70YzQvdC4JyxcbiAgICAgICfRgdC/0LDQu9C10L0nXTtcbiAgICBjb25zdCBmb3JtQmVkID0gWyfQutGA0L7QstCw0YLRjCcsXG4gICAgICAn0LrRgNC+0LLQsNGC0LgnLFxuICAgICAgJ9C60YDQvtCy0LDRgtC10LknXTtcbiAgICBjb25zdCBmb3JtQmF0aHJvb20gPSBbJ9Cy0LDQvdC90LDRjycsXG4gICAgICAn0LLQsNC90L3Ri9C1JyxcbiAgICAgICfQstCw0L3QvdGL0YUnXTtcblxuICAgIGNvbnN0IG1lc3NhZ2VCZWRyb29tID0gdGhpcy5mb3JtRGVjbGVuc2lvbihCZWRyb29tLCBmb3JtQmVkcm9vbSk7XG4gICAgY29uc3QgbWVzc2FnZUJlZCA9IHRoaXMuZm9ybURlY2xlbnNpb24oQmVkLCBmb3JtQmVkKTtcbiAgICBjb25zdCBtZXNzYWdlQmF0aHJvb20gPSB0aGlzLmZvcm1EZWNsZW5zaW9uKEJhdGhyb29tLCBmb3JtQmF0aHJvb20pO1xuICAgIGNvbnN0IGlzWmVybyA9IHN1bSA+IDAgJiYgQmF0aHJvb20gPiAwO1xuXG4gICAgaWYgKGlzWmVybykge1xuICAgICAgdGhpcy50aXRsZS5pbm5lckhUTUwgPSBgJHtCZWRyb29tfSAke21lc3NhZ2VCZWRyb29tfSwgJHtCZWR9ICR7bWVzc2FnZUJlZH0sJHtCYXRocm9vbX0gJHttZXNzYWdlQmF0aHJvb219YFxuICAgICAgKyAnLi4uJztcbiAgICB9IGVsc2UgdGhpcy50aXRsZS5pbm5lckhUTUwgPSBgJHtCZWRyb29tfSAke21lc3NhZ2VCZWRyb29tfSwgJHtCZWR9ICR7bWVzc2FnZUJlZH0uLi5gO1xuICB9XG59XG5leHBvcnQge1xuICBEcm9wZG93bixcbn07XG4iLCJpbXBvcnQgeyBEcm9wZG93biB9IGZyb20gJy4vRHJvcGRvd24nO1xuXG5mdW5jdGlvbiBvbkxvYWQoKSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcm9wZG93bicpLmZvckVhY2goKGl0ZW0pID0+IG5ldyBEcm9wZG93bihpdGVtKSk7XG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25Mb2FkKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJ1cmdlcl8xID0gcmVxdWlyZShcIi4vQnVyZ2VyXCIpO1xuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWhlYWRlci1tYWluJykuZm9yRWFjaChmdW5jdGlvbiAoYnVyZ2VyKSB7XG4gICAgbmV3IEJ1cmdlcl8xLkJ1cmdlcihidXJnZXIpO1xufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVyZ2VyID0gdm9pZCAwO1xudmFyIEJ1cmdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdXJnZXIoaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5maW5kRWxlbWVudCgpO1xuICAgICAgICB0aGlzLmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICBCdXJnZXIucHJvdG90eXBlLmZpbmRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmF2YmFyID0gdGhpcy5oZWFkZXIucXVlcnlTZWxlY3RvcignLmpzLWhlYWRlci1uYXYnKTtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMuaGVhZGVyLnF1ZXJ5U2VsZWN0b3IoJy5qcy1idXJnZXJfX2l0ZW0nKTtcbiAgICAgICAgcmV0dXJuIFtuYXZiYXIsXG4gICAgICAgICAgICBidXR0b25dO1xuICAgIH07XG4gICAgQnVyZ2VyLnByb3RvdHlwZS5iaW5kRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlQnV0dG9uQ2xpY2sgPSB0aGlzLmhhbmRsZUJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbMV0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUJ1dHRvbkNsaWNrKTtcbiAgICB9O1xuICAgIEJ1cmdlci5wcm90b3R5cGUuaGFuZGxlQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbMV0uY2xhc3NMaXN0LnRvZ2dsZSgnYnVyZ2VyX19pdGVtX2FjdGl2ZScpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzWzBdLmNsYXNzTGlzdC50b2dnbGUoJ2J1cmdlcl9vcGVuLW1lbnUnKTtcbiAgICB9O1xuICAgIHJldHVybiBCdXJnZXI7XG59KCkpO1xuZXhwb3J0cy5CdXJnZXIgPSBCdXJnZXI7XG4iLCJpbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4vQ2FsZW5kYXInO1xuXG4kKCcuanMtZGF0ZXBpY2tlci1jb250YWluZXInKS5lYWNoKChfLCBlbGVtZW50KSA9PiB7XG4gIG5ldyBDYWxlbmRhcigkKGVsZW1lbnQpKTtcbn0pO1xuIiwicmVxdWlyZSgnLi9kYXRlcGlja2VyJyk7XHJcbnJlcXVpcmUoJy4vYm9keScpO1xyXG5yZXF1aXJlKCcuL25hdmlnYXRpb24nKTtcclxucmVxdWlyZSgnLi90aW1lcGlja2VyJyk7IiwiOyhmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgVkVSU0lPTiA9ICcyLjIuMycsXHJcbiAgICAgICAgcGx1Z2luTmFtZSA9ICdkYXRlcGlja2VyJyxcclxuICAgICAgICBhdXRvSW5pdFNlbGVjdG9yID0gJy5kYXRlcGlja2VyLWhlcmUnLFxyXG4gICAgICAgICRib2R5LCAkZGF0ZXBpY2tlcnNDb250YWluZXIsXHJcbiAgICAgICAgY29udGFpbmVyQnVpbHQgPSBmYWxzZSxcclxuICAgICAgICBiYXNlVGVtcGxhdGUgPSAnJyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlclwiPicgK1xyXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJkYXRlcGlja2VyLS1wb2ludGVyXCI+PC9pPicgK1xyXG4gICAgICAgICAgICAnPG5hdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdlwiPjwvbmF2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWNvbnRlbnRcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicsXHJcbiAgICAgICAgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAgIGNsYXNzZXM6ICcnLFxyXG4gICAgICAgICAgICBpbmxpbmU6IGZhbHNlLFxyXG4gICAgICAgICAgICBsYW5ndWFnZTogJ3J1JyxcclxuICAgICAgICAgICAgc3RhcnREYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICBmaXJzdERheTogJycsXHJcbiAgICAgICAgICAgIHdlZWtlbmRzOiBbNiwgMF0sXHJcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6ICcnLFxyXG4gICAgICAgICAgICBhbHRGaWVsZDogJycsXHJcbiAgICAgICAgICAgIGFsdEZpZWxkRGF0ZUZvcm1hdDogJ0AnLFxyXG4gICAgICAgICAgICB0b2dnbGVTZWxlY3RlZDogdHJ1ZSxcclxuICAgICAgICAgICAga2V5Ym9hcmROYXY6IHRydWUsXHJcblxyXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbSBsZWZ0JyxcclxuICAgICAgICAgICAgb2Zmc2V0OiAxMixcclxuXHJcbiAgICAgICAgICAgIHZpZXc6ICdkYXlzJyxcclxuICAgICAgICAgICAgbWluVmlldzogJ2RheXMnLFxyXG5cclxuICAgICAgICAgICAgc2hvd090aGVyTW9udGhzOiB0cnVlLFxyXG4gICAgICAgICAgICBzZWxlY3RPdGhlck1vbnRoczogdHJ1ZSxcclxuICAgICAgICAgICAgbW92ZVRvT3RoZXJNb250aHNPblNlbGVjdDogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIHNob3dPdGhlclllYXJzOiB0cnVlLFxyXG4gICAgICAgICAgICBzZWxlY3RPdGhlclllYXJzOiB0cnVlLFxyXG4gICAgICAgICAgICBtb3ZlVG9PdGhlclllYXJzT25TZWxlY3Q6IHRydWUsXHJcblxyXG4gICAgICAgICAgICBtaW5EYXRlOiAnJyxcclxuICAgICAgICAgICAgbWF4RGF0ZTogJycsXHJcbiAgICAgICAgICAgIGRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZTogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIG11bHRpcGxlRGF0ZXM6IGZhbHNlLCAvLyBCb29sZWFuIG9yIE51bWJlclxyXG4gICAgICAgICAgICBtdWx0aXBsZURhdGVzU2VwYXJhdG9yOiAnLCcsXHJcbiAgICAgICAgICAgIHJhbmdlOiBmYWxzZSxcclxuXHJcbiAgICAgICAgICAgIHRvZGF5QnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xlYXJCdXR0b246IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgc2hvd0V2ZW50OiAnZm9jdXMnLFxyXG4gICAgICAgICAgICBhdXRvQ2xvc2U6IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgLy8gbmF2aWdhdGlvblxyXG4gICAgICAgICAgICBtb250aHNGaWVsZDogJ21vbnRoc1Nob3J0JyxcclxuICAgICAgICAgICAgcHJldkh0bWw6ICc8c3ZnPjxwYXRoIGQ9XCJNIDE3LDEyIGwgLTUsNSBsIDUsNVwiPjwvcGF0aD48L3N2Zz4nLFxyXG4gICAgICAgICAgICBuZXh0SHRtbDogJzxzdmc+PHBhdGggZD1cIk0gMTQsMTIgbCA1LDUgbCAtNSw1XCI+PC9wYXRoPjwvc3ZnPicsXHJcbiAgICAgICAgICAgIG5hdlRpdGxlczoge1xyXG4gICAgICAgICAgICAgICAgZGF5czogJ01NLCA8aT55eXl5PC9pPicsXHJcbiAgICAgICAgICAgICAgICBtb250aHM6ICd5eXl5JyxcclxuICAgICAgICAgICAgICAgIHllYXJzOiAneXl5eTEgLSB5eXl5MidcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8vIHRpbWVwaWNrZXJcclxuICAgICAgICAgICAgdGltZXBpY2tlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIG9ubHlUaW1lcGlja2VyOiBmYWxzZSxcclxuICAgICAgICAgICAgZGF0ZVRpbWVTZXBhcmF0b3I6ICcgJyxcclxuICAgICAgICAgICAgdGltZUZvcm1hdDogJycsXHJcbiAgICAgICAgICAgIG1pbkhvdXJzOiAwLFxyXG4gICAgICAgICAgICBtYXhIb3VyczogMjQsXHJcbiAgICAgICAgICAgIG1pbk1pbnV0ZXM6IDAsXHJcbiAgICAgICAgICAgIG1heE1pbnV0ZXM6IDU5LFxyXG4gICAgICAgICAgICBob3Vyc1N0ZXA6IDEsXHJcbiAgICAgICAgICAgIG1pbnV0ZXNTdGVwOiAxLFxyXG5cclxuICAgICAgICAgICAgLy8gZXZlbnRzXHJcbiAgICAgICAgICAgIG9uU2VsZWN0OiAnJyxcclxuICAgICAgICAgICAgb25TaG93OiAnJyxcclxuICAgICAgICAgICAgb25IaWRlOiAnJyxcclxuICAgICAgICAgICAgb25DaGFuZ2VNb250aDogJycsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlWWVhcjogJycsXHJcbiAgICAgICAgICAgIG9uQ2hhbmdlRGVjYWRlOiAnJyxcclxuICAgICAgICAgICAgb25DaGFuZ2VWaWV3OiAnJyxcclxuICAgICAgICAgICAgb25SZW5kZXJDZWxsOiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaG90S2V5cyA9IHtcclxuICAgICAgICAgICAgJ2N0cmxSaWdodCc6IFsxNywgMzldLFxyXG4gICAgICAgICAgICAnY3RybFVwJzogWzE3LCAzOF0sXHJcbiAgICAgICAgICAgICdjdHJsTGVmdCc6IFsxNywgMzddLFxyXG4gICAgICAgICAgICAnY3RybERvd24nOiBbMTcsIDQwXSxcclxuICAgICAgICAgICAgJ3NoaWZ0UmlnaHQnOiBbMTYsIDM5XSxcclxuICAgICAgICAgICAgJ3NoaWZ0VXAnOiBbMTYsIDM4XSxcclxuICAgICAgICAgICAgJ3NoaWZ0TGVmdCc6IFsxNiwgMzddLFxyXG4gICAgICAgICAgICAnc2hpZnREb3duJzogWzE2LCA0MF0sXHJcbiAgICAgICAgICAgICdhbHRVcCc6IFsxOCwgMzhdLFxyXG4gICAgICAgICAgICAnYWx0UmlnaHQnOiBbMTgsIDM5XSxcclxuICAgICAgICAgICAgJ2FsdExlZnQnOiBbMTgsIDM3XSxcclxuICAgICAgICAgICAgJ2FsdERvd24nOiBbMTgsIDQwXSxcclxuICAgICAgICAgICAgJ2N0cmxTaGlmdFVwJzogWzE2LCAxNywgMzhdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRlcGlja2VyO1xyXG5cclxuICAgIHZhciBEYXRlcGlja2VyICA9IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuZWwgPSBlbDtcclxuICAgICAgICB0aGlzLiRlbCA9ICQoZWwpO1xyXG5cclxuICAgICAgICB0aGlzLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMsIHRoaXMuJGVsLmRhdGEoKSk7XHJcblxyXG4gICAgICAgIGlmICgkYm9keSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgJGJvZHkgPSAkKCdib2R5Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5zdGFydERhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRzLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5lbC5ub2RlTmFtZSA9PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxJc0lucHV0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuYWx0RmllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy4kYWx0RmllbGQgPSB0eXBlb2YgdGhpcy5vcHRzLmFsdEZpZWxkID09ICdzdHJpbmcnID8gJCh0aGlzLm9wdHMuYWx0RmllbGQpIDogdGhpcy5vcHRzLmFsdEZpZWxkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbml0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlOyAvLyBOZWVkIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcmVuZGVyaW5nXHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudERhdGUgPSB0aGlzLm9wdHMuc3RhcnREYXRlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSB0aGlzLm9wdHMudmlldztcclxuICAgICAgICB0aGlzLl9jcmVhdGVTaG9ydEN1dHMoKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnZpZXdzID0ge307XHJcbiAgICAgICAgdGhpcy5rZXlzID0gW107XHJcbiAgICAgICAgdGhpcy5taW5SYW5nZSA9ICcnO1xyXG4gICAgICAgIHRoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICB0aGlzLl9wcmV2T25TZWxlY3RWYWx1ZSA9ICcnO1xyXG5cclxuICAgICAgICB0aGlzLmluaXQoKVxyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyID0gRGF0ZXBpY2tlcjtcclxuXHJcbiAgICBkYXRlcGlja2VyLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBWRVJTSU9OOiBWRVJTSU9OLFxyXG4gICAgICAgIHZpZXdJbmRleGVzOiBbJ2RheXMnLCAnbW9udGhzJywgJ3llYXJzJ10sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjb250YWluZXJCdWlsdCAmJiAhdGhpcy5vcHRzLmlubGluZSAmJiB0aGlzLmVsSXNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYnVpbGREYXRlcGlja2Vyc0NvbnRhaW5lcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQmFzZUh0bWwoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGVmaW5lTG9jYWxlKHRoaXMub3B0cy5sYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N5bmNXaXRoTWluTWF4RGF0ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsSXNJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMuaW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGV4dHJhIGNsYXNzZXMgZm9yIHByb3BlciB0cmFuc2l0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFBvc2l0aW9uQ2xhc3Nlcyh0aGlzLm9wdHMucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudHMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5rZXlib2FyZE5hdiAmJiAhdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZEtleWJvYXJkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uKCdtb3VzZWRvd24nLCB0aGlzLl9vbk1vdXNlRG93bkRhdGVwaWNrZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwRGF0ZXBpY2tlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5jbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKHRoaXMub3B0cy5jbGFzc2VzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXBpY2tlciA9IG5ldyAkLmZuLmRhdGVwaWNrZXIuVGltZXBpY2tlcih0aGlzLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZFRpbWVwaWNrZXJFdmVudHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5hZGRDbGFzcygnLW9ubHktdGltZXBpY2tlci0nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XSA9IG5ldyAkLmZuLmRhdGVwaWNrZXIuQm9keSh0aGlzLCB0aGlzLmN1cnJlbnRWaWV3LCB0aGlzLm9wdHMpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLnNob3coKTtcclxuICAgICAgICAgICAgdGhpcy5uYXYgPSBuZXcgJC5mbi5kYXRlcGlja2VyLk5hdmlnYXRpb24odGhpcywgdGhpcy5vcHRzKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5jdXJyZW50VmlldztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdjbGlja0NlbGwuYWRwJywgdGhpcy5fb25DbGlja0NlbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub24oJ21vdXNlZW50ZXInLCAnLmRhdGVwaWNrZXItLWNlbGwnLCB0aGlzLl9vbk1vdXNlRW50ZXJDZWxsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLm9uKCdtb3VzZWxlYXZlJywgJy5kYXRlcGlja2VyLS1jZWxsJywgdGhpcy5fb25Nb3VzZUxlYXZlQ2VsbC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY3JlYXRlU2hvcnRDdXRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWluRGF0ZSA9IHRoaXMub3B0cy5taW5EYXRlID8gdGhpcy5vcHRzLm1pbkRhdGUgOiBuZXcgRGF0ZSgtODYzOTk5OTkxMzYwMDAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4RGF0ZSA9IHRoaXMub3B0cy5tYXhEYXRlID8gdGhpcy5vcHRzLm1heERhdGUgOiBuZXcgRGF0ZSg4NjM5OTk5OTEzNjAwMDAwKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZEV2ZW50cyA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24odGhpcy5vcHRzLnNob3dFdmVudCArICcuYWRwJywgdGhpcy5fb25TaG93RXZlbnQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdtb3VzZXVwLmFkcCcsIHRoaXMuX29uTW91c2VVcEVsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbignYmx1ci5hZHAnLCB0aGlzLl9vbkJsdXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdrZXl1cC5hZHAnLCB0aGlzLl9vbktleVVwR2VuZXJhbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuYWRwJywgdGhpcy5fb25SZXNpemUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5vbignbW91c2V1cC5hZHAnLCB0aGlzLl9vbk1vdXNlVXBCb2R5LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kS2V5Ym9hcmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2tleWRvd24uYWRwJywgdGhpcy5fb25LZXlEb3duLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5vbigna2V5dXAuYWRwJywgdGhpcy5fb25LZXlVcC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2hvdEtleS5hZHAnLCB0aGlzLl9vbkhvdEtleS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZFRpbWVwaWNrZXJFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ3RpbWVDaGFuZ2UuYWRwJywgdGhpcy5fb25UaW1lQ2hhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzV2Vla2VuZDogZnVuY3Rpb24gKGRheSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRzLndlZWtlbmRzLmluZGV4T2YoZGF5KSAhPT0gLTE7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2RlZmluZUxvY2FsZTogZnVuY3Rpb24gKGxhbmcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsYW5nID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYyA9ICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZVtsYW5nXTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5sb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NhblxcJ3QgZmluZCBsYW5ndWFnZSBcIicgKyBsYW5nICsgJ1wiIGluIERhdGVwaWNrZXIubGFuZ3VhZ2UsIHdpbGwgdXNlIFwicnVcIiBpbnN0ZWFkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlLnJ1KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubG9jID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZS5ydSwgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlW2xhbmddKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJC5mbi5kYXRlcGlja2VyLmxhbmd1YWdlLnJ1LCBsYW5nKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmRhdGVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLmRhdGVGb3JtYXQgPSB0aGlzLm9wdHMuZGF0ZUZvcm1hdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jLnRpbWVGb3JtYXQgPSB0aGlzLm9wdHMudGltZUZvcm1hdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmZpcnN0RGF5ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MuZmlyc3REYXkgPSB0aGlzLm9wdHMuZmlyc3REYXlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy5kYXRlRm9ybWF0ID0gW3RoaXMubG9jLmRhdGVGb3JtYXQsIHRoaXMubG9jLnRpbWVGb3JtYXRdLmpvaW4odGhpcy5vcHRzLmRhdGVUaW1lU2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2MuZGF0ZUZvcm1hdCA9IHRoaXMubG9jLnRpbWVGb3JtYXQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBib3VuZGFyeSA9IHRoaXMuX2dldFdvcmRCb3VuZGFyeVJlZ0V4cDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubG9jLnRpbWVGb3JtYXQubWF0Y2goYm91bmRhcnkoJ2FhJykpIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYy50aW1lRm9ybWF0Lm1hdGNoKGJvdW5kYXJ5KCdBQScpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgdGhpcy5hbXBtID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZERhdGVwaWNrZXJzQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckJ1aWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgJGJvZHkuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlcnMtY29udGFpbmVyXCIgaWQ9XCJkYXRlcGlja2Vycy1jb250YWluZXJcIj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgJGRhdGVwaWNrZXJzQ29udGFpbmVyID0gJCgnI2RhdGVwaWNrZXJzLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idWlsZEJhc2VIdG1sOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciAkYXBwZW5kVGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgJGlubGluZSA9ICQoJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWlubGluZVwiPicpO1xyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5lbC5ub2RlTmFtZSA9PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5pbmxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkYXBwZW5kVGFyZ2V0ID0gJGRhdGVwaWNrZXJzQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkYXBwZW5kVGFyZ2V0ID0gJGlubGluZS5pbnNlcnRBZnRlcih0aGlzLiRlbClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRhcHBlbmRUYXJnZXQgPSAkaW5saW5lLmFwcGVuZFRvKHRoaXMuJGVsKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyID0gJChiYXNlVGVtcGxhdGUpLmFwcGVuZFRvKCRhcHBlbmRUYXJnZXQpO1xyXG4gICAgICAgICAgICB0aGlzLiRjb250ZW50ID0gJCgnLmRhdGVwaWNrZXItLWNvbnRlbnQnLCB0aGlzLiRkYXRlcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kbmF2ID0gJCgnLmRhdGVwaWNrZXItLW5hdicsIHRoaXMuJGRhdGVwaWNrZXIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF90cmlnZ2VyT25DaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGZyb20gdHJpZ2dlcmluZyBtdWx0aXBsZSBvblNlbGVjdCBjYWxsYmFjayB3aXRoIHNhbWUgYXJndW1lbnQgKGVtcHR5IHN0cmluZykgaW4gSUUxMC0xMVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ByZXZPblNlbGVjdFZhbHVlID09PSAnJykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldk9uU2VsZWN0VmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdHMub25TZWxlY3QoJycsICcnLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZXMgPSB0aGlzLnNlbGVjdGVkRGF0ZXMsXHJcbiAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShzZWxlY3RlZERhdGVzWzBdKSxcclxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZERhdGVzLFxyXG4gICAgICAgICAgICAgICAgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgZGF0ZXMgPSBuZXcgRGF0ZShcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRTZWxlY3RlZC55ZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkLm1vbnRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFNlbGVjdGVkLmRhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQuaG91cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkU2VsZWN0ZWQubWludXRlc1xyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWREYXRlcyA9IHNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdERhdGUoX3RoaXMubG9jLmRhdGVGb3JtYXQsIGRhdGUpXHJcbiAgICAgICAgICAgICAgICB9KS5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgZGF0ZXMgYXJyYXksIHRvIHNlcGFyYXRlIGl0IGZyb20gb3JpZ2luYWwgc2VsZWN0ZWREYXRlc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm11bHRpcGxlRGF0ZXMgfHwgdGhpcy5vcHRzLnJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlcyA9IHNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUueWVhcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZS5tb250aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZS5kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlLmhvdXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlLm1pbnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fcHJldk9uU2VsZWN0VmFsdWUgPSBmb3JtYXR0ZWREYXRlcztcclxuICAgICAgICAgICAgdGhpcy5vcHRzLm9uU2VsZWN0KGZvcm1hdHRlZERhdGVzLCBkYXRlcywgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZCA9IHRoaXMucGFyc2VkRGF0ZSxcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLm9wdHM7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy52aWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXlzJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGggKyAxLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZU1vbnRoKSBvLm9uQ2hhbmdlTW9udGgodGhpcy5wYXJzZWREYXRlLm1vbnRoLCB0aGlzLnBhcnNlZERhdGUueWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aHMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciArIDEsIGQubW9udGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlWWVhcikgby5vbkNoYW5nZVllYXIodGhpcy5wYXJzZWREYXRlLnllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcnMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciArIDEwLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5vbkNoYW5nZURlY2FkZSkgby5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwcmV2OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0cztcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCAtIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlTW9udGgpIG8ub25DaGFuZ2VNb250aCh0aGlzLnBhcnNlZERhdGUubW9udGgsIHRoaXMucGFyc2VkRGF0ZS55ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRocyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyIC0gMSwgZC5tb250aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ub25DaGFuZ2VZZWFyKSBvLm9uQ2hhbmdlWWVhcih0aGlzLnBhcnNlZERhdGUueWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFycyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZC55ZWFyIC0gMTAsIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9uQ2hhbmdlRGVjYWRlKSBvLm9uQ2hhbmdlRGVjYWRlKHRoaXMuY3VyRGVjYWRlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZvcm1hdERhdGU6IGZ1bmN0aW9uIChzdHJpbmcsIGRhdGUpIHtcclxuICAgICAgICAgICAgZGF0ZSA9IGRhdGUgfHwgdGhpcy5kYXRlO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgYm91bmRhcnkgPSB0aGlzLl9nZXRXb3JkQm91bmRhcnlSZWdFeHAsXHJcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSB0aGlzLmxvYyxcclxuICAgICAgICAgICAgICAgIGxlYWRpbmdaZXJvID0gZGF0ZXBpY2tlci5nZXRMZWFkaW5nWmVyb051bSxcclxuICAgICAgICAgICAgICAgIGRlY2FkZSA9IGRhdGVwaWNrZXIuZ2V0RGVjYWRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlKSxcclxuICAgICAgICAgICAgICAgIGZ1bGxIb3VycyA9IGQuZnVsbEhvdXJzLFxyXG4gICAgICAgICAgICAgICAgaG91cnMgPSBkLmhvdXJzLFxyXG4gICAgICAgICAgICAgICAgYW1wbSA9IHN0cmluZy5tYXRjaChib3VuZGFyeSgnYWEnKSkgfHwgc3RyaW5nLm1hdGNoKGJvdW5kYXJ5KCdBQScpKSxcclxuICAgICAgICAgICAgICAgIGRheVBlcmlvZCA9ICdhbScsXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlciA9IHRoaXMuX3JlcGxhY2VyLFxyXG4gICAgICAgICAgICAgICAgdmFsaWRIb3VycztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudGltZXBpY2tlciAmJiB0aGlzLnRpbWVwaWNrZXIgJiYgYW1wbSkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRIb3VycyA9IHRoaXMudGltZXBpY2tlci5fZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlKGRhdGUsIGFtcG0pO1xyXG4gICAgICAgICAgICAgICAgZnVsbEhvdXJzID0gbGVhZGluZ1plcm8odmFsaWRIb3Vycy5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICBob3VycyA9IHZhbGlkSG91cnMuaG91cnM7XHJcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2QgPSB2YWxpZEhvdXJzLmRheVBlcmlvZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9ALy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL0AvLCBkYXRlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9hYS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2FhJyksIGRheVBlcmlvZCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9BQS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ0FBJyksIGRheVBlcmlvZC50b1VwcGVyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2RkLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnZGQnKSwgZC5mdWxsRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9kLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnZCcpLCBkLmRhdGUpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvREQvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdERCcpLCBsb2NhbGUuZGF5c1tkLmRheV0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvRC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ0QnKSwgbG9jYWxlLmRheXNTaG9ydFtkLmRheV0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvbW0vLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdtbScpLCBkLmZ1bGxNb250aCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9tLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnbScpLCBkLm1vbnRoICsgMSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9NTS8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ01NJyksIHRoaXMubG9jLm1vbnRoc1tkLm1vbnRoXSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9NLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnTScpLCBsb2NhbGUubW9udGhzU2hvcnRbZC5tb250aF0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAvaWkvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdpaScpLCBkLmZ1bGxNaW51dGVzKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgL2kvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCdpJyksIGQubWludXRlcyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9oaC8udGVzdChyZXN1bHQpOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlcGxhY2VyKHJlc3VsdCwgYm91bmRhcnkoJ2hoJyksIGZ1bGxIb3Vycyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC9oLy50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgnaCcpLCBob3Vycyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIC95eXl5Ly50ZXN0KHJlc3VsdCk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVwbGFjZXIocmVzdWx0LCBib3VuZGFyeSgneXl5eScpLCBkLnllYXIpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAveXl5eTEvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCd5eXl5MScpLCBkZWNhZGVbMF0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAveXl5eTIvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCd5eXl5MicpLCBkZWNhZGVbMV0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAveXkvLnRlc3QocmVzdWx0KTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXBsYWNlcihyZXN1bHQsIGJvdW5kYXJ5KCd5eScpLCBkLnllYXIudG9TdHJpbmcoKS5zbGljZSgtMikpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZXBsYWNlcjogZnVuY3Rpb24gKHN0ciwgcmVnLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZShyZWcsIGZ1bmN0aW9uIChtYXRjaCwgcDEscDIscDMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwMSArIGRhdGEgKyBwMztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0V29yZEJvdW5kYXJ5UmVnRXhwOiBmdW5jdGlvbiAoc2lnbikge1xyXG4gICAgICAgICAgICB2YXIgc3ltYm9scyA9ICdcXFxcc3xcXFxcLnwtfC98XFxcXFxcXFx8LHxcXFxcJHxcXFxcIXxcXFxcP3w6fDsnO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJyhefD58JyArIHN5bWJvbHMgKyAnKSgnICsgc2lnbiArICcpKCR8PHwnICsgc3ltYm9scyArICcpJywgJ2cnKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgc2VsZWN0RGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSBfdGhpcy5vcHRzLFxyXG4gICAgICAgICAgICAgICAgZCA9IF90aGlzLnBhcnNlZERhdGUsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGVzID0gX3RoaXMuc2VsZWN0ZWREYXRlcyxcclxuICAgICAgICAgICAgICAgIGxlbiA9IHNlbGVjdGVkRGF0ZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgbmV3RGF0ZSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdERhdGUoZClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGFzdFNlbGVjdGVkRGF0ZSA9IGRhdGU7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgbmV3IHRpbWUgdmFsdWVzIGZyb20gRGF0ZVxyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIuX3NldFRpbWUoZGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE9uIHRoaXMgc3RlcCB0aW1lcGlja2VyIHdpbGwgc2V0IHZhbGlkIHZhbHVlcyBpbiBpdCdzIGluc3RhbmNlXHJcbiAgICAgICAgICAgIF90aGlzLl90cmlnZ2VyKCdzZWxlY3REYXRlJywgZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgY29ycmVjdCB0aW1lIHZhbHVlcyBhZnRlciB0aW1lcGlja2VyJ3MgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAvLyBQcmV2ZW50IGZyb20gc2V0dGluZyBob3VycyBvciBtaW51dGVzIHdoaWNoIHZhbHVlcyBhcmUgbGVzc2VyIHRoZW4gYG1pbmAgdmFsdWUgb3JcclxuICAgICAgICAgICAgLy8gZ3JlYXRlciB0aGVuIGBtYXhgIHZhbHVlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGUuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKTtcclxuICAgICAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKF90aGlzLnZpZXcgPT0gJ2RheXMnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXRNb250aCgpICE9IGQubW9udGggJiYgb3B0cy5tb3ZlVG9PdGhlck1vbnRoc09uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKF90aGlzLnZpZXcgPT0gJ3llYXJzJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0RnVsbFllYXIoKSAhPSBkLnllYXIgJiYgb3B0cy5tb3ZlVG9PdGhlclllYXJzT25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0RhdGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNpbGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kYXRlID0gbmV3RGF0ZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNpbGVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubmF2Ll9yZW5kZXIoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5tdWx0aXBsZURhdGVzICYmICFvcHRzLnJhbmdlKSB7IC8vIFNldCBwcmlvcml0eSB0byByYW5nZSBmdW5jdGlvbmFsaXR5XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09PSBvcHRzLm11bHRpcGxlRGF0ZXMpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX2lzU2VsZWN0ZWQoZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzLnB1c2goZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtkYXRlXTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzLnB1c2goZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5tYXhSYW5nZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1heFJhbmdlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN3YXAgZGF0ZXMgaWYgdGhleSB3ZXJlIHNlbGVjdGVkIHZpYSBkcC5zZWxlY3REYXRlKCkgYW5kIHNlY29uZCBkYXRlIHdhcyBzbWFsbGVyIHRoZW4gZmlyc3RcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5iaWdnZXIoX3RoaXMubWF4UmFuZ2UsIF90aGlzLm1pblJhbmdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5tYXhSYW5nZSA9IF90aGlzLm1pblJhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkRGF0ZXMgPSBbX3RoaXMubWluUmFuZ2UsIF90aGlzLm1heFJhbmdlXVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtkYXRlXTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5taW5SYW5nZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RlZERhdGVzID0gW2RhdGVdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMub25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl90cmlnZ2VyT25DaGFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMuYXV0b0Nsb3NlICYmICF0aGlzLnRpbWVwaWNrZXJJc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRzLm11bHRpcGxlRGF0ZXMgJiYgIW9wdHMucmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMucmFuZ2UgJiYgX3RoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3RoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZERhdGVzLFxyXG4gICAgICAgICAgICAgICAgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQuc29tZShmdW5jdGlvbiAoY3VyRGF0ZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGVwaWNrZXIuaXNTYW1lKGN1ckRhdGUsIGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQuc3BsaWNlKGksIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxhc3RTZWxlY3RlZERhdGUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sYXN0U2VsZWN0ZWREYXRlID0gX3RoaXMuc2VsZWN0ZWREYXRlc1tfdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlld3NbX3RoaXMuY3VycmVudFZpZXddLl9yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0cy5vblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZGF5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5vcHRzLm1pblZpZXc7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRvZGF5QnV0dG9uIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMub3B0cy50b2RheUJ1dHRvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldElucHV0VmFsdWUoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgZGF0ZXBpY2tlciBvcHRpb25zXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBwYXJhbSAtIHBhcmFtZXRlcidzIG5hbWUgdG8gdXBkYXRlLiBJZiBvYmplY3QgdGhlbiBpdCB3aWxsIGV4dGVuZCBjdXJyZW50IG9wdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8T2JqZWN0fSBbdmFsdWVdIC0gbmV3IHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAocGFyYW0sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgbGFzdFNlbGVjdGVkRGF0ZSA9IHRoaXMubGFzdFNlbGVjdGVkRGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZW4gPT0gMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRzW3BhcmFtXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxlbiA9PSAxICYmIHR5cGVvZiBwYXJhbSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRzID0gJC5leHRlbmQodHJ1ZSwgdGhpcy5vcHRzLCBwYXJhbSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlU2hvcnRDdXRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N5bmNXaXRoTWluTWF4RGF0ZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGVmaW5lTG9jYWxlKHRoaXMub3B0cy5sYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMubmF2Ll9hZGRCdXR0b25zSWZOZWVkKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB0aGlzLm5hdi5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxJc0lucHV0ICYmICF0aGlzLm9wdHMuaW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRQb3NpdGlvbkNsYXNzZXModGhpcy5vcHRzLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMub3B0cy5wb3NpdGlvbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5jbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKHRoaXMub3B0cy5jbGFzc2VzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKCctb25seS10aW1lcGlja2VyLScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0U2VsZWN0ZWREYXRlKSB0aGlzLnRpbWVwaWNrZXIuX2hhbmRsZURhdGUobGFzdFNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVwaWNrZXIuX3VwZGF0ZVJhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLl91cGRhdGVDdXJyZW50VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hhbmdlIGhvdXJzIGFuZCBtaW51dGVzIGlmIGl0J3MgdmFsdWVzIGhhdmUgYmVlbiBjaGFuZ2VkIHRocm91Z2ggbWluL21heCBob3Vycy9taW51dGVzXHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdFNlbGVjdGVkRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZWxlY3RlZERhdGUuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0U2VsZWN0ZWREYXRlLnNldE1pbnV0ZXModGhpcy50aW1lcGlja2VyLm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRJbnB1dFZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc3luY1dpdGhNaW5NYXhEYXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY3VyVGltZSA9IHRoaXMuZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWluVGltZSA+IGN1clRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHRoaXMubWluRGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWF4VGltZSA8IGN1clRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHRoaXMubWF4RGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9pc1NlbGVjdGVkOiBmdW5jdGlvbiAoY2hlY2tEYXRlLCBjZWxsVHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcy5zb21lKGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5pc1NhbWUoZGF0ZSwgY2hlY2tEYXRlLCBjZWxsVHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0SW5wdXRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgb3B0cyA9IF90aGlzLm9wdHMsXHJcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBfdGhpcy5sb2MuZGF0ZUZvcm1hdCxcclxuICAgICAgICAgICAgICAgIGFsdEZvcm1hdCA9IG9wdHMuYWx0RmllbGREYXRlRm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBfdGhpcy5zZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mb3JtYXREYXRlKGZvcm1hdCwgZGF0ZSlcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgYWx0VmFsdWVzO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMuYWx0RmllbGQgJiYgX3RoaXMuJGFsdEZpZWxkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgYWx0VmFsdWVzID0gdGhpcy5zZWxlY3RlZERhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mb3JtYXREYXRlKGFsdEZvcm1hdCwgZGF0ZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYWx0VmFsdWVzID0gYWx0VmFsdWVzLmpvaW4odGhpcy5vcHRzLm11bHRpcGxlRGF0ZXNTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYWx0RmllbGQudmFsKGFsdFZhbHVlcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuam9pbih0aGlzLm9wdHMubXVsdGlwbGVEYXRlc1NlcGFyYXRvcik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRlbC52YWwodmFsdWUpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2sgaWYgZGF0ZSBpcyBiZXR3ZWVuIG1pbkRhdGUgYW5kIG1heERhdGVcclxuICAgICAgICAgKiBAcGFyYW0gZGF0ZSB7b2JqZWN0fSAtIGRhdGUgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gLSBjZWxsIHR5cGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pc0luUmFuZ2U6IGZ1bmN0aW9uIChkYXRlLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHZhciB0aW1lID0gZGF0ZS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICBkID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgbWluID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKHRoaXMubWluRGF0ZSksXHJcbiAgICAgICAgICAgICAgICBtYXggPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5tYXhEYXRlKSxcclxuICAgICAgICAgICAgICAgIGRNaW5UaW1lID0gbmV3IERhdGUoZC55ZWFyLCBkLm1vbnRoLCBtaW4uZGF0ZSkuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgZE1heFRpbWUgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGgsIG1heC5kYXRlKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICB0eXBlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXk6IHRpbWUgPj0gdGhpcy5taW5UaW1lICYmIHRpbWUgPD0gdGhpcy5tYXhUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiBkTWluVGltZSA+PSB0aGlzLm1pblRpbWUgJiYgZE1heFRpbWUgPD0gdGhpcy5tYXhUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IGQueWVhciA+PSBtaW4ueWVhciAmJiBkLnllYXIgPD0gbWF4LnllYXJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlID8gdHlwZXNbdHlwZV0gOiB0eXBlcy5kYXlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0RGltZW5zaW9uczogZnVuY3Rpb24gKCRlbCkge1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJGVsLm9mZnNldCgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAkZWwub3V0ZXJXaWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAkZWwub3V0ZXJIZWlnaHQoKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0RGF0ZUZyb21DZWxsOiBmdW5jdGlvbiAoY2VsbCkge1xyXG4gICAgICAgICAgICB2YXIgY3VyRGF0ZSA9IHRoaXMucGFyc2VkRGF0ZSxcclxuICAgICAgICAgICAgICAgIHllYXIgPSBjZWxsLmRhdGEoJ3llYXInKSB8fCBjdXJEYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IGNlbGwuZGF0YSgnbW9udGgnKSA9PSB1bmRlZmluZWQgPyBjdXJEYXRlLm1vbnRoIDogY2VsbC5kYXRhKCdtb250aCcpLFxyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IGNlbGwuZGF0YSgnZGF0ZScpIHx8IDE7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRQb3NpdGlvbkNsYXNzZXM6IGZ1bmN0aW9uIChwb3MpIHtcclxuICAgICAgICAgICAgcG9zID0gcG9zLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHZhciBtYWluID0gcG9zWzBdLFxyXG4gICAgICAgICAgICAgICAgc2VjID0gcG9zWzFdLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlcyA9ICdkYXRlcGlja2VyIC0nICsgbWFpbiArICctJyArIHNlYyArICctIC1mcm9tLScgKyBtYWluICsgJy0nO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZSkgY2xhc3NlcyArPSAnIGFjdGl2ZSc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignY2xhc3MnKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGNsYXNzZXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldFBvc2l0aW9uOiBmdW5jdGlvbiAocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCB0aGlzLm9wdHMucG9zaXRpb247XHJcblxyXG4gICAgICAgICAgICB2YXIgZGltcyA9IHRoaXMuX2dldERpbWVuc2lvbnModGhpcy4kZWwpLFxyXG4gICAgICAgICAgICAgICAgc2VsZkRpbXMgPSB0aGlzLl9nZXREaW1lbnNpb25zKHRoaXMuJGRhdGVwaWNrZXIpLFxyXG4gICAgICAgICAgICAgICAgcG9zID0gcG9zaXRpb24uc3BsaXQoJyAnKSxcclxuICAgICAgICAgICAgICAgIHRvcCwgbGVmdCxcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMub3B0cy5vZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBtYWluID0gcG9zWzBdLFxyXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5ID0gcG9zWzFdO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChtYWluKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wIC0gc2VsZkRpbXMuaGVpZ2h0IC0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBkaW1zLmxlZnQgKyBkaW1zLndpZHRoICsgb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBkaW1zLnRvcCArIGRpbXMuaGVpZ2h0ICsgb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGRpbXMubGVmdCAtIHNlbGZEaW1zLndpZHRoIC0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2goc2Vjb25kYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBkaW1zLmxlZnQgKyBkaW1zLndpZHRoIC0gc2VsZkRpbXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IGRpbXMudG9wICsgZGltcy5oZWlnaHQgLSBzZWxmRGltcy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gZGltcy5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL2xlZnR8cmlnaHQvLnRlc3QobWFpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gZGltcy50b3AgKyBkaW1zLmhlaWdodC8yIC0gc2VsZkRpbXMuaGVpZ2h0LzI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGRpbXMubGVmdCArIGRpbXMud2lkdGgvMiAtIHNlbGZEaW1zLndpZHRoLzI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRkYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdG9wXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9uU2hvdyA9IHRoaXMub3B0cy5vblNob3c7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHRoaXMub3B0cy5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9uU2hvdykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZFZpc2lvbkV2ZW50cyhvblNob3cpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvbkhpZGUgPSB0aGlzLm9wdHMub25IaWRlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJy0xMDAwMDBweCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMua2V5cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbkZvY3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5ibHVyKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob25IaWRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVmlzaW9uRXZlbnRzKG9uSGlkZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRvd246IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZVZpZXcoZGF0ZSwgJ2Rvd24nKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlVmlldyhkYXRlLCAndXAnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZFZpc2lvbkV2ZW50czogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGRhdGVwaWNrZXIub2ZmKCd0cmFuc2l0aW9uZW5kLmRwJyk7XHJcbiAgICAgICAgICAgIGV2ZW50KHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy4kZGF0ZXBpY2tlci5vbmUoJ3RyYW5zaXRpb25lbmQuZHAnLCBldmVudC5iaW5kKHRoaXMsIHRoaXMsIHRydWUpKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jaGFuZ2VWaWV3OiBmdW5jdGlvbiAoZGF0ZSwgZGlyKSB7XHJcbiAgICAgICAgICAgIGRhdGUgPSBkYXRlIHx8IHRoaXMuZm9jdXNlZCB8fCB0aGlzLmRhdGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV4dFZpZXcgPSBkaXIgPT0gJ3VwJyA/IHRoaXMudmlld0luZGV4ICsgMSA6IHRoaXMudmlld0luZGV4IC0gMTtcclxuICAgICAgICAgICAgaWYgKG5leHRWaWV3ID4gMikgbmV4dFZpZXcgPSAyO1xyXG4gICAgICAgICAgICBpZiAobmV4dFZpZXcgPCAwKSBuZXh0VmlldyA9IDA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5zaWxlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy52aWV3SW5kZXhlc1tuZXh0Vmlld107XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9oYW5kbGVIb3RLZXk6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5fZ2V0Rm9jdXNlZERhdGUoKSksXHJcbiAgICAgICAgICAgICAgICBmb2N1c2VkUGFyc2VkLFxyXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0cyxcclxuICAgICAgICAgICAgICAgIG5ld0RhdGUsXHJcbiAgICAgICAgICAgICAgICB0b3RhbERheXNJbk5leHRNb250aCxcclxuICAgICAgICAgICAgICAgIG1vbnRoQ2hhbmdlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgeWVhckNoYW5nZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRlY2FkZUNoYW5nZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHkgPSBkYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICBtID0gZGF0ZS5tb250aCxcclxuICAgICAgICAgICAgICAgIGQgPSBkYXRlLmRhdGU7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3RybFJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2N0cmxVcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbSArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsTGVmdCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsRG93bic6XHJcbiAgICAgICAgICAgICAgICAgICAgbSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzaGlmdFJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NoaWZ0VXAnOlxyXG4gICAgICAgICAgICAgICAgICAgIHllYXJDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB5ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzaGlmdExlZnQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2hpZnREb3duJzpcclxuICAgICAgICAgICAgICAgICAgICB5ZWFyQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgeSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWx0UmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWx0VXAnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRlY2FkZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgKz0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbHRMZWZ0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FsdERvd24nOlxyXG4gICAgICAgICAgICAgICAgICAgIGRlY2FkZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgLT0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjdHJsU2hpZnRVcCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b3RhbERheXNJbk5leHRNb250aCA9IGRhdGVwaWNrZXIuZ2V0RGF5c0NvdW50KG5ldyBEYXRlKHksbSkpO1xyXG4gICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoeSxtLGQpO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgbmV4dCBtb250aCBoYXMgbGVzcyBkYXlzIHRoYW4gY3VycmVudCwgc2V0IGRhdGUgdG8gdG90YWwgZGF5cyBpbiB0aGF0IG1vbnRoXHJcbiAgICAgICAgICAgIGlmICh0b3RhbERheXNJbk5leHRNb250aCA8IGQpIGQgPSB0b3RhbERheXNJbk5leHRNb250aDtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIG5ld0RhdGUgaXMgaW4gdmFsaWQgcmFuZ2VcclxuICAgICAgICAgICAgaWYgKG5ld0RhdGUuZ2V0VGltZSgpIDwgdGhpcy5taW5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5taW5EYXRlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld0RhdGUuZ2V0VGltZSgpID4gdGhpcy5tYXhUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tYXhEYXRlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSBuZXdEYXRlO1xyXG5cclxuICAgICAgICAgICAgZm9jdXNlZFBhcnNlZCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShuZXdEYXRlKTtcclxuICAgICAgICAgICAgaWYgKG1vbnRoQ2hhbmdlZCAmJiBvLm9uQ2hhbmdlTW9udGgpIHtcclxuICAgICAgICAgICAgICAgIG8ub25DaGFuZ2VNb250aChmb2N1c2VkUGFyc2VkLm1vbnRoLCBmb2N1c2VkUGFyc2VkLnllYXIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHllYXJDaGFuZ2VkICYmIG8ub25DaGFuZ2VZZWFyKSB7XHJcbiAgICAgICAgICAgICAgICBvLm9uQ2hhbmdlWWVhcihmb2N1c2VkUGFyc2VkLnllYXIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRlY2FkZUNoYW5nZWQgJiYgby5vbkNoYW5nZURlY2FkZSkge1xyXG4gICAgICAgICAgICAgICAgby5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZWdpc3RlcktleTogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgZXhpc3RzID0gdGhpcy5rZXlzLnNvbWUoZnVuY3Rpb24gKGN1cktleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cktleSA9PSBrZXk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5cy5wdXNoKGtleSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF91blJlZ2lzdGVyS2V5OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmtleXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaXNIb3RLZXlQcmVzc2VkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50SG90S2V5LFxyXG4gICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIF90aGlzID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIHByZXNzZWRLZXlzID0gdGhpcy5rZXlzLnNvcnQoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGhvdEtleSBpbiBob3RLZXlzKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SG90S2V5ID0gaG90S2V5c1tob3RLZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXNzZWRLZXlzLmxlbmd0aCAhPSBjdXJyZW50SG90S2V5Lmxlbmd0aCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRIb3RLZXkuZXZlcnkoZnVuY3Rpb24gKGtleSwgaSkgeyByZXR1cm4ga2V5ID09IHByZXNzZWRLZXlzW2ldfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJpZ2dlcignaG90S2V5JywgaG90S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmb3VuZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdHJpZ2dlcjogZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLnRyaWdnZXIoZXZlbnQsIGFyZ3MpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2ZvY3VzTmV4dENlbGw6IGZ1bmN0aW9uIChrZXlDb2RlLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8IHRoaXMuY2VsbFR5cGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLl9nZXRGb2N1c2VkRGF0ZSgpKSxcclxuICAgICAgICAgICAgICAgIHkgPSBkYXRlLnllYXIsXHJcbiAgICAgICAgICAgICAgICBtID0gZGF0ZS5tb250aCxcclxuICAgICAgICAgICAgICAgIGQgPSBkYXRlLmRhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNIb3RLZXlQcmVzc2VkKCkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2goa2V5Q29kZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ2RheScgPyAoZCAtPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ21vbnRoJyA/IChtIC09IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAneWVhcicgPyAoeSAtPSAxKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzODogLy8gdXBcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdkYXknID8gKGQgLT0gNykgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICdtb250aCcgPyAobSAtPSAzKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT0gJ3llYXInID8gKHkgLT0gNCkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnZGF5JyA/IChkICs9IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnbW9udGgnID8gKG0gKz0gMSkgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICd5ZWFyJyA/ICh5ICs9IDEpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwOiAvLyBkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnZGF5JyA/IChkICs9IDcpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnbW9udGgnID8gKG0gKz0gMykgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09ICd5ZWFyJyA/ICh5ICs9IDQpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBuZCA9IG5ldyBEYXRlKHksbSxkKTtcclxuICAgICAgICAgICAgaWYgKG5kLmdldFRpbWUoKSA8IHRoaXMubWluVGltZSkge1xyXG4gICAgICAgICAgICAgICAgbmQgPSB0aGlzLm1pbkRhdGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmQuZ2V0VGltZSgpID4gdGhpcy5tYXhUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBuZCA9IHRoaXMubWF4RGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gbmQ7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRGb2N1c2VkRGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZm9jdXNlZCAgPSB0aGlzLmZvY3VzZWQgfHwgdGhpcy5zZWxlY3RlZERhdGVzW3RoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxXSxcclxuICAgICAgICAgICAgICAgIGQgPSB0aGlzLnBhcnNlZERhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy52aWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGF5cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBuZXcgRGF0ZShkLnllYXIsIGQubW9udGgsIG5ldyBEYXRlKCkuZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3llYXJzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IG5ldyBEYXRlKGQueWVhciwgMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZm9jdXNlZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0Q2VsbDogZnVuY3Rpb24gKGRhdGUsIHR5cGUpIHtcclxuICAgICAgICAgICAgdHlwZSA9IHR5cGUgfHwgdGhpcy5jZWxsVHlwZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBkID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSAnLmRhdGVwaWNrZXItLWNlbGxbZGF0YS15ZWFyPVwiJyArIGQueWVhciArICdcIl0nLFxyXG4gICAgICAgICAgICAgICAgJGNlbGw7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9ICdbZGF0YS1tb250aD1cIicgKyBkLm1vbnRoICsgJ1wiXSc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yICs9ICdbZGF0YS1tb250aD1cIicgKyBkLm1vbnRoICsgJ1wiXVtkYXRhLWRhdGU9XCInICsgZC5kYXRlICsgJ1wiXSc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJGNlbGwgPSB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLiRlbC5maW5kKHNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAkY2VsbC5sZW5ndGggPyAkY2VsbCA6ICQoJycpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgX3RoaXMuJGVsXHJcbiAgICAgICAgICAgICAgICAub2ZmKCcuYWRwJylcclxuICAgICAgICAgICAgICAgIC5kYXRhKCdkYXRlcGlja2VyJywgJycpO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWREYXRlcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5mb2N1c2VkID0gJyc7XHJcbiAgICAgICAgICAgIF90aGlzLnZpZXdzID0ge307XHJcbiAgICAgICAgICAgIF90aGlzLmtleXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMubWluUmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgX3RoaXMubWF4UmFuZ2UgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRzLmlubGluZSB8fCAhX3RoaXMuZWxJc0lucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy4kZGF0ZXBpY2tlci5jbG9zZXN0KCcuZGF0ZXBpY2tlci1pbmxpbmUnKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLiRkYXRlcGlja2VyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzOiBmdW5jdGlvbiAoYWxyZWFkeVNlbGVjdGVkLCBzZWxlY3RlZERhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMudG9nZ2xlU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgcG9zc2liaWxpdHkgdG8gc2VsZWN0IHNhbWUgZGF0ZSB3aGVuIHJhbmdlIGlzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCAhPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2NsaWNrQ2VsbCcsIHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURhdGUoc2VsZWN0ZWREYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdHMudG9nZ2xlU2VsZWN0ZWQpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEYXRlKHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENoYW5nZSBsYXN0IHNlbGVjdGVkIGRhdGUgdG8gYmUgYWJsZSB0byBjaGFuZ2UgdGltZSB3aGVuIGNsaWNraW5nIG9uIHRoaXMgY2VsbFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0cy50b2dnbGVTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0U2VsZWN0ZWREYXRlID0gYWxyZWFkeVNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLl9zZXRUaW1lKGFscmVhZHlTZWxlY3RlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lcGlja2VyLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uU2hvd0V2ZW50OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25CbHVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pbkZvY3VzICYmIHRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZURvd25EYXRlcGlja2VyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmluRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlVXBEYXRlcGlja2VyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmluRm9jdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmluRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoIWUub3JpZ2luYWxFdmVudC50aW1lcGlja2VyRm9jdXMpIHRoaXMuJGVsLmZvY3VzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uS2V5VXBHZW5lcmFsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gdGhpcy4kZWwudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXZhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uUmVzaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlVXBCb2R5OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50LmluRm9jdXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUgJiYgIXRoaXMuaW5Gb2N1cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Nb3VzZVVwRWw6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5pbkZvY3VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLl9vbktleVVwR2VuZXJhbC5iaW5kKHRoaXMpLDQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbktleURvd246IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gZS53aGljaDtcclxuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJLZXkoY29kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBcnJvd3NcclxuICAgICAgICAgICAgaWYgKGNvZGUgPj0gMzcgJiYgY29kZSA8PSA0MCkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNOZXh0Q2VsbChjb2RlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRW50ZXJcclxuICAgICAgICAgICAgaWYgKGNvZGUgPT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ2V0Q2VsbCh0aGlzLmZvY3VzZWQpLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3ICE9IHRoaXMub3B0cy5taW5WaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bigpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFscmVhZHlTZWxlY3RlZCA9IHRoaXMuX2lzU2VsZWN0ZWQodGhpcy5mb2N1c2VkLCB0aGlzLmNlbGxUeXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxyZWFkeVNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkLnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkLnNldE1pbnV0ZXModGhpcy50aW1lcGlja2VyLm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuZm9jdXNlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMoYWxyZWFkeVNlbGVjdGVkLCB0aGlzLmZvY3VzZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBFc2NcclxuICAgICAgICAgICAgaWYgKGNvZGUgPT0gMjcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uS2V5VXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gZS53aGljaDtcclxuICAgICAgICAgICAgdGhpcy5fdW5SZWdpc3RlcktleShjb2RlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25Ib3RLZXk6IGZ1bmN0aW9uIChlLCBob3RLZXkpIHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlSG90S2V5KGhvdEtleSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VFbnRlckNlbGw6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciAkY2VsbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5kYXRlcGlja2VyLS1jZWxsJyksXHJcbiAgICAgICAgICAgICAgICBkYXRlID0gdGhpcy5fZ2V0RGF0ZUZyb21DZWxsKCRjZWxsKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgZnJvbSB1bm5lY2Vzc2FyeSByZW5kZXJpbmcgYW5kIHNldHRpbmcgbmV3IGN1cnJlbnREYXRlXHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZCA9ICcnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRjZWxsLmFkZENsYXNzKCctZm9jdXMtJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWQgPSBkYXRlO1xyXG4gICAgICAgICAgICB0aGlzLnNpbGVudCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5yYW5nZSAmJiB0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWluUmFuZ2UgPSB0aGlzLnNlbGVjdGVkRGF0ZXNbMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXBpY2tlci5sZXNzKHRoaXMubWluUmFuZ2UsIHRoaXMuZm9jdXNlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gdGhpcy5taW5SYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLl91cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlTGVhdmVDZWxsOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJGNlbGwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuZGF0ZXBpY2tlci0tY2VsbCcpO1xyXG5cclxuICAgICAgICAgICAgJGNlbGwucmVtb3ZlQ2xhc3MoJy1mb2N1cy0nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5mb2N1c2VkID0gJyc7XHJcbiAgICAgICAgICAgIHRoaXMuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uVGltZUNoYW5nZTogZnVuY3Rpb24gKGUsIGgsIG0pIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWREYXRlcyA9IHRoaXMuc2VsZWN0ZWREYXRlcyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWREYXRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzLmxhc3RTZWxlY3RlZERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRhdGUuc2V0SG91cnMoaCk7XHJcbiAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyhtKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWQgJiYgIXRoaXMuX2dldENlbGwoZGF0ZSkuaGFzQ2xhc3MoJy1kaXNhYmxlZC0nKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0SW5wdXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5vblNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJPbkNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQ2xpY2tDZWxsOiBmdW5jdGlvbiAoZSwgZGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcGlja2VyKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlLnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3Vycyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlLnNldE1pbnV0ZXModGhpcy50aW1lcGlja2VyLm1pbnV0ZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZShkYXRlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXQgZm9jdXNlZCh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKCF2YWwgJiYgdGhpcy5mb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGNlbGwgPSB0aGlzLl9nZXRDZWxsKHRoaXMuZm9jdXNlZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRjZWxsLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRjZWxsLnJlbW92ZUNsYXNzKCctZm9jdXMtJylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9mb2N1c2VkID0gdmFsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnJhbmdlICYmIHRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW5SYW5nZSA9IHRoaXMuc2VsZWN0ZWREYXRlc1swXTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWF4UmFuZ2UgPSAnJztcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlcGlja2VyLmxlc3ModGhpcy5taW5SYW5nZSwgdGhpcy5fZm9jdXNlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFJhbmdlID0gdGhpcy5taW5SYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pblJhbmdlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2lsZW50KSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHZhbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgZm9jdXNlZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZvY3VzZWQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IHBhcnNlZERhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5kYXRlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXQgZGF0ZSAodmFsKSB7XHJcbiAgICAgICAgICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIERhdGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gdmFsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGVkICYmICF0aGlzLnNpbGVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1t0aGlzLnZpZXddLl9yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF2Ll9yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUgJiYgdGhpcy5lbElzSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgZGF0ZSAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnREYXRlXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0IHZpZXcgKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdJbmRleCA9IHRoaXMudmlld0luZGV4ZXMuaW5kZXhPZih2YWwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlld0luZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByZXZWaWV3ID0gdGhpcy5jdXJyZW50VmlldztcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IHZhbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluaXRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnZpZXdzW3ZhbF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3ZhbF0gPSBuZXcgICQuZm4uZGF0ZXBpY2tlci5Cb2R5KHRoaXMsIHZhbCwgdGhpcy5vcHRzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdzW3ZhbF0uX3JlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudmlld3NbdGhpcy5wcmV2Vmlld10uaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3c1t2YWxdLnNob3coKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF2Ll9yZW5kZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9uQ2hhbmdlVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5vbkNoYW5nZVZpZXcodmFsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWxJc0lucHV0ICYmIHRoaXMudmlzaWJsZSkgdGhpcy5zZXRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmFsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IHZpZXcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRWaWV3O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBjZWxsVHlwZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlldy5zdWJzdHJpbmcoMCwgdGhpcy52aWV3Lmxlbmd0aCAtIDEpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0IG1pblRpbWUoKSB7XHJcbiAgICAgICAgICAgIHZhciBtaW4gPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUodGhpcy5taW5EYXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG1pbi55ZWFyLCBtaW4ubW9udGgsIG1pbi5kYXRlKS5nZXRUaW1lKClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgbWF4VGltZSgpIHtcclxuICAgICAgICAgICAgdmFyIG1heCA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZSh0aGlzLm1heERhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobWF4LnllYXIsIG1heC5tb250aCwgbWF4LmRhdGUpLmdldFRpbWUoKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBjdXJEZWNhZGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlcGlja2VyLmdldERlY2FkZSh0aGlzLmRhdGUpXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyAgVXRpbHNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBkYXRlcGlja2VyLmdldERheXNDb3VudCA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgICAgICAgbW9udGg6IGRhdGUuZ2V0TW9udGgoKSxcclxuICAgICAgICAgICAgZnVsbE1vbnRoOiAoZGF0ZS5nZXRNb250aCgpICsgMSkgPCAxMCA/ICcwJyArIChkYXRlLmdldE1vbnRoKCkgKyAxKSA6IGRhdGUuZ2V0TW9udGgoKSArIDEsIC8vIE9uZSBiYXNlZFxyXG4gICAgICAgICAgICBkYXRlOiBkYXRlLmdldERhdGUoKSxcclxuICAgICAgICAgICAgZnVsbERhdGU6IGRhdGUuZ2V0RGF0ZSgpIDwgMTAgPyAnMCcgKyBkYXRlLmdldERhdGUoKSA6IGRhdGUuZ2V0RGF0ZSgpLFxyXG4gICAgICAgICAgICBkYXk6IGRhdGUuZ2V0RGF5KCksXHJcbiAgICAgICAgICAgIGhvdXJzOiBkYXRlLmdldEhvdXJzKCksXHJcbiAgICAgICAgICAgIGZ1bGxIb3VyczogIGRhdGUuZ2V0SG91cnMoKSA8IDEwID8gJzAnICsgZGF0ZS5nZXRIb3VycygpIDogIGRhdGUuZ2V0SG91cnMoKSAsXHJcbiAgICAgICAgICAgIG1pbnV0ZXM6IGRhdGUuZ2V0TWludXRlcygpLFxyXG4gICAgICAgICAgICBmdWxsTWludXRlczogIGRhdGUuZ2V0TWludXRlcygpIDwgMTAgPyAnMCcgKyBkYXRlLmdldE1pbnV0ZXMoKSA6ICBkYXRlLmdldE1pbnV0ZXMoKVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGF0ZXBpY2tlci5nZXREZWNhZGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIHZhciBmaXJzdFllYXIgPSBNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIDEwKSAqIDEwO1xyXG5cclxuICAgICAgICByZXR1cm4gW2ZpcnN0WWVhciwgZmlyc3RZZWFyICsgOV07XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIudGVtcGxhdGUgPSBmdW5jdGlvbiAoc3RyLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8jXFx7KFtcXHddKylcXH0vZywgZnVuY3Rpb24gKHNvdXJjZSwgbWF0Y2gpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFbbWF0Y2hdIHx8IGRhdGFbbWF0Y2hdID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVttYXRjaF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmlzU2FtZSA9IGZ1bmN0aW9uIChkYXRlMSwgZGF0ZTIsIHR5cGUpIHtcclxuICAgICAgICBpZiAoIWRhdGUxIHx8ICFkYXRlMikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciBkMSA9IGRhdGVwaWNrZXIuZ2V0UGFyc2VkRGF0ZShkYXRlMSksXHJcbiAgICAgICAgICAgIGQyID0gZGF0ZXBpY2tlci5nZXRQYXJzZWREYXRlKGRhdGUyKSxcclxuICAgICAgICAgICAgX3R5cGUgPSB0eXBlID8gdHlwZSA6ICdkYXknLFxyXG5cclxuICAgICAgICAgICAgY29uZGl0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGRheTogZDEuZGF0ZSA9PSBkMi5kYXRlICYmIGQxLm1vbnRoID09IGQyLm1vbnRoICYmIGQxLnllYXIgPT0gZDIueWVhcixcclxuICAgICAgICAgICAgICAgIG1vbnRoOiBkMS5tb250aCA9PSBkMi5tb250aCAmJiBkMS55ZWFyID09IGQyLnllYXIsXHJcbiAgICAgICAgICAgICAgICB5ZWFyOiBkMS55ZWFyID09IGQyLnllYXJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbnNbX3R5cGVdO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmxlc3MgPSBmdW5jdGlvbiAoZGF0ZUNvbXBhcmVUbywgZGF0ZSwgdHlwZSkge1xyXG4gICAgICAgIGlmICghZGF0ZUNvbXBhcmVUbyB8fCAhZGF0ZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBkYXRlLmdldFRpbWUoKSA8IGRhdGVDb21wYXJlVG8uZ2V0VGltZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLmJpZ2dlciA9IGZ1bmN0aW9uIChkYXRlQ29tcGFyZVRvLCBkYXRlLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKCFkYXRlQ29tcGFyZVRvIHx8ICFkYXRlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpID4gZGF0ZUNvbXBhcmVUby5nZXRUaW1lKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuZ2V0TGVhZGluZ1plcm9OdW0gPSBmdW5jdGlvbiAobnVtKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KG51bSkgPCAxMCA/ICcwJyArIG51bSA6IG51bTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGNvcHkgb2YgZGF0ZSB3aXRoIGhvdXJzIGFuZCBtaW51dGVzIGVxdWFscyB0byAwXHJcbiAgICAgKiBAcGFyYW0gZGF0ZSB7RGF0ZX1cclxuICAgICAqL1xyXG4gICAgZGF0ZXBpY2tlci5yZXNldFRpbWUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGF0ZSAhPSAnb2JqZWN0JykgcmV0dXJuO1xyXG4gICAgICAgIGRhdGUgPSBkYXRlcGlja2VyLmdldFBhcnNlZERhdGUoZGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUueWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXRlKVxyXG4gICAgfTtcclxuXHJcbiAgICAkLmZuLmRhdGVwaWNrZXIgPSBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAkLmRhdGEodGhpcywgIHBsdWdpbk5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IERhdGVwaWNrZXIoIHRoaXMsIG9wdGlvbnMgKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSAkLmRhdGEodGhpcywgcGx1Z2luTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3RoaXMub3B0cyA9ICQuZXh0ZW5kKHRydWUsIF90aGlzLm9wdHMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJC5mbi5kYXRlcGlja2VyLkNvbnN0cnVjdG9yID0gRGF0ZXBpY2tlcjtcclxuXHJcbiAgICAkLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UgPSB7XHJcbiAgICAgICAgcnU6IHtcclxuICAgICAgICAgICAgZGF5czogWyfQktC+0YHQutGA0LXRgdC10L3RjNC1JywgJ9Cf0L7QvdC10LTQtdC70YzQvdC40LonLCAn0JLRgtC+0YDQvdC40LonLCAn0KHRgNC10LTQsCcsICfQp9C10YLQstC10YDQsycsICfQn9GP0YLQvdC40YbQsCcsICfQodGD0LHQsdC+0YLQsCddLFxyXG4gICAgICAgICAgICBkYXlzU2hvcnQ6IFsn0JLQvtGBJywn0J/QvtC9Jywn0JLRgtC+Jywn0KHRgNC1Jywn0KfQtdGCJywn0J/Rj9GCJywn0KHRg9CxJ10sXHJcbiAgICAgICAgICAgIGRheXNNaW46IFsn0JLRgScsJ9Cf0L0nLCfQktGCJywn0KHRgCcsJ9Cn0YInLCfQn9GCJywn0KHQsSddLFxyXG4gICAgICAgICAgICBtb250aHM6IFsn0K/QvdCy0LDRgNGMJywgJ9Ck0LXQstGA0LDQu9GMJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC10LvRjCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQvdGC0Y/QsdGA0YwnLCAn0J7QutGC0Y/QsdGA0YwnLCAn0J3QvtGP0LHRgNGMJywgJ9CU0LXQutCw0LHRgNGMJ10sXHJcbiAgICAgICAgICAgIG1vbnRoc1Nob3J0OiBbJ9Cv0L3QsicsICfQpNC10LInLCAn0JzQsNGAJywgJ9CQ0L/RgCcsICfQnNCw0LknLCAn0JjRjtC9JywgJ9CY0Y7QuycsICfQkNCy0LMnLCAn0KHQtdC9JywgJ9Ce0LrRgicsICfQndC+0Y8nLCAn0JTQtdC6J10sXHJcbiAgICAgICAgICAgIHRvZGF5OiAn0KHQtdCz0L7QtNC90Y8nLFxyXG4gICAgICAgICAgICBjbGVhcjogJ9Ce0YfQuNGB0YLQuNGC0YwnLFxyXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiAnZGQubW0ueXl5eScsXHJcbiAgICAgICAgICAgIHRpbWVGb3JtYXQ6ICdoaDppaScsXHJcbiAgICAgICAgICAgIGZpcnN0RGF5OiAxXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKGF1dG9Jbml0U2VsZWN0b3IpLmRhdGVwaWNrZXIoKTtcclxuICAgIH0pXHJcblxyXG59KSgpO1xyXG4iLCI7KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0ZW1wbGF0ZXMgPSB7XHJcbiAgICAgICAgZGF5czonJyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1kYXlzIGRhdGVwaWNrZXItLWJvZHlcIj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWRheXMtbmFtZXNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWNlbGxzIGRhdGVwaWNrZXItLWNlbGxzLWRheXNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICBtb250aHM6ICcnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW1vbnRocyBkYXRlcGlja2VyLS1ib2R5XCI+JyArXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy1tb250aHNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICB5ZWFyczogJycgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0teWVhcnMgZGF0ZXBpY2tlci0tYm9keVwiPicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tY2VsbHMgZGF0ZXBpY2tlci0tY2VsbHMteWVhcnNcIj48L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlcixcclxuICAgICAgICBkcCA9IGRhdGVwaWNrZXIuQ29uc3RydWN0b3I7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5Cb2R5ID0gZnVuY3Rpb24gKGQsIHR5cGUsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmQgPSBkO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcclxuICAgICAgICB0aGlzLiRlbCA9ICQoJycpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuQm9keS5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEJhc2VIdG1sKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluZEV2ZW50cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9iaW5kRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdjbGljaycsICcuZGF0ZXBpY2tlci0tY2VsbCcsICQucHJveHkodGhpcy5fb25DbGlja0NlbGwsIHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGRCYXNlSHRtbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbCA9ICQodGVtcGxhdGVzW3RoaXMudHlwZV0pLmFwcGVuZFRvKHRoaXMuZC4kY29udGVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuJG5hbWVzID0gJCgnLmRhdGVwaWNrZXItLWRheXMtbmFtZXMnLCB0aGlzLiRlbCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGNlbGxzID0gJCgnLmRhdGVwaWNrZXItLWNlbGxzJywgdGhpcy4kZWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXREYXlOYW1lc0h0bWw6IGZ1bmN0aW9uIChmaXJzdERheSwgY3VyRGF5LCBodG1sLCBpKSB7XHJcbiAgICAgICAgICAgIGN1ckRheSA9IGN1ckRheSAhPSB1bmRlZmluZWQgPyBjdXJEYXkgOiBmaXJzdERheTtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWwgPyBodG1sIDogJyc7XHJcbiAgICAgICAgICAgIGkgPSBpICE9IHVuZGVmaW5lZCA/IGkgOiAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGkgPiA3KSByZXR1cm4gaHRtbDtcclxuICAgICAgICAgICAgaWYgKGN1ckRheSA9PSA3KSByZXR1cm4gdGhpcy5fZ2V0RGF5TmFtZXNIdG1sKGZpcnN0RGF5LCAwLCBodG1sLCArK2kpO1xyXG5cclxuICAgICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWRheS1uYW1lJyArICh0aGlzLmQuaXNXZWVrZW5kKGN1ckRheSkgPyBcIiAtd2Vla2VuZC1cIiA6IFwiXCIpICsgJ1wiPicgKyB0aGlzLmQubG9jLmRheXNNaW5bY3VyRGF5XSArICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldERheU5hbWVzSHRtbChmaXJzdERheSwgKytjdXJEYXksIGh0bWwsICsraSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldENlbGxDb250ZW50czogZnVuY3Rpb24gKGRhdGUsIHR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBcImRhdGVwaWNrZXItLWNlbGwgZGF0ZXBpY2tlci0tY2VsbC1cIiArIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLmQsXHJcbiAgICAgICAgICAgICAgICBtaW5SYW5nZSA9IGRwLnJlc2V0VGltZShwYXJlbnQubWluUmFuZ2UpLFxyXG4gICAgICAgICAgICAgICAgbWF4UmFuZ2UgPSBkcC5yZXNldFRpbWUocGFyZW50Lm1heFJhbmdlKSxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSBwYXJlbnQub3B0cyxcclxuICAgICAgICAgICAgICAgIGQgPSBkcC5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVyID0ge30sXHJcbiAgICAgICAgICAgICAgICBodG1sID0gZC5kYXRlO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuaXNXZWVrZW5kKGQuZGF5KSkgY2xhc3NlcyArPSBcIiAtd2Vla2VuZC1cIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5tb250aCAhPSB0aGlzLmQucGFyc2VkRGF0ZS5tb250aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9IFwiIC1vdGhlci1tb250aC1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRzLnNlbGVjdE90aGVyTW9udGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9IFwiIC1kaXNhYmxlZC1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuc2hvd090aGVyTW9udGhzKSBodG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBwYXJlbnQubG9jW3BhcmVudC5vcHRzLm1vbnRoc0ZpZWxkXVtkLm1vbnRoXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNhZGUgPSBwYXJlbnQuY3VyRGVjYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBkLnllYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQueWVhciA8IGRlY2FkZVswXSB8fCBkLnllYXIgPiBkZWNhZGVbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSAnIC1vdGhlci1kZWNhZGUtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRzLnNlbGVjdE90aGVyWWVhcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gXCIgLWRpc2FibGVkLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5zaG93T3RoZXJZZWFycykgaHRtbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdHMub25SZW5kZXJDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXIgPSBvcHRzLm9uUmVuZGVyQ2VsbChkYXRlLCB0eXBlKSB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSByZW5kZXIuaHRtbCA/IHJlbmRlci5odG1sIDogaHRtbDtcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gcmVuZGVyLmNsYXNzZXMgPyAnICcgKyByZW5kZXIuY2xhc3NlcyA6ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0cy5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRwLmlzU2FtZShtaW5SYW5nZSwgZGF0ZSwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtcmFuZ2UtZnJvbS0nO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRwLmlzU2FtZShtYXhSYW5nZSwgZGF0ZSwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtcmFuZ2UtdG8tJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDEgJiYgcGFyZW50LmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChkcC5iaWdnZXIobWluUmFuZ2UsIGRhdGUpICYmIGRwLmxlc3MocGFyZW50LmZvY3VzZWQsIGRhdGUpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZHAubGVzcyhtYXhSYW5nZSwgZGF0ZSkgJiYgZHAuYmlnZ2VyKHBhcmVudC5mb2N1c2VkLCBkYXRlKSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLWluLXJhbmdlLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcC5sZXNzKG1heFJhbmdlLCBkYXRlKSAmJiBkcC5pc1NhbWUocGFyZW50LmZvY3VzZWQsIGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgKz0gJyAtcmFuZ2UtZnJvbS0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcC5iaWdnZXIobWluUmFuZ2UsIGRhdGUpICYmIGRwLmlzU2FtZShwYXJlbnQuZm9jdXNlZCwgZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyArPSAnIC1yYW5nZS10by0nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50LnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHAuYmlnZ2VyKG1pblJhbmdlLCBkYXRlKSAmJiBkcC5sZXNzKG1heFJhbmdlLCBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzICs9ICcgLWluLXJhbmdlLSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoZHAuaXNTYW1lKGN1cnJlbnREYXRlLCBkYXRlLCB0eXBlKSkgY2xhc3NlcyArPSAnIC1jdXJyZW50LSc7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQuZm9jdXNlZCAmJiBkcC5pc1NhbWUoZGF0ZSwgcGFyZW50LmZvY3VzZWQsIHR5cGUpKSBjbGFzc2VzICs9ICcgLWZvY3VzLSc7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQuX2lzU2VsZWN0ZWQoZGF0ZSwgdHlwZSkpIGNsYXNzZXMgKz0gJyAtc2VsZWN0ZWQtJztcclxuICAgICAgICAgICAgaWYgKCFwYXJlbnQuX2lzSW5SYW5nZShkYXRlLCB0eXBlKSB8fCByZW5kZXIuZGlzYWJsZWQpIGNsYXNzZXMgKz0gJyAtZGlzYWJsZWQtJztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyBkYXlzIG51bWJlciB0byByZW5kZXIuIEdlbmVyYXRlcyBkYXlzIGh0bWwgYW5kIHJldHVybnMgaXQuXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGUgLSBEYXRlIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0RGF5c0h0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3RhbE1vbnRoRGF5cyA9IGRwLmdldERheXNDb3VudChkYXRlKSxcclxuICAgICAgICAgICAgICAgIGZpcnN0TW9udGhEYXkgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMSkuZ2V0RGF5KCksXHJcbiAgICAgICAgICAgICAgICBsYXN0TW9udGhEYXkgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgdG90YWxNb250aERheXMpLmdldERheSgpLFxyXG4gICAgICAgICAgICAgICAgZGF5c0Zyb21QZXZNb250aCA9IGZpcnN0TW9udGhEYXkgLSB0aGlzLmQubG9jLmZpcnN0RGF5LFxyXG4gICAgICAgICAgICAgICAgZGF5c0Zyb21OZXh0TW9udGggPSA2IC0gbGFzdE1vbnRoRGF5ICsgdGhpcy5kLmxvYy5maXJzdERheTtcclxuXHJcbiAgICAgICAgICAgIGRheXNGcm9tUGV2TW9udGggPSBkYXlzRnJvbVBldk1vbnRoIDwgMCA/IGRheXNGcm9tUGV2TW9udGggKyA3IDogZGF5c0Zyb21QZXZNb250aDtcclxuICAgICAgICAgICAgZGF5c0Zyb21OZXh0TW9udGggPSBkYXlzRnJvbU5leHRNb250aCA+IDYgPyBkYXlzRnJvbU5leHRNb250aCAtIDcgOiBkYXlzRnJvbU5leHRNb250aDtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdGFydERheUluZGV4ID0gLWRheXNGcm9tUGV2TW9udGggKyAxLFxyXG4gICAgICAgICAgICAgICAgbSwgeSxcclxuICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdGFydERheUluZGV4LCBtYXggPSB0b3RhbE1vbnRoRGF5cyArIGRheXNGcm9tTmV4dE1vbnRoOyBpIDw9IG1heDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB5ID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgbSA9IGRhdGUuZ2V0TW9udGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBodG1sICs9IHRoaXMuX2dldERheUh0bWwobmV3IERhdGUoeSwgbSwgaSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXREYXlIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsICdkYXknKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cIicgKyBjb250ZW50LmNsYXNzZXMgKyAnXCIgJyArXHJcbiAgICAgICAgICAgICAgICAnZGF0YS1kYXRlPVwiJyArIGRhdGUuZ2V0RGF0ZSgpICsgJ1wiICcgK1xyXG4gICAgICAgICAgICAgICAgJ2RhdGEtbW9udGg9XCInICsgZGF0ZS5nZXRNb250aCgpICsgJ1wiICcgK1xyXG4gICAgICAgICAgICAgICAgJ2RhdGEteWVhcj1cIicgKyBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnXCI+JyArIGNvbnRlbnQuaHRtbCArICc8L2Rpdj4nO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdlbmVyYXRlcyBtb250aHMgaHRtbFxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRlIC0gZGF0ZSBpbnN0YW5jZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0TW9udGhzSHRtbDogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGh0bWwgPSAnJyxcclxuICAgICAgICAgICAgICAgIGQgPSBkcC5nZXRQYXJzZWREYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICAgICAgaSA9IDA7XHJcblxyXG4gICAgICAgICAgICB3aGlsZShpIDwgMTIpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5fZ2V0TW9udGhIdG1sKG5ldyBEYXRlKGQueWVhciwgaSkpO1xyXG4gICAgICAgICAgICAgICAgaSsrXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRNb250aEh0bWw6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsICdtb250aCcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIGNvbnRlbnQuY2xhc3NlcyArICdcIiBkYXRhLW1vbnRoPVwiJyArIGRhdGUuZ2V0TW9udGgoKSArICdcIj4nICsgY29udGVudC5odG1sICsgJzwvZGl2PidcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0WWVhcnNIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgZCA9IGRwLmdldFBhcnNlZERhdGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBkZWNhZGUgPSBkcC5nZXREZWNhZGUoZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBmaXJzdFllYXIgPSBkZWNhZGVbMF0gLSAxLFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9ICcnLFxyXG4gICAgICAgICAgICAgICAgaSA9IGZpcnN0WWVhcjtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaTsgaSA8PSBkZWNhZGVbMV0gKyAxOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5fZ2V0WWVhckh0bWwobmV3IERhdGUoaSAsIDApKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldFllYXJIdG1sOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENlbGxDb250ZW50cyhkYXRlLCAneWVhcicpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIGNvbnRlbnQuY2xhc3NlcyArICdcIiBkYXRhLXllYXI9XCInICsgZGF0ZS5nZXRGdWxsWWVhcigpICsgJ1wiPicgKyBjb250ZW50Lmh0bWwgKyAnPC9kaXY+J1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZW5kZXJUeXBlczoge1xyXG4gICAgICAgICAgICBkYXlzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF5TmFtZXMgPSB0aGlzLl9nZXREYXlOYW1lc0h0bWwodGhpcy5kLmxvYy5maXJzdERheSksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2dldERheXNIdG1sKHRoaXMuZC5jdXJyZW50RGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2VsbHMuaHRtbChkYXlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJG5hbWVzLmh0bWwoZGF5TmFtZXMpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vbnRoczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSB0aGlzLl9nZXRNb250aHNIdG1sKHRoaXMuZC5jdXJyZW50RGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2VsbHMuaHRtbChodG1sKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5ZWFyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSB0aGlzLl9nZXRZZWFyc0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjZWxscy5odG1sKGh0bWwpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVuZGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMub25seVRpbWVwaWNrZXIpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVHlwZXNbdGhpcy50eXBlXS5iaW5kKHRoaXMpKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3VwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJGNlbGxzID0gJCgnLmRhdGVwaWNrZXItLWNlbGwnLCB0aGlzLiRjZWxscyksXHJcbiAgICAgICAgICAgICAgICBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzLFxyXG4gICAgICAgICAgICAgICAgJGNlbGwsXHJcbiAgICAgICAgICAgICAgICBkYXRlO1xyXG4gICAgICAgICAgICAkY2VsbHMuZWFjaChmdW5jdGlvbiAoY2VsbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgJGNlbGwgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IF90aGlzLmQuX2dldERhdGVGcm9tQ2VsbCgkKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcy5fZ2V0Q2VsbENvbnRlbnRzKGRhdGUsIF90aGlzLmQuY2VsbFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgJGNlbGwuYXR0cignY2xhc3MnLGNsYXNzZXMuY2xhc3NlcylcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgdGhpcy5hY2l0dmUgPSB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vICBFdmVudHNcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIF9oYW5kbGVDbGljazogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gZWwuZGF0YSgnZGF0ZScpIHx8IDEsXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IGVsLmRhdGEoJ21vbnRoJykgfHwgMCxcclxuICAgICAgICAgICAgICAgIHllYXIgPSBlbC5kYXRhKCd5ZWFyJykgfHwgdGhpcy5kLnBhcnNlZERhdGUueWVhcixcclxuICAgICAgICAgICAgICAgIGRwID0gdGhpcy5kO1xyXG4gICAgICAgICAgICAvLyBDaGFuZ2UgdmlldyBpZiBtaW4gdmlldyBkb2VzIG5vdCByZWFjaCB5ZXRcclxuICAgICAgICAgICAgaWYgKGRwLnZpZXcgIT0gdGhpcy5vcHRzLm1pblZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGRwLmRvd24obmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTZWxlY3QgZGF0ZSBpZiBtaW4gdmlldyBpcyByZWFjaGVkXHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZERhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSksXHJcbiAgICAgICAgICAgICAgICBhbHJlYWR5U2VsZWN0ZWQgPSB0aGlzLmQuX2lzU2VsZWN0ZWQoc2VsZWN0ZWREYXRlLCB0aGlzLmQuY2VsbFR5cGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhbHJlYWR5U2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGRwLl90cmlnZ2VyKCdjbGlja0NlbGwnLCBzZWxlY3RlZERhdGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkcC5faGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMuYmluZChkcCwgYWxyZWFkeVNlbGVjdGVkLCBzZWxlY3RlZERhdGUpKCk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbkNsaWNrQ2VsbDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICRlbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5kYXRlcGlja2VyLS1jZWxsJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJGVsLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNsaWNrLmJpbmQodGhpcykoJGVsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KSgpO1xyXG4iLCI7KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9ICcnICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cInByZXZcIj4je3ByZXZIdG1sfTwvZGl2PicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2LXRpdGxlXCI+I3t0aXRsZX08L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cIm5leHRcIj4je25leHRIdG1sfTwvZGl2PicsXHJcbiAgICAgICAgYnV0dG9uc0NvbnRhaW5lclRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1idXR0b25zXCI+PC9kaXY+JyxcclxuICAgICAgICBidXR0b24gPSAnPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS1idXR0b25cIiBkYXRhLWFjdGlvbj1cIiN7YWN0aW9ufVwiPiN7bGFiZWx9PC9zcGFuPicsXHJcbiAgICAgICAgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlcixcclxuICAgICAgICBkcCA9IGRhdGVwaWNrZXIuQ29uc3RydWN0b3I7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5OYXZpZ2F0aW9uID0gZnVuY3Rpb24gKGQsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmQgPSBkO1xyXG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcblxyXG4gICAgICAgIHRoaXMuJGJ1dHRvbnNDb250YWluZXIgPSAnJztcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRhdGVwaWNrZXIuTmF2aWdhdGlvbi5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEJhc2VIdG1sKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmluZEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmQuJG5hdi5vbignY2xpY2snLCAnLmRhdGVwaWNrZXItLW5hdi1hY3Rpb24nLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZCdXR0b24sIHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5kLiRuYXYub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1uYXYtdGl0bGUnLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZUaXRsZSwgdGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmQuJGRhdGVwaWNrZXIub24oJ2NsaWNrJywgJy5kYXRlcGlja2VyLS1idXR0b24nLCAkLnByb3h5KHRoaXMuX29uQ2xpY2tOYXZCdXR0b24sIHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYnVpbGRCYXNlSHRtbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5vbmx5VGltZXBpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYWRkQnV0dG9uc0lmTmVlZCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9hZGRCdXR0b25zSWZOZWVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMudG9kYXlCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEJ1dHRvbigndG9kYXknKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY2xlYXJCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEJ1dHRvbignY2xlYXInKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLl9nZXRUaXRsZSh0aGlzLmQuY3VycmVudERhdGUpLFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9IGRwLnRlbXBsYXRlKHRlbXBsYXRlLCAkLmV4dGVuZCh7dGl0bGU6IHRpdGxlfSwgdGhpcy5vcHRzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kbmF2Lmh0bWwoaHRtbCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQudmlldyA9PSAneWVhcnMnKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuZGF0ZXBpY2tlci0tbmF2LXRpdGxlJywgdGhpcy5kLiRuYXYpLmFkZENsYXNzKCctZGlzYWJsZWQtJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXROYXZTdGF0dXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZ2V0VGl0bGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmQuZm9ybWF0RGF0ZSh0aGlzLm9wdHMubmF2VGl0bGVzW3RoaXMuZC52aWV3XSwgZGF0ZSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYWRkQnV0dG9uOiBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJGJ1dHRvbnNDb250YWluZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRCdXR0b25zQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy5kLmxvY1t0eXBlXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBkcC50ZW1wbGF0ZShidXR0b24sIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCQoJ1tkYXRhLWFjdGlvbj0nICsgdHlwZSArICddJywgdGhpcy4kYnV0dG9uc0NvbnRhaW5lcikubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuJGJ1dHRvbnNDb250YWluZXIuYXBwZW5kKGh0bWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9hZGRCdXR0b25zQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZC4kZGF0ZXBpY2tlci5hcHBlbmQoYnV0dG9uc0NvbnRhaW5lclRlbXBsYXRlKTtcclxuICAgICAgICAgICAgdGhpcy4kYnV0dG9uc0NvbnRhaW5lciA9ICQoJy5kYXRlcGlja2VyLS1idXR0b25zJywgdGhpcy5kLiRkYXRlcGlja2VyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXROYXZTdGF0dXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCEodGhpcy5vcHRzLm1pbkRhdGUgfHwgdGhpcy5vcHRzLm1heERhdGUpIHx8ICF0aGlzLm9wdHMuZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZC5wYXJzZWREYXRlLFxyXG4gICAgICAgICAgICAgICAgbSA9IGRhdGUubW9udGgsXHJcbiAgICAgICAgICAgICAgICB5ID0gZGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICAgICAgZCA9IGRhdGUuZGF0ZTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kLnZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RheXMnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSwgbS0xLCAxKSwgJ21vbnRoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdigncHJldicpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSwgbSsxLCAxKSwgJ21vbnRoJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdignbmV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGhzJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKHktMSwgbSwgZCksICd5ZWFyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZU5hdigncHJldicpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoeSsxLCBtLCBkKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCduZXh0JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFycyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2FkZSA9IGRwLmdldERlY2FkZSh0aGlzLmQuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShkZWNhZGVbMF0gLSAxLCAwLCAxKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCdwcmV2JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShkZWNhZGVbMV0gKyAxLCAwLCAxKSwgJ3llYXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlTmF2KCduZXh0JylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfZGlzYWJsZU5hdjogZnVuY3Rpb24gKG5hdikge1xyXG4gICAgICAgICAgICAkKCdbZGF0YS1hY3Rpb249XCInICsgbmF2ICsgJ1wiXScsIHRoaXMuZC4kbmF2KS5hZGRDbGFzcygnLWRpc2FibGVkLScpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FjdGl2YXRlTmF2OiBmdW5jdGlvbiAobmF2KSB7XHJcbiAgICAgICAgICAgICQoJ1tkYXRhLWFjdGlvbj1cIicgKyBuYXYgKyAnXCJdJywgdGhpcy5kLiRuYXYpLnJlbW92ZUNsYXNzKCctZGlzYWJsZWQtJylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25DbGlja05hdkJ1dHRvbjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyICRlbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ1tkYXRhLWFjdGlvbl0nKSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICRlbC5kYXRhKCdhY3Rpb24nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZFthY3Rpb25dKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uQ2xpY2tOYXZUaXRsZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmhhc0NsYXNzKCctZGlzYWJsZWQtJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQudmlldyA9PSAnZGF5cycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmQudmlldyA9ICdtb250aHMnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZC52aWV3ID0gJ3llYXJzJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCI7KGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZVwiPicgK1xyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50XCI+JyArXHJcbiAgICAgICAgJyAgIDxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWhvdXJzXCI+I3tob3VyVmlzaWJsZX08L3NwYW4+JyArXHJcbiAgICAgICAgJyAgIDxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWNvbG9uXCI+Ojwvc3Bhbj4nICtcclxuICAgICAgICAnICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtbWludXRlc1wiPiN7bWluVmFsdWV9PC9zcGFuPicgK1xyXG4gICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtc2xpZGVyc1wiPicgK1xyXG4gICAgICAgICcgICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4nICtcclxuICAgICAgICAnICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJob3Vyc1wiIHZhbHVlPVwiI3tob3VyVmFsdWV9XCIgbWluPVwiI3tob3VyTWlufVwiIG1heD1cIiN7aG91ck1heH1cIiBzdGVwPVwiI3tob3VyU3RlcH1cIi8+JyArXHJcbiAgICAgICAgJyAgIDwvZGl2PicgK1xyXG4gICAgICAgICcgICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4nICtcclxuICAgICAgICAnICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJtaW51dGVzXCIgdmFsdWU9XCIje21pblZhbHVlfVwiIG1pbj1cIiN7bWluTWlufVwiIG1heD1cIiN7bWluTWF4fVwiIHN0ZXA9XCIje21pblN0ZXB9XCIvPicgK1xyXG4gICAgICAgICcgICA8L2Rpdj4nICtcclxuICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgJzwvZGl2PicsXHJcbiAgICAgICAgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlcixcclxuICAgICAgICBkcCA9IGRhdGVwaWNrZXIuQ29uc3RydWN0b3I7XHJcblxyXG4gICAgZGF0ZXBpY2tlci5UaW1lcGlja2VyID0gZnVuY3Rpb24gKGluc3QsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmQgPSBpbnN0O1xyXG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkYXRlcGlja2VyLlRpbWVwaWNrZXIucHJvdG90eXBlID0ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gJ2lucHV0JztcclxuICAgICAgICAgICAgdGhpcy5fc2V0VGltZSh0aGlzLmQuZGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkSFRNTCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL3RyaWRlbnQvZ2kpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA9ICdjaGFuZ2UnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmQuJGVsLm9uKCdzZWxlY3REYXRlJywgdGhpcy5fb25TZWxlY3REYXRlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMub24oaW5wdXQsIHRoaXMuX29uQ2hhbmdlUmFuZ2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJhbmdlcy5vbignbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcFJhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMub24oJ21vdXNlbW92ZSBmb2N1cyAnLCB0aGlzLl9vbk1vdXNlRW50ZXJSYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kcmFuZ2VzLm9uKCdtb3VzZW91dCBibHVyJywgdGhpcy5fb25Nb3VzZU91dFJhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRUaW1lOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgX2RhdGUgPSBkcC5nZXRQYXJzZWREYXRlKGRhdGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgdGhpcy5ob3VycyA9IF9kYXRlLmhvdXJzIDwgdGhpcy5taW5Ib3VycyA/IHRoaXMubWluSG91cnMgOiBfZGF0ZS5ob3VycztcclxuICAgICAgICAgICAgdGhpcy5taW51dGVzID0gX2RhdGUubWludXRlcyA8IHRoaXMubWluTWludXRlcyA/IHRoaXMubWluTWludXRlcyA6IF9kYXRlLm1pbnV0ZXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyBtaW5Ib3VycyBhbmQgbWluTWludXRlcyBmcm9tIGRhdGUgKHVzdWFsbHkgaXQncyBhIG1pbkRhdGUpXHJcbiAgICAgICAgICogQWxzbyBjaGFuZ2VzIG1pbk1pbnV0ZXMgaWYgY3VycmVudCBob3VycyBhcmUgYmlnZ2VyIHRoZW4gQGRhdGUgaG91cnNcclxuICAgICAgICAgKiBAcGFyYW0gZGF0ZSB7RGF0ZX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRNaW5UaW1lRnJvbURhdGU6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWluSG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XHJcbiAgICAgICAgICAgIHRoaXMubWluTWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYsIGZvciBleGFtcGxlLCBtaW4gaG91cnMgYXJlIDEwLCBhbmQgY3VycmVudCBob3VycyBhcmUgMTIsXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBtaW5NaW51dGVzIHRvIGRlZmF1bHQgdmFsdWUsIHRvIGJlIGFibGUgdG8gY2hvb3NlIHdob2xlIHJhbmdlIG9mIHZhbHVlc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kLmxhc3RTZWxlY3RlZERhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZS5nZXRIb3VycygpID4gZGF0ZS5nZXRIb3VycygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5NaW51dGVzID0gdGhpcy5vcHRzLm1pbk1pbnV0ZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0TWF4VGltZUZyb21EYXRlOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1heEhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1heE1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlLmdldEhvdXJzKCkgPCBkYXRlLmdldEhvdXJzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heE1pbnV0ZXMgPSB0aGlzLm9wdHMubWF4TWludXRlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXREZWZhdWx0TWluTWF4VGltZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbWF4SG91cnMgPSAyMyxcclxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXMgPSA1OSxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSB0aGlzLm9wdHM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1pbkhvdXJzID0gb3B0cy5taW5Ib3VycyA8IDAgfHwgb3B0cy5taW5Ib3VycyA+IG1heEhvdXJzID8gMCA6IG9wdHMubWluSG91cnM7XHJcbiAgICAgICAgICAgIHRoaXMubWluTWludXRlcyA9IG9wdHMubWluTWludXRlcyA8IDAgfHwgb3B0cy5taW5NaW51dGVzID4gbWF4TWludXRlcyA/IDAgOiBvcHRzLm1pbk1pbnV0ZXM7XHJcbiAgICAgICAgICAgIHRoaXMubWF4SG91cnMgPSBvcHRzLm1heEhvdXJzIDwgMCB8fCBvcHRzLm1heEhvdXJzID4gbWF4SG91cnMgPyBtYXhIb3VycyA6IG9wdHMubWF4SG91cnM7XHJcbiAgICAgICAgICAgIHRoaXMubWF4TWludXRlcyA9IG9wdHMubWF4TWludXRlcyA8IDAgfHwgb3B0cy5tYXhNaW51dGVzID4gbWF4TWludXRlcyA/IG1heE1pbnV0ZXMgOiBvcHRzLm1heE1pbnV0ZXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTG9va3MgZm9yIG1pbi9tYXggaG91cnMvbWludXRlcyBhbmQgaWYgY3VycmVudCB2YWx1ZXNcclxuICAgICAgICAgKiBhcmUgb3V0IG9mIHJhbmdlIHNldHMgdmFsaWQgdmFsdWVzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3ZhbGlkYXRlSG91cnNNaW51dGVzOiBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ob3VycyA8IHRoaXMubWluSG91cnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMgPSB0aGlzLm1pbkhvdXJzO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaG91cnMgPiB0aGlzLm1heEhvdXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzID0gdGhpcy5tYXhIb3VycztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWludXRlcyA8IHRoaXMubWluTWludXRlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzID0gdGhpcy5taW5NaW51dGVzO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWludXRlcyA+IHRoaXMubWF4TWludXRlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzID0gdGhpcy5tYXhNaW51dGVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2J1aWxkSFRNTDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbHogPSBkcC5nZXRMZWFkaW5nWmVyb051bSxcclxuICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG91ck1pbjogdGhpcy5taW5Ib3VycyxcclxuICAgICAgICAgICAgICAgICAgICBob3VyTWF4OiBseih0aGlzLm1heEhvdXJzKSxcclxuICAgICAgICAgICAgICAgICAgICBob3VyU3RlcDogdGhpcy5vcHRzLmhvdXJzU3RlcCxcclxuICAgICAgICAgICAgICAgICAgICBob3VyVmFsdWU6IHRoaXMuaG91cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgaG91clZpc2libGU6IGx6KHRoaXMuZGlzcGxheUhvdXJzKSxcclxuICAgICAgICAgICAgICAgICAgICBtaW5NaW46IHRoaXMubWluTWludXRlcyxcclxuICAgICAgICAgICAgICAgICAgICBtaW5NYXg6IGx6KHRoaXMubWF4TWludXRlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgbWluU3RlcDogdGhpcy5vcHRzLm1pbnV0ZXNTdGVwLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiBseih0aGlzLm1pbnV0ZXMpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgX3RlbXBsYXRlID0gZHAudGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kdGltZXBpY2tlciA9ICQoX3RlbXBsYXRlKS5hcHBlbmRUbyh0aGlzLmQuJGRhdGVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRyYW5nZXMgPSAkKCdbdHlwZT1cInJhbmdlXCJdJywgdGhpcy4kdGltZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJGhvdXJzID0gJCgnW25hbWU9XCJob3Vyc1wiXScsIHRoaXMuJHRpbWVwaWNrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiRtaW51dGVzID0gJCgnW25hbWU9XCJtaW51dGVzXCJdJywgdGhpcy4kdGltZXBpY2tlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJGhvdXJzVGV4dCA9ICQoJy5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtaG91cnMnLCB0aGlzLiR0aW1lcGlja2VyKTtcclxuICAgICAgICAgICAgdGhpcy4kbWludXRlc1RleHQgPSAkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LW1pbnV0ZXMnLCB0aGlzLiR0aW1lcGlja2VyKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQuYW1wbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYW1wbSA9ICQoJzxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWFtcG1cIj4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50JywgdGhpcy4kdGltZXBpY2tlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgLmh0bWwodGhpcy5kYXlQZXJpb2QpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJHRpbWVwaWNrZXIuYWRkQ2xhc3MoJy1hbS1wbS0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF91cGRhdGVDdXJyZW50VGltZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaCA9ICBkcC5nZXRMZWFkaW5nWmVyb051bSh0aGlzLmRpc3BsYXlIb3VycyksXHJcbiAgICAgICAgICAgICAgICBtID0gZHAuZ2V0TGVhZGluZ1plcm9OdW0odGhpcy5taW51dGVzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGhvdXJzVGV4dC5odG1sKGgpO1xyXG4gICAgICAgICAgICB0aGlzLiRtaW51dGVzVGV4dC5odG1sKG0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZC5hbXBtKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRhbXBtLmh0bWwodGhpcy5kYXlQZXJpb2QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3VwZGF0ZVJhbmdlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRob3Vycy5hdHRyKHtcclxuICAgICAgICAgICAgICAgIG1pbjogdGhpcy5taW5Ib3VycyxcclxuICAgICAgICAgICAgICAgIG1heDogdGhpcy5tYXhIb3Vyc1xyXG4gICAgICAgICAgICB9KS52YWwodGhpcy5ob3Vycyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRtaW51dGVzLmF0dHIoe1xyXG4gICAgICAgICAgICAgICAgbWluOiB0aGlzLm1pbk1pbnV0ZXMsXHJcbiAgICAgICAgICAgICAgICBtYXg6IHRoaXMubWF4TWludXRlc1xyXG4gICAgICAgICAgICB9KS52YWwodGhpcy5taW51dGVzKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgbWluSG91cnMsIG1pbk1pbnV0ZXMgZXRjLiBmcm9tIGRhdGUuIElmIGRhdGUgaXMgbm90IHBhc3NlZCwgdGhhbiBzZXRzXHJcbiAgICAgICAgICogdmFsdWVzIGZyb20gb3B0aW9uc1xyXG4gICAgICAgICAqIEBwYXJhbSBbZGF0ZV0ge29iamVjdH0gLSBEYXRlIG9iamVjdCwgdG8gZ2V0IHZhbHVlcyBmcm9tXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaGFuZGxlRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0RGVmYXVsdE1pbk1heFRpbWUoKTtcclxuICAgICAgICAgICAgaWYgKGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkcC5pc1NhbWUoZGF0ZSwgdGhpcy5kLm9wdHMubWluRGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRNaW5UaW1lRnJvbURhdGUodGhpcy5kLm9wdHMubWluRGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRwLmlzU2FtZShkYXRlLCB0aGlzLmQub3B0cy5tYXhEYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldE1heFRpbWVGcm9tRGF0ZSh0aGlzLmQub3B0cy5tYXhEYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGVIb3Vyc01pbnV0ZXMoZGF0ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVJhbmdlcygpO1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDdXJyZW50VGltZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdmFsaWQgaG91ciB2YWx1ZSB0byBkaXNwbGF5IGluIHRleHQgaW5wdXQgYW5kIGRhdGVwaWNrZXIncyBib2R5LlxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRlIHtEYXRlfE51bWJlcn0gLSBkYXRlIG9yIGhvdXJzXHJcbiAgICAgICAgICogQHBhcmFtIFthbXBtXSB7Qm9vbGVhbn0gLSAxMiBob3VycyBtb2RlXHJcbiAgICAgICAgICogQHJldHVybnMge3tob3VyczogKiwgZGF5UGVyaW9kOiBzdHJpbmd9fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2dldFZhbGlkSG91cnNGcm9tRGF0ZTogZnVuY3Rpb24gKGRhdGUsIGFtcG0pIHtcclxuICAgICAgICAgICAgdmFyIGQgPSBkYXRlLFxyXG4gICAgICAgICAgICAgICAgaG91cnMgPSBkYXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBkID0gZHAuZ2V0UGFyc2VkRGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgICAgIGhvdXJzID0gZC5ob3VycztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIF9hbXBtID0gYW1wbSB8fCB0aGlzLmQuYW1wbSxcclxuICAgICAgICAgICAgICAgIGRheVBlcmlvZCA9ICdhbSc7XHJcblxyXG4gICAgICAgICAgICBpZiAoX2FtcG0pIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBob3VycyA9PSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VycyA9IDEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGhvdXJzID09IDEyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlQZXJpb2QgPSAncG0nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGhvdXJzID4gMTE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzID0gaG91cnMgLSAxMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5UGVyaW9kID0gJ3BtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBob3VyczogaG91cnMsXHJcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2Q6IGRheVBlcmlvZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0IGhvdXJzICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5faG91cnMgPSB2YWw7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGlzcGxheUhvdXJzID0gdGhpcy5fZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlKHZhbCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlIb3VycyA9IGRpc3BsYXlIb3Vycy5ob3VycztcclxuICAgICAgICAgICAgdGhpcy5kYXlQZXJpb2QgPSBkaXNwbGF5SG91cnMuZGF5UGVyaW9kO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBob3VycygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hvdXJzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vICBFdmVudHNcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgIF9vbkNoYW5nZVJhbmdlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQoZS50YXJnZXQpLFxyXG4gICAgICAgICAgICAgICAgbmFtZSA9ICR0YXJnZXQuYXR0cignbmFtZScpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5kLnRpbWVwaWNrZXJJc0FjdGl2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzW25hbWVdID0gJHRhcmdldC52YWwoKTtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ3VycmVudFRpbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5kLl90cmlnZ2VyKCd0aW1lQ2hhbmdlJywgW3RoaXMuaG91cnMsIHRoaXMubWludXRlc10pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGF0ZSh0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKClcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25TZWxlY3REYXRlOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVEYXRlKGRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlRW50ZXJSYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSAkKGUudGFyZ2V0KS5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICAgICQoJy5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtJyArIG5hbWUsIHRoaXMuJHRpbWVwaWNrZXIpLmFkZENsYXNzKCctZm9jdXMtJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29uTW91c2VPdXRSYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSAkKGUudGFyZ2V0KS5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmQuaW5Gb2N1cykgcmV0dXJuOyAvLyBQcmV2ZW50IHJlbW92aW5nIGZvY3VzIHdoZW4gbW91c2Ugb3V0IG9mIHJhbmdlIHNsaWRlclxyXG4gICAgICAgICAgICAkKCcuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LScgKyBuYW1lLCB0aGlzLiR0aW1lcGlja2VyKS5yZW1vdmVDbGFzcygnLWZvY3VzLScpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlVXBSYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5kLnRpbWVwaWNrZXJJc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pKCk7XHJcbiIsImltcG9ydCAncGFnaW5hdGlvbmpzJztcblxuY2xhc3MgUGFnaW5hdGlvbkFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnN0YXRlKCk7XG4gIH1cblxuICBzdGF0ZSgpIHtcbiAgICBjb25zdCBzb3VyY2VzID0gKGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAxNTA7IGkgKz0gMSkge1xuICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KCkpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZTogJ3BhZ2luYXRpb25fX2xpbmtfYWN0aXZlJyxcbiAgICAgIGRpc2FibGVDbGFzc05hbWU6ICdkaXNhYmxlZCcsXG4gICAgICB1bENsYXNzTmFtZTogJ3BhZ2luYXRpb25fX2xpc3QnLFxuICAgICAgcHJldlRleHQ6ICc8aSBjbGFzcz1cInBhZ2luYXRpb25fX2ljb24gbWF0ZXJpYWwtaWNvbnNcIj5hcnJvd19iYWNrPC9pPicsXG4gICAgICBuZXh0VGV4dDogJzxpIGNsYXNzPVwicGFnaW5hdGlvbl9faWNvbiBtYXRlcmlhbC1pY29uc1wiPmFycm93X2ZvcndhcmQ8L2k+JyxcbiAgICAgIHBhZ2VSYW5nZTogMSxcbiAgICAgIGF1dG9IaWRlTmV4dDogdHJ1ZSxcbiAgICAgIGF1dG9IaWRlUHJldmlvdXM6IHRydWUsXG4gICAgICBkYXRhU291cmNlOiBzb3VyY2VzLFxuICAgIH07XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGluaXQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucGFnaW5hdGlvbih0aGlzLm9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBhZ2luYXRpb25BZGFwdGVyIH07XG4iLCJpbXBvcnQgeyBQYWdpbmF0aW9uQWRhcHRlciB9IGZyb20gJy4uLy4uL2xpYnMvcGFnaW5hdGlvbi9QYWdpbmF0aW9uQWRhcHRlcic7XG5cbmNsYXNzIFBhZ2luYXRpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5hZGFwdGVyID0gbmV3IFBhZ2luYXRpb25BZGFwdGVyKCk7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5hZGFwdGVyLmluaXQodGhpcy5lbGVtZW50KTtcbiAgfVxufVxuXG5leHBvcnQgeyBQYWdpbmF0aW9uIH07XG4iLCJpbXBvcnQgJ2NvbG9yLXJhbmdlLXNsaWRlci9kaXN0L3NsaWRlcic7XG5cbmNsYXNzIFNsaWRlckFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnN0YXRlKCk7XG4gIH1cblxuICBzdGF0ZSgpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgZnJvbVRvOiB0cnVlLFxuICAgICAgbWF4OiAxNTAwMCxcbiAgICAgIGZyb206IDUwMDAsXG4gICAgICB0bzogMTAwMDAsXG4gICAgICBpc0NvbG9yOiBmYWxzZSxcbiAgICAgIGlzU2NhbGU6IGZhbHNlLFxuICAgICAgaXNMYWJlbDogZmFsc2UsXG4gICAgICBjb2xvcjogJyM2ZmNmOTcnLFxuICAgICAgZ3JhZGllbnQ6ICcjNjZkMmVhJyxcbiAgICAgIGdyYWRpZW50RGVnOiAnMTgwJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBpbml0KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNvbG9yU2xpZGVyKHRoaXMub3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2xpZGVyQWRhcHRlciB9O1xuIiwiaW1wb3J0IHsgU2xpZGVyQWRhcHRlciB9IGZyb20gJy4uLy4uL2xpYnMvcmFuZ2Utc2xpZGVyL1NsaWRlckFkYXB0ZXInO1xuXG5jbGFzcyBSYW5nZVNsaWRlciB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICB0aGlzLmFkYXB0ZXIgPSBuZXcgU2xpZGVyQWRhcHRlcigpO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYWRhcHRlci5pbml0KHRoaXMuZWxlbWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUmFuZ2VTbGlkZXIgfTtcbiIsImltcG9ydCAnc2xpY2stY2Fyb3VzZWwnO1xuXG5jbGFzcyBTbGlja0FkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnN0YXRlKCk7XG4gIH1cblxuICBzdGF0ZSgpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgZG90czogdHJ1ZSxcbiAgICAgIHdhaXRGb3JBbmltYXRlOiBmYWxzZSxcbiAgICAgIG5leHRBcnJvdzpcbiAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzbGljay1uZXh0XCI+PGkgY2xhc3M9XCJzbGljay1pY29uX19yaWdodCBzbGljay1pY29uIG1hdGVyaWFsLWljb25zXCI+ZXhwYW5kX21vcmU8L2k+PC9idXR0b24+JyxcbiAgICAgIHByZXZBcnJvdzpcbiAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzbGljay1wcmV2XCI+PGkgY2xhc3M9XCJzbGljay1pY29uX19sZWZ0IHNsaWNrLWljb24gbWF0ZXJpYWwtaWNvbnNcIj5leHBhbmRfbW9yZTwvaT48L2J1dHRvbj4nLFxuICAgIH07XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGluaXQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuc2xpY2sodGhpcy5vcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgeyBTbGlja0FkYXB0ZXIgfTtcbiIsImltcG9ydCB7IFNsaWNrQWRhcHRlciB9IGZyb20gJy4uLy4uL2xpYnMvc2xpY2svU2xpY2tBZGFwdGVyJztcblxuY2xhc3MgU2xpY2sge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5hZGFwdGVyID0gbmV3IFNsaWNrQWRhcHRlcigpO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYWRhcHRlci5pbml0KHRoaXMuZWxlbWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2xpY2sgfTtcbiIsImltcG9ydCB7IFNsaWNrIH0gZnJvbSAnLi9TbGljayc7XG5cbmNvbnN0ICR3cmFwcGVycyA9ICQoJy5qcy1zbGljaycpO1xuXG4kd3JhcHBlcnMuZWFjaCgoXywgZWxlbWVudCkgPT4ge1xuICBuZXcgU2xpY2soJChlbGVtZW50KSk7XG59KTtcbiIsIi8qXG4gICAgIF8gXyAgICAgIF8gICAgICAgX1xuIF9fX3wgKF8pIF9fX3wgfCBfXyAgKF8pX19fXG4vIF9ffCB8IHwvIF9ffCB8LyAvICB8IC8gX198XG5cXF9fIFxcIHwgfCAoX198ICAgPCBfIHwgXFxfXyBcXFxufF9fXy9ffF98XFxfX198X3xcXF8oXykvIHxfX18vXG4gICAgICAgICAgICAgICAgICAgfF9fL1xuXG4gVmVyc2lvbjogMS44LjFcbiAgQXV0aG9yOiBLZW4gV2hlZWxlclxuIFdlYnNpdGU6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pb1xuICAgIERvY3M6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pby9zbGlja1xuICAgIFJlcG86IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2tcbiAgSXNzdWVzOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrL2lzc3Vlc1xuXG4gKi9cbi8qIGdsb2JhbCB3aW5kb3csIGRvY3VtZW50LCBkZWZpbmUsIGpRdWVyeSwgc2V0SW50ZXJ2YWwsIGNsZWFySW50ZXJ2YWwgKi9cbjsoZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG5cbn0oZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgU2xpY2sgPSB3aW5kb3cuU2xpY2sgfHwge307XG5cbiAgICBTbGljayA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgaW5zdGFuY2VVaWQgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIFNsaWNrKGVsZW1lbnQsIHNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIHZhciBfID0gdGhpcywgZGF0YVNldHRpbmdzO1xuXG4gICAgICAgICAgICBfLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcHBlbmREb3RzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhc05hdkZvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogMzAwMCxcbiAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXG4gICAgICAgICAgICAgICAgY3NzRWFzZTogJ2Vhc2UnLFxuICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZzogZnVuY3Rpb24oc2xpZGVyLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQoaSArIDEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxuICAgICAgICAgICAgICAgIGZhZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25DaGFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBsYXp5TG9hZDogJ29uZGVtYW5kJyxcbiAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRG90c0hvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXNwb25kVG86ICd3aW5kb3cnLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IG51bGwsXG4gICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICBydGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlOiAnJyxcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgICAgICAgICAgc3dpcGU6IHRydWUsXG4gICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgdG91Y2hUaHJlc2hvbGQ6IDUsXG4gICAgICAgICAgICAgICAgdXNlQ1NTOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVRyYW5zZm9ybTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWxTd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwMDBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF8uaW5pdGlhbHMgPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b1BsYXlUaW1lcjogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlyZWN0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IDEsXG4gICAgICAgICAgICAgICAgJGRvdHM6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZEluZGV4OiAwLFxuICAgICAgICAgICAgICAgICRuZXh0QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgJHByZXZBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlQ291bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGVXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVUcmFjazogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVzOiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBzd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAkbGlzdDogbnVsbCxcbiAgICAgICAgICAgICAgICB0b3VjaE9iamVjdDoge30sXG4gICAgICAgICAgICAgICAgdHJhbnNmb3Jtc0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuc2xpY2tlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMpO1xuXG4gICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMgPSBbXTtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzID0gW107XG4gICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gZmFsc2U7XG4gICAgICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmhpZGRlbiA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgXy5wb3NpdGlvblByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBudWxsO1xuICAgICAgICAgICAgXy5yb3dDb3VudCA9IDE7XG4gICAgICAgICAgICBfLnNob3VsZENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIF8uJHNsaWRlciA9ICQoZWxlbWVudCk7XG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAndmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gMDtcbiAgICAgICAgICAgIF8ud2luZG93VGltZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBkYXRhU2V0dGluZ3MgPSAkKGVsZW1lbnQpLmRhdGEoJ3NsaWNrJykgfHwge307XG5cbiAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLmRlZmF1bHRzLCBzZXR0aW5ncywgZGF0YVNldHRpbmdzKTtcblxuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuXG4gICAgICAgICAgICBfLm9yaWdpbmFsU2V0dGluZ3MgPSBfLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQubW96SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ21vekhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ21venZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ3dlYmtpdEhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmF1dG9QbGF5ID0gJC5wcm94eShfLmF1dG9QbGF5LCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlDbGVhciA9ICQucHJveHkoXy5hdXRvUGxheUNsZWFyLCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlJdGVyYXRvciA9ICQucHJveHkoXy5hdXRvUGxheUl0ZXJhdG9yLCBfKTtcbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUgPSAkLnByb3h5KF8uY2hhbmdlU2xpZGUsIF8pO1xuICAgICAgICAgICAgXy5jbGlja0hhbmRsZXIgPSAkLnByb3h5KF8uY2xpY2tIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2VsZWN0SGFuZGxlciA9ICQucHJveHkoXy5zZWxlY3RIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24gPSAkLnByb3h5KF8uc2V0UG9zaXRpb24sIF8pO1xuICAgICAgICAgICAgXy5zd2lwZUhhbmRsZXIgPSAkLnByb3h5KF8uc3dpcGVIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uZHJhZ0hhbmRsZXIgPSAkLnByb3h5KF8uZHJhZ0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5rZXlIYW5kbGVyID0gJC5wcm94eShfLmtleUhhbmRsZXIsIF8pO1xuXG4gICAgICAgICAgICBfLmluc3RhbmNlVWlkID0gaW5zdGFuY2VVaWQrKztcblxuICAgICAgICAgICAgLy8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcbiAgICAgICAgICAgIC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uIChtdXN0IHN0YXJ0IHdpdGggPClcbiAgICAgICAgICAgIC8vIEV4dHJhY3RlZCBmcm9tIGpRdWVyeSB2MS4xMSBzb3VyY2VcbiAgICAgICAgICAgIF8uaHRtbEV4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC87XG5cblxuICAgICAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG4gICAgICAgICAgICBfLmluaXQodHJ1ZSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTbGljaztcblxuICAgIH0oKSk7XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWN0aXZhdGVBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWRkU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tBZGQgPSBmdW5jdGlvbihtYXJrdXAsIGluZGV4LCBhZGRCZWZvcmUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgYWRkQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPCAwIHx8IChpbmRleCA+PSBfLnNsaWRlQ291bnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIF8uJHNsaWRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkZEJlZm9yZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRCZWZvcmUoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRBZnRlcihfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZGRCZWZvcmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudCkuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0YXJnZXRIZWlnaHRcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVTbGlkZSA9IGZ1bmN0aW9uKHRhcmdldExlZnQsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIGFuaW1Qcm9wcyA9IHt9LFxuICAgICAgICAgICAgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IC10YXJnZXRMZWZ0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudExlZnQgPSAtKF8uY3VycmVudExlZnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiBfLmN1cnJlbnRMZWZ0XG4gICAgICAgICAgICAgICAgfSkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IF8ub3B0aW9ucy5zcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBfLm9wdGlvbnMuZWFzaW5nLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbihub3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IE1hdGguY2VpbChub3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoMHB4LCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IE1hdGguY2VpbCh0YXJnZXRMZWZ0KTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoMHB4LCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdlRhcmdldCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgJiYgYXNOYXZGb3IgIT09IG51bGwgKSB7XG4gICAgICAgICAgICBhc05hdkZvciA9ICQoYXNOYXZGb3IpLm5vdChfLiRzbGlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzTmF2Rm9yO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hc05hdkZvciA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLmdldE5hdlRhcmdldCgpO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgIT09IG51bGwgJiYgdHlwZW9mIGFzTmF2Rm9yID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuc2xpY2soJ2dldFNsaWNrJyk7XG4gICAgICAgICAgICAgICAgaWYoIXRhcmdldC51bnNsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNsaWRlSGFuZGxlcihpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXBwbHlUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9IF8udHJhbnNmb3JtVHlwZSArICcgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJ29wYWNpdHkgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlUaW1lciA9IHNldEludGVydmFsKCBfLmF1dG9QbGF5SXRlcmF0b3IsIF8ub3B0aW9ucy5hdXRvcGxheVNwZWVkICk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlDbGVhciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5hdXRvUGxheVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlJdGVyYXRvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICBpZiAoICFfLnBhdXNlZCAmJiAhXy5pbnRlcnJ1cHRlZCAmJiAhXy5mb2N1c3NlZCApIHtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMSAmJiAoIF8uY3VycmVudFNsaWRlICsgMSApID09PSAoIF8uc2xpZGVDb3VudCAtIDEgKSkge1xuICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIF8uZGlyZWN0aW9uID09PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZVRvICk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZEFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93ID0gJChfLm9wdGlvbnMucHJldkFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyA9ICQoXy5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG5cbiAgICAgICAgICAgIGlmKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnByZXBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZCggXy4kbmV4dEFycm93IClcblxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGREb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgZG90O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgICAgIGRvdCA9ICQoJzx1bCAvPicpLmFkZENsYXNzKF8ub3B0aW9ucy5kb3RzQ2xhc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90LmFwcGVuZCgkKCc8bGkgLz4nKS5hcHBlbmQoXy5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsIF8sIGkpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJGRvdHMgPSBkb3QuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZERvdHMpO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCBfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnLCAkKGVsZW1lbnQpLmF0dHIoJ3N0eWxlJykgfHwgJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XG4gICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oXy4kc2xpZGVyKSA6XG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xuXG4gICAgICAgIF8uJGxpc3QgPSBfLiRzbGlkZVRyYWNrLndyYXAoXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCk7XG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKCdvcGFjaXR5JywgMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlIHx8IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubm90KCdbc3JjXScpLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG5cbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuXG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG5cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBhLCBiLCBjLCBuZXdTbGlkZXMsIG51bU9mU2xpZGVzLCBvcmlnaW5hbFNsaWRlcyxzbGlkZXNQZXJTZWN0aW9uO1xuXG4gICAgICAgIG5ld1NsaWRlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oKTtcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcblxuICAgICAgICAgICAgc2xpZGVzUGVyU2VjdGlvbiA9IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cgKiBfLm9wdGlvbnMucm93cztcbiAgICAgICAgICAgIG51bU9mU2xpZGVzID0gTWF0aC5jZWlsKFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLmxlbmd0aCAvIHNsaWRlc1BlclNlY3Rpb25cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvcihhID0gMDsgYSA8IG51bU9mU2xpZGVzOyBhKyspe1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGZvcihiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IoYyA9IDA7IGMgPCBfLm9wdGlvbnMuc2xpZGVzUGVyUm93OyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoKGIgKiBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArIGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG5ld1NsaWRlcyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzooMTAwIC8gXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyAnJScsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBzbGlkZXJXaWR0aCA9IF8uJHNsaWRlci53aWR0aCgpO1xuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCAkKHdpbmRvdykud2lkdGgoKTtcblxuICAgICAgICBpZiAoXy5yZXNwb25kVG8gPT09ICd3aW5kb3cnKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHdpbmRvd1dpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBzbGlkZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ21pbicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA+IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBfLmFjdGl2ZUJyZWFrcG9pbnQgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9IF8ub3JpZ2luYWxTZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9ubHkgdHJpZ2dlciBicmVha3BvaW50cyBkdXJpbmcgYW4gYWN0dWFsIGJyZWFrLiBub3Qgb24gaW5pdGlhbGl6ZS5cbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGFuZ2VTbGlkZSA9IGZ1bmN0aW9uKGV2ZW50LCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgaW5kZXhPZmZzZXQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQ7XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgbGluaywgcHJldmVudCBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgaWYoJHRhcmdldC5pcygnYScpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG5vdCB0aGUgPGxpPiBlbGVtZW50IChpZTogYSBjaGlsZCksIGZpbmQgdGhlIDxsaT4uXG4gICAgICAgIGlmKCEkdGFyZ2V0LmlzKCdsaScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5jbG9zZXN0KCdsaScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5ldmVuT2Zmc2V0ID0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCk7XG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRhdGEuaW5kZXggPT09IDAgPyAwIDpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmNoZWNrTmF2aWdhYmxlKGluZGV4KSwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG5hdmlnYWJsZXMsIHByZXZOYXZpZ2FibGU7XG5cbiAgICAgICAgbmF2aWdhYmxlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyAmJiBfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9mZignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub2ZmKF8udmlzaWJpbGl0eUNoYW5nZSwgXy52aXNpYmlsaXR5KTtcblxuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5vcmllbnRhdGlvbkNoYW5nZSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnJlc2l6ZSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIG9yaWdpbmFsU2xpZGVzO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMCkge1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvcmlnaW5hbFNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uc2hvdWxkQ2xpY2sgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ocmVmcmVzaCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgXy5jbGVhblVwRXZlbnRzKCk7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikuZGV0YWNoKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5wcmV2QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLm5leHRBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoXy4kc2xpZGVzKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICcnO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsICcqJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgJHNmID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucGF1c2VPbkZvY3VzICkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRDdXJyZW50ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldERvdENvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciBicmVha1BvaW50ID0gMDtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICB2YXIgcGFnZXJRdHkgPSAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gMSArIE1hdGguY2VpbCgoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRMZWZ0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQsXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHRhcmdldFNsaWRlLFxuICAgICAgICAgICAgY29lZjtcblxuICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoXy5zbGlkZVdpZHRoICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgICAgICBjb2VmID0gLTFcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMS41O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHZlcnRpY2FsSGVpZ2h0ICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiBjb2VmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiBfLnNsaWRlV2lkdGg7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiB2ZXJ0aWNhbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIC8gMikgLSAoKF8uc2xpZGVXaWR0aCAqIF8uc2xpZGVDb3VudCkgLyAyKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgLSBfLnNsaWRlV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogXy5zbGlkZVdpZHRoKSAqIC0xKSArIF8uc2xpZGVPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogdmVydGljYWxIZWlnaHQpICogLTEpICsgdmVydGljYWxPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgKz0gKF8uJGxpc3Qud2lkdGgoKSAtIHRhcmdldFNsaWRlLm91dGVyV2lkdGgoKSkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldExlZnQ7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE9wdGlvbiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICByZXR1cm4gXy5vcHRpb25zW29wdGlvbl07XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgICAgbWF4O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBjb3VudGVyID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChicmVha1BvaW50KTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXhlcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCwgc3dpcGVkU2xpZGUsIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBzbGlkZSkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZS5vZmZzZXRMZWZ0IC0gY2VudGVyT2Zmc2V0ICsgKCQoc2xpZGUpLm91dGVyV2lkdGgoKSAvIDIpID4gKF8uc3dpcGVMZWZ0ICogLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoJChzd2lwZWRTbGlkZSkuYXR0cignZGF0YS1zbGljay1pbmRleCcpIC0gXy5jdXJyZW50U2xpZGUpIHx8IDE7XG5cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ29UbyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dvVG8gPSBmdW5jdGlvbihzbGlkZSwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VJbnQoc2xpZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRvbnRBbmltYXRlKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNyZWF0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICghJChfLiRzbGlkZXIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG5cbiAgICAgICAgICAgICQoXy4kc2xpZGVyKS5hZGRDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcblxuICAgICAgICAgICAgXy5idWlsZFJvd3MoKTtcbiAgICAgICAgICAgIF8uYnVpbGRPdXQoKTtcbiAgICAgICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgICAgIF8uc3RhcnRMb2FkKCk7XG4gICAgICAgICAgICBfLmxvYWRTbGlkZXIoKTtcbiAgICAgICAgICAgIF8uaW5pdGlhbGl6ZUV2ZW50cygpO1xuICAgICAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUodHJ1ZSk7XG4gICAgICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JlYXRpb24pIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdpbml0JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgICAgIG51bURvdEdyb3VwcyA9IE1hdGguY2VpbChfLnNsaWRlQ291bnQgLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxcbiAgICAgICAgICAgICAgICB0YWJDb250cm9sSW5kZXhlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWwgPj0gMCkgJiYgKHZhbCA8IF8uc2xpZGVDb3VudCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmFkZChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLm5vdChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlQ29udHJvbEluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXMuaW5kZXhPZihpKTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlQ29udHJvbEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgIHZhciBhcmlhQnV0dG9uQ29udHJvbCA9ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBzbGlkZUNvbnRyb2xJbmRleFxuICAgICAgICAgICAgICAgICAgIGlmICgkKCcjJyArIGFyaWFCdXR0b25Db250cm9sKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhQnV0dG9uQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpLmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hcHBlZFNsaWRlSW5kZXggPSB0YWJDb250cm9sSW5kZXhlc1tpXTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3ByZXNlbnRhdGlvbidcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnYnV0dG9uJykuZmlyc3QoKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIGksXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBtYXBwZWRTbGlkZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6IChpICsgMSkgKyAnIG9mICcgKyBudW1Eb3RHcm91cHMsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KS5lcShfLmN1cnJlbnRTbGlkZSkuZmluZCgnYnV0dG9uJykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgICAgICB9KS5lbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGk9Xy5jdXJyZW50U2xpZGUsIG1heD1pK18ub3B0aW9ucy5zbGlkZXNUb1Nob3c7IGkgPCBtYXg7IGkrKykge1xuICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLmF0dHIoeyd0YWJpbmRleCc6ICcwJ30pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmFjdGl2YXRlQURBKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdERvdEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4J1xuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8ub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG5cbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdzdGFydCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgaWYoIWV2ZW50LnRhcmdldC50YWdOYW1lLm1hdGNoKCdURVhUQVJFQXxJTlBVVHxTRUxFQ1QnKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNyY1NldCA9ICQodGhpcykuYXR0cignZGF0YS1zcmNzZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTaXplcyAgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU3JjU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2l6ZXMnLCBpbWFnZVNpemVzICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMSB9LCAyMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICB2YXIgcHJldlNsaWRlID0gcmFuZ2VTdGFydCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlID0gcmFuZ2VFbmQsXG4gICAgICAgICAgICAgICAgJHNsaWRlcyA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U2xpZGUgPCAwKSBwcmV2U2xpZGUgPSBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShwcmV2U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEobmV4dFNsaWRlKSk7XG4gICAgICAgICAgICAgICAgcHJldlNsaWRlLS07XG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkSW1hZ2VzKGxvYWRSYW5nZSk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxvYWRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5pbml0VUkoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAncHJvZ3Jlc3NpdmUnKSB7XG4gICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5uZXh0ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGF1c2UgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQYXVzZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wb3N0U2xpZGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIV8udW5zbGlja2VkICkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWZ0ZXJDaGFuZ2UnLCBbXywgaW5kZXhdKTtcblxuICAgICAgICAgICAgXy5hbmltYXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmluaXRBREEoKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGN1cnJlbnRTbGlkZSA9ICQoXy4kc2xpZGVzLmdldChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLmF0dHIoJ3RhYmluZGV4JywgMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUHJldiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uKCB0cnlDb3VudCApIHtcblxuICAgICAgICB0cnlDb3VudCA9IHRyeUNvdW50IHx8IDE7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJGltZ3NUb0xvYWQgPSAkKCAnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIgKSxcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgaW1hZ2VTb3VyY2UsXG4gICAgICAgICAgICBpbWFnZVNyY1NldCxcbiAgICAgICAgICAgIGltYWdlU2l6ZXMsXG4gICAgICAgICAgICBpbWFnZVRvTG9hZDtcblxuICAgICAgICBpZiAoICRpbWdzVG9Mb2FkLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgaW1hZ2UgPSAkaW1nc1RvTG9hZC5maXJzdCgpO1xuICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSBpbWFnZS5hdHRyKCdkYXRhLWxhenknKTtcbiAgICAgICAgICAgIGltYWdlU3JjU2V0ID0gaW1hZ2UuYXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gaW1hZ2UuYXR0cignZGF0YS1zaXplcycpIHx8IF8uJHNsaWRlci5hdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbWFnZVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIGltYWdlU3JjU2V0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBpbWFnZVNvdXJjZSApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplcycpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHRyeUNvdW50IDwgMyApIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogdHJ5IHRvIGxvYWQgdGhlIGltYWdlIDMgdGltZXMsXG4gICAgICAgICAgICAgICAgICAgICAqIGxlYXZlIGEgc2xpZ2h0IGRlbGF5IHNvIHdlIGRvbid0IGdldFxuICAgICAgICAgICAgICAgICAgICAgKiBzZXJ2ZXJzIGJsb2NraW5nIHRoZSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoIHRyeUNvdW50ICsgMSApO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWxsSW1hZ2VzTG9hZGVkJywgWyBfIF0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCBpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBjdXJyZW50U2xpZGUsIGxhc3RWaXNpYmxlSW5kZXg7XG5cbiAgICAgICAgbGFzdFZpc2libGVJbmRleCA9IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG5cbiAgICAgICAgLy8gaW4gbm9uLWluZmluaXRlIHNsaWRlcnMsIHdlIGRvbid0IHdhbnQgdG8gZ28gcGFzdCB0aGVcbiAgICAgICAgLy8gbGFzdCB2aXNpYmxlIGluZGV4LlxuICAgICAgICBpZiggIV8ub3B0aW9ucy5pbmZpbml0ZSAmJiAoIF8uY3VycmVudFNsaWRlID4gbGFzdFZpc2libGVJbmRleCApKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGxhc3RWaXNpYmxlSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBsZXNzIHNsaWRlcyB0aGFuIHRvIHNob3csIGdvIHRvIHN0YXJ0LlxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuXG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcblxuICAgICAgICBfLmRlc3Ryb3kodHJ1ZSk7XG5cbiAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscywgeyBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSB9KTtcblxuICAgICAgICBfLmluaXQoKTtcblxuICAgICAgICBpZiggIWluaXRpYWxpemluZyApIHtcblxuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudFNsaWRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYnJlYWtwb2ludCwgY3VycmVudEJyZWFrcG9pbnQsIGwsXG4gICAgICAgICAgICByZXNwb25zaXZlU2V0dGluZ3MgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZSB8fCBudWxsO1xuXG4gICAgICAgIGlmICggJC50eXBlKHJlc3BvbnNpdmVTZXR0aW5ncykgPT09ICdhcnJheScgJiYgcmVzcG9uc2l2ZVNldHRpbmdzLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBfLm9wdGlvbnMucmVzcG9uZFRvIHx8ICd3aW5kb3cnO1xuXG4gICAgICAgICAgICBmb3IgKCBicmVha3BvaW50IGluIHJlc3BvbnNpdmVTZXR0aW5ncyApIHtcblxuICAgICAgICAgICAgICAgIGwgPSBfLmJyZWFrcG9pbnRzLmxlbmd0aC0xO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5icmVha3BvaW50O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgYW5kIGN1dCBvdXQgYW55IGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZXMgd2l0aCB0aGUgc2FtZSBicmVha3BvaW50IG51bWJlciwgd2UgZG9uJ3Qgd2FudCBkdXBlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLmJyZWFrcG9pbnRzW2xdICYmIF8uYnJlYWtwb2ludHNbbF0gPT09IGN1cnJlbnRCcmVha3BvaW50ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc3BsaWNlKGwsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnB1c2goY3VycmVudEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tjdXJyZW50QnJlYWtwb2ludF0gPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uc2V0dGluZ3M7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCBfLm9wdGlvbnMubW9iaWxlRmlyc3QgKSA/IGEtYiA6IGItYTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKF8ub3B0aW9ucy5zbGlkZSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50ICYmIF8uY3VycmVudFNsaWRlICE9PSAwKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcblxuICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZShmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICBfLnBhdXNlZCA9ICFfLm9wdGlvbnMuYXV0b3BsYXk7XG4gICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigncmVJbml0JywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSAhPT0gXy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF8ud2luZG93RGVsYXkpO1xuICAgICAgICAgICAgXy53aW5kb3dEZWxheSA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICAgICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7IF8uc2V0UG9zaXRpb24oKTsgfVxuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZW1vdmVTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1JlbW92ZSA9IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVCZWZvcmUsIHJlbW92ZUFsbCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZW1vdmVCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gMCA6IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IC0taW5kZXggOiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPCAxIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHJlbW92ZUFsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGluZGV4KS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRDU1MgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIHgsIHk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gLXBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHggPSBfLnBvc2l0aW9uUHJvcCA9PSAnbGVmdCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuICAgICAgICB5ID0gXy5wb3NpdGlvblByb3AgPT0gJ3RvcCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuXG4gICAgICAgIHBvc2l0aW9uUHJvcHNbXy5wb3NpdGlvblByb3BdID0gcG9zaXRpb247XG5cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHggKyAnLCAnICsgeSArICcsIDBweCknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldERpbWVuc2lvbnMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKCcwcHggJyArIF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kbGlzdC5oZWlnaHQoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5saXN0V2lkdGggPSBfLiRsaXN0LndpZHRoKCk7XG4gICAgICAgIF8ubGlzdEhlaWdodCA9IF8uJGxpc3QuaGVpZ2h0KCk7XG5cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSAmJiBfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoKF8uc2xpZGVXaWR0aCAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcblxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKDUwMDAgKiBfLnNsaWRlQ291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoKTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbCgoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCh0cnVlKSAtIF8uJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLndpZHRoKF8uc2xpZGVXaWR0aCAtIG9mZnNldCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEZhZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0O1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uc2xpZGVXaWR0aCAqIGluZGV4KSAqIC0xO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLmNzcyh7XG4gICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAxLFxuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuY3NzKCdoZWlnaHQnLCB0YXJnZXRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldE9wdGlvbiA9XG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFjY2VwdHMgYXJndW1lbnRzIGluIGZvcm1hdCBvZjpcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2luZ2xlIG9wdGlvbidzIHZhbHVlOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzZXQgb2YgcmVzcG9uc2l2ZSBvcHRpb25zOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsICdyZXNwb25zaXZlJywgW3t9LCAuLi5dLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIHVwZGF0aW5nIG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlIChub3QgcmVzcG9uc2l2ZSlcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCB7ICdvcHRpb24nOiB2YWx1ZSwgLi4uIH0sIHJlZnJlc2ggKVxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGwsIGl0ZW0sIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggPSBmYWxzZSwgdHlwZTtcblxuICAgICAgICBpZiggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ29iamVjdCcgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdHlwZSA9ICdtdWx0aXBsZSc7XG5cbiAgICAgICAgfSBlbHNlIGlmICggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ3N0cmluZycgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIGlmICggYXJndW1lbnRzWzBdID09PSAncmVzcG9uc2l2ZScgJiYgJC50eXBlKCBhcmd1bWVudHNbMV0gKSA9PT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmVzcG9uc2l2ZSc7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzaW5nbGUnO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdHlwZSA9PT0gJ3NpbmdsZScgKSB7XG5cbiAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAnbXVsdGlwbGUnICkge1xuXG4gICAgICAgICAgICAkLmVhY2goIG9wdGlvbiAsIGZ1bmN0aW9uKCBvcHQsIHZhbCApIHtcblxuICAgICAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRdID0gdmFsO1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdyZXNwb25zaXZlJyApIHtcblxuICAgICAgICAgICAgZm9yICggaXRlbSBpbiB2YWx1ZSApIHtcblxuICAgICAgICAgICAgICAgIGlmKCAkLnR5cGUoIF8ub3B0aW9ucy5yZXNwb25zaXZlICkgIT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgPSBbIHZhbHVlW2l0ZW1dIF07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGwgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIHJlc3BvbnNpdmUgb2JqZWN0IGFuZCBzcGxpY2Ugb3V0IGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucmVzcG9uc2l2ZVtsXS5icmVha3BvaW50ID09PSB2YWx1ZVtpdGVtXS5icmVha3BvaW50ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUuc3BsaWNlKGwsMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKCB2YWx1ZVtpdGVtXSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggcmVmcmVzaCApIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldERpbWVuc2lvbnMoKTtcblxuICAgICAgICBfLnNldEhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2V0Q1NTKF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zZXRGYWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc2V0UG9zaXRpb24nLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQcm9wcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG5cbiAgICAgICAgXy5wb3NpdGlvblByb3AgPSBfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgPyAndG9wJyA6ICdsZWZ0JztcblxuICAgICAgICBpZiAoXy5wb3NpdGlvblByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLldlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLk1velRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLm1zVHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZmFkZSApIHtcbiAgICAgICAgICAgIGlmICggdHlwZW9mIF8ub3B0aW9ucy56SW5kZXggPT09ICdudW1iZXInICkge1xuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMuekluZGV4IDwgMyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gXy5kZWZhdWx0cy56SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLk9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdPVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctby10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdPVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUuTW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnTW96VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbW96LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ01velRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLk1velBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLndlYmtpdFRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3dlYmtpdFRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLXdlYmtpdC10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd3ZWJraXRUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ21zVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbXMtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnbXNUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUudHJhbnNmb3JtICE9PSB1bmRlZmluZWQgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd0cmFuc2l0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBfLnRyYW5zZm9ybXNFbmFibGVkID0gXy5vcHRpb25zLnVzZVRyYW5zZm9ybSAmJiAoXy5hbmltVHlwZSAhPT0gbnVsbCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSk7XG4gICAgfTtcblxuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0LCBhbGxTbGlkZXMsIGluZGV4T2Zmc2V0LCByZW1haW5kZXI7XG5cbiAgICAgICAgYWxsU2xpZGVzID0gXy4kc2xpZGVyXG4gICAgICAgICAgICAuZmluZCgnLnNsaWNrLXNsaWRlJylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgdmFyIGV2ZW5Db2VmID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAlIDIgPT09IDAgPyAxIDogMDtcblxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIDEpIC0gY2VudGVyT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0ICsgZXZlbkNvZWYsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSBjZW50ZXJPZmZzZXQgKyAxICsgZXZlbkNvZWYsIGluZGV4T2Zmc2V0ICsgY2VudGVyT2Zmc2V0ICsgMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoYWxsU2xpZGVzLmxlbmd0aCAtIDEgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IF8uc2xpZGVDb3VudCAtIDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIHtcblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXgsIGluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxTbGlkZXMubGVuZ3RoIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleCA6IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICYmIChfLnNsaWRlQ291bnQgLSBpbmRleCkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIHJlbWFpbmRlciksIGluZGV4T2Zmc2V0ICsgcmVtYWluZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0LCBpbmRleE9mZnNldCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnb25kZW1hbmQnIHx8IF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgc2xpZGVJbmRleCwgaW5maW5pdGVDb3VudDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5jZW50ZXJNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlICYmIF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gXy5zbGlkZUNvdW50OyBpID4gKF8uc2xpZGVDb3VudCAtXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50KTsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZmluaXRlQ291bnQgICsgXy5zbGlkZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4ICsgXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykuZmluZCgnW2lkXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uKCB0b2dnbGUgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCAhdG9nZ2xlICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICB9XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0b2dnbGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNlbGVjdEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9XG4gICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuaXMoJy5zbGljay1zbGlkZScpID9cbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkgOlxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh0YXJnZXRFbGVtZW50LmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSk7XG5cbiAgICAgICAgaWYgKCFpbmRleCkgaW5kZXggPSAwO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uKGluZGV4LCBzeW5jLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciB0YXJnZXRTbGlkZSwgYW5pbVNsaWRlLCBvbGRTbGlkZSwgc2xpZGVMZWZ0LCB0YXJnZXRMZWZ0ID0gbnVsbCxcbiAgICAgICAgICAgIF8gPSB0aGlzLCBuYXZUYXJnZXQ7XG5cbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlICYmIF8uY3VycmVudFNsaWRlID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XG4gICAgICAgIHRhcmdldExlZnQgPSBfLmdldExlZnQodGFyZ2V0U2xpZGUpO1xuICAgICAgICBzbGlkZUxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8uY3VycmVudExlZnQgPSBfLnN3aXBlTGVmdCA9PT0gbnVsbCA/IHNsaWRlTGVmdCA6IF8uc3dpcGVMZWZ0O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gXy5nZXREb3RDb3VudCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgLSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50ICsgdGFyZ2V0U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGUgLSBfLnNsaWRlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcblxuICAgICAgICBvbGRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXNOYXZGb3IgKSB7XG5cbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBuYXZUYXJnZXQuc2xpY2soJ2dldFNsaWNrJyk7XG5cbiAgICAgICAgICAgIGlmICggbmF2VGFyZ2V0LnNsaWRlQ291bnQgPD0gbmF2VGFyZ2V0Lm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgICAgIG5hdlRhcmdldC5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGUoYW5pbVNsaWRlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUodGFyZ2V0TGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zdGFydExvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuaGlkZSgpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGUsIF8gPSB0aGlzO1xuXG4gICAgICAgIHhEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFggLSBfLnRvdWNoT2JqZWN0LmN1clg7XG4gICAgICAgIHlEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFkgLSBfLnRvdWNoT2JqZWN0LmN1clk7XG4gICAgICAgIHIgPSBNYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG5cbiAgICAgICAgc3dpcGVBbmdsZSA9IE1hdGgucm91bmQociAqIDE4MCAvIE1hdGguUEkpO1xuICAgICAgICBpZiAoc3dpcGVBbmdsZSA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSA0NSkgJiYgKHN3aXBlQW5nbGUgPj0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gMzYwKSAmJiAoc3dpcGVBbmdsZSA+PSAzMTUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDEzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMjI1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdyaWdodCcgOiAnbGVmdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMzUpICYmIChzd2lwZUFuZ2xlIDw9IDEzNSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3VwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAndmVydGljYWwnO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVDb3VudCxcbiAgICAgICAgICAgIGRpcmVjdGlvbjtcblxuICAgICAgICBfLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIF8uc3dpcGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLnNjcm9sbGluZykge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgXy5zaG91bGRDbGljayA9ICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDEwICkgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmN1clggPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5lZGdlSGl0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2VkZ2UnLCBbXywgXy5zd2lwZURpcmVjdGlvbigpIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID49IF8udG91Y2hPYmplY3QubWluU3dpcGUgKSB7XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICAgICAgc3dpdGNoICggZGlyZWN0aW9uICkge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBjYXNlICd1cCc6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggZGlyZWN0aW9uICE9ICd2ZXJ0aWNhbCcgKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVDb3VudCApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc3dpcGUnLCBbXywgZGlyZWN0aW9uIF0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAhPT0gXy50b3VjaE9iamVjdC5jdXJYICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIF8uY3VycmVudFNsaWRlICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoKF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpIHx8ICgnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQgJiYgXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSBmYWxzZSAmJiBldmVudC50eXBlLmluZGV4T2YoJ21vdXNlJykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoIDogMTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0V2lkdGggLyBfLm9wdGlvbnNcbiAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdEhlaWdodCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5hY3Rpb24pIHtcblxuICAgICAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVTdGFydChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlRW5kKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgZWRnZVdhc0hpdCA9IGZhbHNlLFxuICAgICAgICAgICAgY3VyTGVmdCwgc3dpcGVEaXJlY3Rpb24sIHN3aXBlTGVuZ3RoLCBwb3NpdGlvbk9mZnNldCwgdG91Y2hlcywgdmVydGljYWxTd2lwZUxlbmd0aDtcblxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcblxuICAgICAgICBpZiAoIV8uZHJhZ2dpbmcgfHwgXy5zY3JvbGxpbmcgfHwgdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWCAtIF8udG91Y2hPYmplY3Quc3RhcnRYLCAyKSkpO1xuXG4gICAgICAgIHZlcnRpY2FsU3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWSAtIF8udG91Y2hPYmplY3Quc3RhcnRZLCAyKSkpO1xuXG4gICAgICAgIGlmICghXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyAmJiAhXy5zd2lwaW5nICYmIHZlcnRpY2FsU3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IHZlcnRpY2FsU3dpcGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZURpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnN3aXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xuICAgICAgICB9XG5cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdG91Y2hlcztcblxuICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCAhPT0gMSB8fCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRYID0gXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRZID0gXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrVW5maWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJHNsaWRlc0NhY2hlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24oZnJvbUJyZWFrcG9pbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XG4gICAgICAgIF8uZGVzdHJveSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmXG4gICAgICAgICAgICBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmXG4gICAgICAgICAgICAhXy5vcHRpb25zLmluZmluaXRlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gMSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmVuZCgpO1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAuZXEoTWF0aC5mbG9vcihfLmN1cnJlbnRTbGlkZSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIGlmICggZG9jdW1lbnRbXy5oaWRkZW5dICkge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgJC5mbi5zbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBvcHQgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGwgPSBfLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICByZXQ7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0ID09ICdvYmplY3QnIHx8IHR5cGVvZiBvcHQgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgX1tpXS5zbGljayA9IG5ldyBTbGljayhfW2ldLCBvcHQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldCA9IF9baV0uc2xpY2tbb3B0XS5hcHBseShfW2ldLnNsaWNrLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0ICE9ICd1bmRlZmluZWQnKSByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfO1xuICAgIH07XG5cbn0pKTtcbiIsImltcG9ydCB7IFJhbmdlU2xpZGVyIH0gZnJvbSAnLi9SYW5nZVNsaWRlcic7XG5cbmNvbnN0ICR3cmFwcGVycyA9ICQoJy5qcy1yYW5nZS1zbGlkZXInKTtcblxuJHdyYXBwZXJzLmVhY2goKF8sIGVsZW1lbnQpID0+IHtcbiAgbmV3IFJhbmdlU2xpZGVyKCQoZWxlbWVudCkpO1xufSk7XG4iLCIhZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gcihpKXtpZih0W2ldKXJldHVybiB0W2ldLmV4cG9ydHM7dmFyIG89dFtpXT17aTppLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbaV0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsciksby5sPSEwLG8uZXhwb3J0c31yLm09ZSxyLmM9dCxyLmQ9ZnVuY3Rpb24oZSx0LGkpe3IubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDppfSl9LHIucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxyLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPXIoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIGk9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihyLnIoaSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGksXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpci5kKGksbyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLG8pKTtyZXR1cm4gaX0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHIucD1cIlwiLHIoci5zPTMpfShbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRXZlbnRFbWl0dGVyPXZvaWQgMDt2YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLmV2ZW50cz17fX1yZXR1cm4gZS5wcm90b3R5cGUuc3Vic2NyaWJlPWZ1bmN0aW9uKGUsdCl7IXRoaXMuZXZlbnRzW2VdJiYodGhpcy5ldmVudHNbZV09W10pLHRoaXMuZXZlbnRzW2VdLnB1c2godCl9LGUucHJvdG90eXBlLnVuc3Vic2NyaWJlPWZ1bmN0aW9uKGUsdCl7dGhpcy5ldmVudHNbZV09dGhpcy5ldmVudHNbZV0uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gdCE9PWV9KSl9LGUucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmV2ZW50c1tlXTtyJiZyLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNhbGwobnVsbCx0KX0pKX0sZX0oKTt0LkV2ZW50RW1pdHRlcj1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5zdGFuZGFyZE9wdGlvbnM9dm9pZCAwO3ZhciBpPXtvcmllbnRhdGlvbjpcImhvcml6b250YWxcIix0eXBlOlwiZG91YmxlXCIsbWluOjAsbWF4OjEwLHN0ZXA6MSxmcm9tOjMsdG86NyxwcmVmaXg6XCLigr1cIixpc1ByZWZpeDohMCxpc0xhYmVsOiEwLGlzU2NhbGU6ITAsY29sb3I6XCJvcmFuZ2VcIixpc1NjYWxlUHJlZml4OiEwLHNjYWxlUHJlZml4Olwi4oK9XCIsbWluTWF4OiExLGZyb21UbzohMSxpc1RyYWNrUHJlZml4OiEwLHRyYWNrUHJlZml4Olwi4oK9XCIsaXNDb2xvcjohMCxjaGFuZ2VDb2xvcjohMCxpc0NoYW5nZUNvbG9yOiEwLGlzR3JhZGllbnQ6ITAsZ3JhZGllbnQ6XCJwdXJwbGVcIixncmFkaWVudERlZzo0NSxpc0NvbG9yT3V0OiExLG9ubHlEaXZpc2lvbnM6ITEsYWxsQ29sb3JzOnIoMTEpLmFsbENvbG9yc307dC5zdGFuZGFyZE9wdGlvbnM9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpLG89ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09aSYmKGk9Qm9vbGVhbih3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYikpLGl9LG49ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09ZVt0XSl7dmFyIHI9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTtpZih3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQmJnIgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e3I9ci5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaChlKXtyPW51bGx9ZVt0XT1yfXJldHVybiBlW3RdfX0oKSxhPVtdO2Z1bmN0aW9uIHMoZSl7Zm9yKHZhciB0PS0xLHI9MDtyPGEubGVuZ3RoO3IrKylpZihhW3JdLmlkZW50aWZpZXI9PT1lKXt0PXI7YnJlYWt9cmV0dXJuIHR9ZnVuY3Rpb24gbChlLHQpe2Zvcih2YXIgcj17fSxpPVtdLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIG49ZVtvXSxsPXQuYmFzZT9uWzBdK3QuYmFzZTpuWzBdLGM9cltsXXx8MCxkPVwiXCIuY29uY2F0KGwsXCIgXCIpLmNvbmNhdChjKTtyW2xdPWMrMTt2YXIgdT1zKGQpLGY9e2NzczpuWzFdLG1lZGlhOm5bMl0sc291cmNlTWFwOm5bM119Oy0xIT09dT8oYVt1XS5yZWZlcmVuY2VzKyssYVt1XS51cGRhdGVyKGYpKTphLnB1c2goe2lkZW50aWZpZXI6ZCx1cGRhdGVyOm0oZix0KSxyZWZlcmVuY2VzOjF9KSxpLnB1c2goZCl9cmV0dXJuIGl9ZnVuY3Rpb24gYyhlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksaT1lLmF0dHJpYnV0ZXN8fHt9O2lmKHZvaWQgMD09PWkubm9uY2Upe3ZhciBvPXIubmM7byYmKGkubm9uY2U9byl9aWYoT2JqZWN0LmtleXMoaSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5zZXRBdHRyaWJ1dGUoZSxpW2VdKX0pKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluc2VydCllLmluc2VydCh0KTtlbHNle3ZhciBhPW4oZS5pbnNlcnR8fFwiaGVhZFwiKTtpZighYSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO2EuYXBwZW5kQ2hpbGQodCl9cmV0dXJuIHR9dmFyIGQsdT0oZD1bXSxmdW5jdGlvbihlLHQpe3JldHVybiBkW2VdPXQsZC5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKX0pO2Z1bmN0aW9uIGYoZSx0LHIsaSl7dmFyIG89cj9cIlwiOmkubWVkaWE/XCJAbWVkaWEgXCIuY29uY2F0KGkubWVkaWEsXCIge1wiKS5jb25jYXQoaS5jc3MsXCJ9XCIpOmkuY3NzO2lmKGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD11KHQsbyk7ZWxzZXt2YXIgbj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSxhPWUuY2hpbGROb2RlczthW3RdJiZlLnJlbW92ZUNoaWxkKGFbdF0pLGEubGVuZ3RoP2UuaW5zZXJ0QmVmb3JlKG4sYVt0XSk6ZS5hcHBlbmRDaGlsZChuKX19ZnVuY3Rpb24gcChlLHQscil7dmFyIGk9ci5jc3Msbz1yLm1lZGlhLG49ci5zb3VyY2VNYXA7aWYobz9lLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsbyk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKSxuJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYnRvYSYmKGkrPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkobikpKSksXCIgKi9cIikpLGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1pO2Vsc2V7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGkpKX19dmFyIGg9bnVsbCx2PTA7ZnVuY3Rpb24gbShlLHQpe3ZhciByLGksbztpZih0LnNpbmdsZXRvbil7dmFyIG49disrO3I9aHx8KGg9Yyh0KSksaT1mLmJpbmQobnVsbCxyLG4sITEpLG89Zi5iaW5kKG51bGwscixuLCEwKX1lbHNlIHI9Yyh0KSxpPXAuYmluZChudWxsLHIsdCksbz1mdW5jdGlvbigpeyFmdW5jdGlvbihlKXtpZihudWxsPT09ZS5wYXJlbnROb2RlKXJldHVybiExO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX0ocil9O3JldHVybiBpKGUpLGZ1bmN0aW9uKHQpe2lmKHQpe2lmKHQuY3NzPT09ZS5jc3MmJnQubWVkaWE9PT1lLm1lZGlhJiZ0LnNvdXJjZU1hcD09PWUuc291cmNlTWFwKXJldHVybjtpKGU9dCl9ZWxzZSBvKCl9fWUuZXhwb3J0cz1mdW5jdGlvbihlLHQpeyh0PXR8fHt9KS5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgdC5zaW5nbGV0b258fCh0LnNpbmdsZXRvbj1vKCkpO3ZhciByPWwoZT1lfHxbXSx0KTtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoZT1lfHxbXSxcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpe2Zvcih2YXIgaT0wO2k8ci5sZW5ndGg7aSsrKXt2YXIgbz1zKHJbaV0pO2Fbb10ucmVmZXJlbmNlcy0tfWZvcih2YXIgbj1sKGUsdCksYz0wO2M8ci5sZW5ndGg7YysrKXt2YXIgZD1zKHJbY10pOzA9PT1hW2RdLnJlZmVyZW5jZXMmJihhW2RdLnVwZGF0ZXIoKSxhLnNwbGljZShkLDEpKX1yPW59fX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihpPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPTEsaT1hcmd1bWVudHMubGVuZ3RoO3I8aTtyKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW3JdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG8sbj1yKDQpLGE9cigxKTtyKDEyKSwobz1qUXVlcnkpLmZuLmNvbG9yU2xpZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2luaXQ6ZnVuY3Rpb24oZSx0KXt2YXIgcj1vLmV4dGVuZCh7fSxhLnN0YW5kYXJkT3B0aW9ucyx0KTtyZXR1cm4gZS5kYXRhKFwicHJlc2VudGVyXCIsbmV3IG4uUHJlc2VudGVyKHIsZSkpLGUuZGF0YShcIm9wdGlvbnNcIixpKGkoe30sciksZS5kYXRhKFwicHJlc2VudGVyXCIpLmdldE9wdGlvbnMoKSkpLGV9LGNoYW5nZTpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P2UuZGF0YShcInByZXNlbnRlclwiKTooZS5kYXRhKFwicHJlc2VudGVyXCIpLnNldE9wdGlvbnModCksZS5kYXRhKFwicHJlc2VudGVyXCIpLnVwRGF0YVZpZXcoKSx0aGlzKX0sZ2V0VmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5kYXRhKFwicHJlc2VudGVyXCIpLmVtaXR0ZXIuc3Vic2NyaWJlKFwibmV3RGF0YVwiLHQpLHZvaWQgMD09PXR8fGUuZGF0YShcInByZXNlbnRlclwiKS5lbWl0dGVyLnN1YnNjcmliZShcIm5ld0RhdGFcIix0KSx0aGlzfX07cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJlwiY2hhbmdlXCI9PT1lP3JbZV0uY2FsbCh0aGlzLHRoaXMsYXJndW1lbnRzWzFdKTooXCJzdHJpbmdcIj09dHlwZW9mIGUmJlwiZ2V0VmFsdWVcIj09PWUmJnJbZV0uY2FsbCh0aGlzLHRoaXMsYXJndW1lbnRzWzFdKSxcIm9iamVjdFwiIT10eXBlb2YgZSYmZT92b2lkIDA6ci5pbml0KHRoaXMsZSkpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXRoaXMmJnRoaXMuX19hc3NpZ258fGZ1bmN0aW9uKCl7cmV0dXJuKGk9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9MSxpPWFyZ3VtZW50cy5sZW5ndGg7cjxpO3IrKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbcl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlByZXNlbnRlcj12b2lkIDA7dmFyIG89cig1KSxuPXIoNiksYT1yKDApLHM9cigxKSxsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuZWxlbWVudD10LHRoaXMuZW1pdHRlcj1uZXcgYS5FdmVudEVtaXR0ZXIsdGhpcy5tb2RlbD10aGlzLmNyZWF0ZU1vZGVsKGUpLHRoaXMudmlldz10aGlzLmNyZWF0ZVZpZXcodGhpcy5tb2RlbC5zdGF0ZSx0KSx0aGlzLmJpbmRTdWJzY3JpYmUoKX1yZXR1cm4gZS5wcm90b3R5cGUudXBEYXRhVmlldz1mdW5jdGlvbigpe3RoaXMudmlldy51cERhdGFTbGlkZXIoKX0sZS5wcm90b3R5cGUuc2V0T3B0aW9ucz1mdW5jdGlvbihlKXt2YXIgdD1pKGkoe30scy5zdGFuZGFyZE9wdGlvbnMpLGUpO3RoaXMubW9kZWwuc2V0RGF0YSh0KX0sZS5wcm90b3R5cGUuZ2V0T3B0aW9ucz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1vZGVsLnN0YXRlfSxlLnByb3RvdHlwZS5jcmVhdGVNb2RlbD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IG8uTW9kZWwoZSl9LGUucHJvdG90eXBlLmNyZWF0ZVZpZXc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IG4uVmlldyhlLHQpfSxlLnByb3RvdHlwZS5iaW5kU3Vic2NyaWJlPWZ1bmN0aW9uKCl7dGhpcy5nZXROZXdEYXRhPXRoaXMuZ2V0TmV3RGF0YS5iaW5kKHRoaXMpLHRoaXMuc2VuZE5ld1Bvc2l0aW9uPXRoaXMuc2VuZE5ld1Bvc2l0aW9uLmJpbmQodGhpcyksdGhpcy5hZGRTdWJzY3JpYnRpb25zKCl9LGUucHJvdG90eXBlLmFkZFN1YnNjcmlidGlvbnM9ZnVuY3Rpb24oKXt0aGlzLm1vZGVsLmVtaXR0ZXIuc3Vic2NyaWJlKFwibmV3RGF0YVwiLHRoaXMuZ2V0TmV3RGF0YSksdGhpcy52aWV3LmVtaXR0ZXIuc3Vic2NyaWJlKFwibmV3UG9zaXRpb25cIix0aGlzLnNlbmROZXdQb3NpdGlvbil9LGUucHJvdG90eXBlLmdldE5ld0RhdGE9ZnVuY3Rpb24oZSl7dGhpcy52aWV3LnVwRGF0YShlKSx0aGlzLmVtaXR0ZXIuZW1pdChcIm5ld0RhdGFcIixlKX0sZS5wcm90b3R5cGUuc2VuZE5ld1Bvc2l0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubW9kZWwuc3RhdGUscj1pKGkoe30sdCksZSk7dGhpcy5tb2RlbC5zZXREYXRhKHIpfSxlfSgpO3QuUHJlc2VudGVyPWx9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10aGlzJiZ0aGlzLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihpPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPTEsaT1hcmd1bWVudHMubGVuZ3RoO3I8aTtyKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW3JdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Nb2RlbD12b2lkIDA7dmFyIG89cigwKSxuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmVtaXR0ZXI9bmV3IG8uRXZlbnRFbWl0dGVyLHRoaXMuc3RhdGU9dGhpcy5pbml0KGUpfXJldHVybiBlLnByb3RvdHlwZS5zZXREYXRhPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMudmFsaWRhdGVGcm9tVG8oZSkscj10aGlzLnZhbGlkYXRlTWluTWF4U3RlcChlKTt0aGlzLnN0YXRlPWkoaShpKHt9LGUpLHQpLHIpLHRoaXMuZW1pdHRlci5lbWl0KFwibmV3RGF0YVwiLHRoaXMuc3RhdGUpfSxlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNldERhdGEoZSksdGhpcy5zdGF0ZX0sZS5wcm90b3R5cGUudmFsaWRhdGVNaW5NYXhTdGVwPWZ1bmN0aW9uKGUpe3ZhciB0PWUubWluLHI9ZS5tYXgsaT1lLnN0ZXA7aTwxJiYoZS5zdGVwPTEpO3ZhciBvPU1hdGguYWJzKHIpLzI7cmV0dXJuIGk+byYmKGUuc3RlcD1vKSxyPD10JiZyPDAmJihlLm1pbj10LWkpLHQ+PXImJnI+MCYmKGUubWluPXQsZS5tYXg9dCtpKSxyPDAmJnI8dCYmKGUubWF4PXQraSxlLm1pbj10KSxlfSxlLnByb3RvdHlwZS52YWxpZGF0ZUZyb21Ubz1mdW5jdGlvbihlKXt2YXIgdD1lLmZyb20scj1lLnRvLGk9ZS5tYXgsbz1lLm1pbixuPWUudHlwZSxhPWUuc3RlcDtyZXR1cm5cInNpbmdsZVwiPT09biYmKGUudG89aSksbz50JiYoZS5mcm9tPW8pLHI+aSYmKGUudG89aSksaTwwJiYwPT09byYmKGUuZnJvbT1vLGUudG89byksXCJkb3VibGVcIj09PW4mJnQ+PXImJihlLmZyb209ci1hKSxyPD1vJiYoZS50bz1vK2EsZS5mcm9tPW8pLHQ+MCYmbzwwJiZpPDAmJihlLmZyb209byksaTxvJiYoZS50bz1vK2EpLGV9LGV9KCk7dC5Nb2RlbD1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4oaT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQscj0xLGk9YXJndW1lbnRzLmxlbmd0aDtyPGk7cisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tyXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVmlldz12b2lkIDA7dmFyIG89cigwKSxuPXIoNyksYT1yKDgpLHM9cig5KSxsPXIoMTApLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5lbWl0dGVyPW5ldyBvLkV2ZW50RW1pdHRlcix0aGlzLmVsZW1lbnQ9dCx0aGlzLnNsaWRlcj10aGlzLmNyZWF0ZVNsaWRlcihlLHQpLHRoaXMuc3RhdGU9dGhpcy5pbml0KGUpLHRoaXMucm9sbGVycz10aGlzLmNyZWF0ZVJvbGxlcnModGhpcy5zdGF0ZSksdGhpcy5iYXI9dGhpcy5jcmVhdGVCYXIodGhpcy5zdGF0ZSksdGhpcy50cmFjaz10aGlzLmNyZWF0ZVRyYWNrKHRoaXMuc3RhdGUpLHRoaXMuc2NhbGU9dGhpcy5jcmVhdGVTY2FsZSh0aGlzLnN0YXRlKSx0aGlzLnVwRGF0YSh0aGlzLnN0YXRlKSx0aGlzLmJpbmRFdmVudExpc3RlbmVycygpfXJldHVybiBlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0U2xpZGVyU2l6ZShlKSxyPXRoaXMuZ2V0T25lU3RlcChlKSxvPXRoaXMuc2xpZGVyO3JldHVybiBpKGkoe30sZSkse3NpemU6dCxvbmVTdGVwOnIsc2xpZGVyOm99KX0sZS5wcm90b3R5cGUuY3JlYXRlU2xpZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5vcmllbnRhdGlvbixpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIGkuY2xhc3NOYW1lPVwic2xpZGVyIHNsaWRlcl9cIityLHQuYXBwZW5kKGkpLGl9LGUucHJvdG90eXBlLmNyZWF0ZVRyYWNrPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYS5UcmFjayhlKX0sZS5wcm90b3R5cGUuY3JlYXRlQmFyPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbC5CYXIoZSl9LGUucHJvdG90eXBlLmNyZWF0ZVJvbGxlcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBuLlJvbGxlcnMoZSl9LGUucHJvdG90eXBlLmNyZWF0ZVNjYWxlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcy5TY2FsZShlKX0sZS5wcm90b3R5cGUudXBEYXRhPWZ1bmN0aW9uKGUpe3ZhciB0PWkoaSh7fSx0aGlzLnN0YXRlKSxlKTt0aGlzLnJvbGxlcnMudXBEYXRhKHQpLHRoaXMuYmFyLnVwRGF0YSh0KSx0aGlzLnNjYWxlLnVwRGF0YSh0KSx0aGlzLnRyYWNrLnVwRGF0YSh0KSx0aGlzLnN0YXRlPWkoe30sdCl9LGUucHJvdG90eXBlLnVwRGF0YVNsaWRlcj1mdW5jdGlvbigpe3RoaXMuc2xpZGVyLnJlbW92ZSgpLHRoaXMuc2xpZGVyPXRoaXMuY3JlYXRlU2xpZGVyKHRoaXMuc3RhdGUsdGhpcy5lbGVtZW50KSx0aGlzLnN0YXRlPXRoaXMuaW5pdCh0aGlzLnN0YXRlKSx0aGlzLnJvbGxlcnM9dGhpcy5jcmVhdGVSb2xsZXJzKHRoaXMuc3RhdGUpLHRoaXMuc2NhbGU9dGhpcy5jcmVhdGVTY2FsZSh0aGlzLnN0YXRlKSx0aGlzLnRyYWNrPXRoaXMuY3JlYXRlVHJhY2sodGhpcy5zdGF0ZSksdGhpcy5iYXI9dGhpcy5jcmVhdGVCYXIodGhpcy5zdGF0ZSksdGhpcy51cERhdGEodGhpcy5zdGF0ZSksdGhpcy5iaW5kRXZlbnRMaXN0ZW5lcnMoKX0sZS5wcm90b3R5cGUuZ2V0T25lU3RlcD1mdW5jdGlvbihlKXt2YXIgdD1lLm1pbixyPWUubWF4LGk9ZS5zdGVwLG89TWF0aC5jZWlsKChyLXQpL2kpO3JldHVybiB0aGlzLmdldFNsaWRlclNpemUoZSkvb30sZS5wcm90b3R5cGUuYmluZEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dGhpcy5vblRyYWNrQ2xpY2s9dGhpcy5vblRyYWNrQ2xpY2suYmluZCh0aGlzKSx0aGlzLm9uU2NhbGVDbGljaz10aGlzLm9uU2NhbGVDbGljay5iaW5kKHRoaXMpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKX0sZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmRyYWdTdGFydC5iaW5kKHRoaXMpO3RoaXMuc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsZSksdGhpcy5zbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLGUpLHRoaXMuc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25UcmFja0NsaWNrKSx0aGlzLnNsaWRlci5hZGRFdmVudExpc3RlbmVyKFwic2NhbGVjbGlja1wiLHRoaXMub25TY2FsZUNsaWNrKX0sZS5wcm90b3R5cGUuZHJhZ1N0YXJ0PWZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0O2lmKHRoaXMuZ2V0VGFyZ2V0VHlwZSh0KSl7dmFyIHI9dGhpcy5kcmFnLmJpbmQodGhpcyx0KSxpPWZ1bmN0aW9uKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHIpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHIpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsaSksdC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixpKX07ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHIpLHQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHIpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsaSksdC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixpKX19LGUucHJvdG90eXBlLmRyYWc9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLnN0YXRlLm9yaWVudGF0aW9uLGk9MDt0LnByZXZlbnREZWZhdWx0KCksL3JvbGxlci8udGVzdChlLmNsYXNzTmFtZSkmJihpPVwiaG9yaXpvbnRhbFwiPT09cj9cInRvdWNobW92ZVwiPT09dC50eXBlP3RoaXMuY29udmVydFB4VG9WYWx1ZSh0LnRvdWNoZXNbMF0uY2xpZW50WCk6dGhpcy5jb252ZXJ0UHhUb1ZhbHVlKHQuY2xpZW50WCk6XCJ0b3VjaG1vdmVcIj09PXQudHlwZT90aGlzLmNvbnZlcnRQeFRvVmFsdWUodC50b3VjaGVzWzBdLmNsaWVudFkpOnRoaXMuY29udmVydFB4VG9WYWx1ZSh0LmNsaWVudFkpLHRoaXMudXBkYXRlUG9zaXRpb24oaSxlKSl9LGUucHJvdG90eXBlLmdldFRhcmdldFR5cGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zbGlkZXIucXVlcnlTZWxlY3RvckFsbChcIi5zbGlkZXJfX3JvbGxlclwiKTtyZXR1cm4gdFswXSYmdFswXS5jb250YWlucyhlKT9cImZyb21cIjp0WzFdLmNvbnRhaW5zKGUpP1widG9cIjpcInVuZGVmaW5lZFwifSxlLnByb3RvdHlwZS5vblNjYWxlQ2xpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kZXRhaWwudmFsdWU7dGhpcy51cGRhdGVQb3NpdGlvbih0KX0sZS5wcm90b3R5cGUub25UcmFja0NsaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc3RhdGUub3JpZW50YXRpb24scj1lLnRhcmdldCxpPTA7aWYoIS9zY2FsZS8udGVzdChyLmNsYXNzTmFtZSkpe2k9XCJob3Jpem9udGFsXCI9PT10P2UuY2xpZW50WDplLmNsaWVudFk7dmFyIG89dGhpcy5jb252ZXJ0UHhUb1ZhbHVlKGkpO3RoaXMudXBkYXRlUG9zaXRpb24obyl9fSxlLnByb3RvdHlwZS51cGRhdGVQb3NpdGlvbj1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuc3RhdGUsaT1yLmZyb20sbz1yLnRvLG49ci50eXBlLGE9ci5zdGVwO3RoaXMuY29udmVydFZhbHVlVG9Db2xvcihlKTt2YXIgcz1NYXRoLmFicyhpLWUpLGw9TWF0aC5hYnMoby1lKTtcInNpbmdsZVwiPT09biYmcz90aGlzLmVtaXR0ZXIuZW1pdChcIm5ld1Bvc2l0aW9uXCIse2Zyb206ZX0pOnQ/XCJmcm9tXCI9PT10aGlzLmdldFRhcmdldFR5cGUodCk/KGU+by1hJiYoZT1pKSx0aGlzLmVtaXR0ZXIuZW1pdChcIm5ld1Bvc2l0aW9uXCIse2Zyb206ZX0pKTooZTxpK2EmJihlPW8pLHRoaXMuZW1pdHRlci5lbWl0KFwibmV3UG9zaXRpb25cIix7dG86ZX0pKTpcImZyb21cIj09PShzPGw/XCJmcm9tXCI6XCJ0b1wiKT90aGlzLmVtaXR0ZXIuZW1pdChcIm5ld1Bvc2l0aW9uXCIse2Zyb206ZX0pOnRoaXMuZW1pdHRlci5lbWl0KFwibmV3UG9zaXRpb25cIix7dG86ZX0pfSxlLnByb3RvdHlwZS5jb252ZXJ0UHhUb1ZhbHVlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc3RhdGUscj10Lm1pbixpPXQubWF4LG89dC5zdGVwLG49dC5vbmVTdGVwLGE9dC5zaXplLHM9dC5vcmllbnRhdGlvbixsPXRoaXMuZ2V0U2xpZGVyUG9zaXRpb24oKSxjPTA7cmV0dXJuKGM9XCJob3Jpem9udGFsXCI9PT1zP2UtbDpsK2EtZSk+YT9pOmM8MD9yOk1hdGgucm91bmQoYy9uKSpvK3J9LGUucHJvdG90eXBlLmNvbnZlcnRWYWx1ZVRvQ29sb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zdGF0ZSxyPXQuY29sb3IsaT10LmdyYWRpZW50LG89dGhpcy5zdGF0ZSxuPW8ubWF4LGE9by5pc0NvbG9yLHM9by5jaGFuZ2VDb2xvcixsPWUvbjtpZighMD09PWEpe3ZhciBjPTAsZD0wOyExPT09cz8oYz1NYXRoLnJvdW5kKDI1NSpsKjI1NSoyNTUpLGQ9TWF0aC5yb3VuZCgyNTUqbCoyNTQqMjU0KSk6KGM9TWF0aC5yb3VuZCgyNTYqbCoyNTYqMjU1KSxkPU1hdGgucm91bmQoMjU0KmwqMjU0KjI1NCkpO3ZhciB1PU1hdGguYWJzKGQpO3I9XCIjXCIrTWF0aC5hYnMoYykudG9TdHJpbmcoMTYpLGk9XCIjXCIrdS50b1N0cmluZygxNiksdGhpcy5lbWl0dGVyLmVtaXQoXCJuZXdQb3NpdGlvblwiLHtjb2xvcjpyfSksdGhpcy5lbWl0dGVyLmVtaXQoXCJuZXdQb3NpdGlvblwiLHtncmFkaWVudDppfSl9fSxlLnByb3RvdHlwZS5nZXRTbGlkZXJQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuc3RhdGUsdD1lLm9yaWVudGF0aW9uLHI9ZS5zbGlkZXI7cmV0dXJuXCJob3Jpem9udGFsXCI9PT10P3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDpyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcH0sZS5wcm90b3R5cGUuZ2V0U2xpZGVyU2l6ZT1mdW5jdGlvbihlKXtyZXR1cm5cImhvcml6b250YWxcIj09PWUub3JpZW50YXRpb24/dGhpcy5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg6dGhpcy5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0fSxlfSgpO3QuVmlldz1jfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Sb2xsZXJzPXZvaWQgMDt2YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5jcmVhdGUoZSl9cmV0dXJuIGUucHJvdG90eXBlLmNyZWF0ZT1mdW5jdGlvbihlKXt2YXIgdD1lLnNsaWRlcixyPWUub3JpZW50YXRpb24saT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuY2xhc3NOYW1lPVwic2xpZGVyX19yb2xsZXIgc2xpZGVyX19yb2xsZXJfZmlyc3Qgc2xpZGVyX19yb2xsZXJfXCIrcjt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO28uY2xhc3NOYW1lPVwic2xpZGVyX19yb2xsZXJfc2Vjb25kXFxuICAgICAgc2xpZGVyX19yb2xsZXJcXG4gICAgICBzbGlkZXJfX3JvbGxlcl9cIityLHQuYXBwZW5kKGkpLHQuYXBwZW5kKG8pLHRoaXMuY3JlYXRlVG9vbHRpcChpLG8sZSksdGhpcy5tb3ZlUm9sbGVyc0F0VmFsdWUoZSxpLG8pLHRoaXMudG9nZ2xlUm9sbGVycyhlLG8pLHRoaXMudXBkYXRhQ29sb3IoZSxpLG8pfSxlLnByb3RvdHlwZS5jcmVhdGVUb29sdGlwPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1yLm9yaWVudGF0aW9uLG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtvLmNsYXNzTmFtZT1cInNsaWRlcl9fdG9vbHRpcF9maXJzdCBzbGlkZXJfX3Rvb2x0aXAgc2xpZGVyX190b29sdGlwX1wiK2k7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuLmNsYXNzTmFtZT1cInNsaWRlcl9fdG9vbHRpcF9zZWNvbmQgc2xpZGVyX190b29sdGlwIHNsaWRlcl9fdG9vbHRpcF9cIitpLGUuYXBwZW5kKG8pLHQuYXBwZW5kKG4pLHRoaXMudXBkYXRhT3V0VG9vbHRpcChvLG4scil9LGUucHJvdG90eXBlLnVwZGF0YU91dFRvb2x0aXA9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPXIudG8sbz1yLmZyb20sbj1yLmNvbG9yLGE9ci5wcmVmaXgscz1yLmlzUHJlZml4LGw9ci5pc0xhYmVsLGM9ci5ncmFkaWVudCxkPXIuaXNDb2xvck91dCx1PXIuYWxsQ29sb3JzLGY9ci5pc0NoYW5nZUNvbG9yOyEwPT09bCYmKCEwPT09cyYmKGUuaW5uZXJIVE1MPVwiXCIrby50b0xvY2FsZVN0cmluZygpK2EsdC5pbm5lckhUTUw9XCJcIitpLnRvTG9jYWxlU3RyaW5nKCkrYSksITE9PT1zJiYoZS5pbm5lckhUTUw9by50b0xvY2FsZVN0cmluZygpLHQuaW5uZXJIVE1MPWkudG9Mb2NhbGVTdHJpbmcoKSkpO3ZhciBwPXVbbl0saD11W2NdO3ZvaWQgMD09PWgmJihoPWMpLHZvaWQgMD09PXAmJihwPW4pLCEwPT09ZiYmITA9PT1kJiYoZS5pbm5lckhUTUw9cC50b0xvY2FsZVN0cmluZygpLHQuaW5uZXJIVE1MPWgudG9Mb2NhbGVTdHJpbmcoKSxlLnN0eWxlLmJhY2tncm91bmRDb2xvcj1cIlwiK24sdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJcIitjLGUuY2xhc3NMaXN0LmFkZChcInNsaWRlcl9fdG9vbHRpcF9iZ1wiKSx0LmNsYXNzTGlzdC5hZGQoXCJzbGlkZXJfX3Rvb2x0aXBfYmdcIikpLCExPT09bCYmKGUuY2xhc3NMaXN0LmFkZChcInNsaWRlcl9fdG9vbHRpcF9kaXNwbGF5LW5vbmVcIiksdC5jbGFzc0xpc3QuYWRkKFwic2xpZGVyX190b29sdGlwX2Rpc3BsYXktbm9uZVwiKSl9LGUucHJvdG90eXBlLnVwZGF0YUNvbG9yPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1lLmNvbG9yLG89ZS5pc0dyYWRpZW50LG49ZS5ncmFkaWVudCxhPWUuaXNDaGFuZ2VDb2xvcixzPWUuZ3JhZGllbnREZWc7ITA9PT1hJiYoITA9PT1vPyh0LnN0eWxlLmJhY2tncm91bmQ9XCJsaW5lYXItZ3JhZGllbnQoXCIrcytcImRlZywgXCIraStcIiwgXCIrbitcIilcIixyLnN0eWxlLmJhY2tncm91bmQ9XCJsaW5lYXItZ3JhZGllbnQoXCIrcytcImRlZywgXCIraStcIiwgXCIrbitcIilcIik6KHQuc3R5bGUuYmFja2dyb3VuZD1pLHIuc3R5bGUuYmFja2dyb3VuZD1pKSl9LGUucHJvdG90eXBlLm1vdmVSb2xsZXJzQXRWYWx1ZT1mdW5jdGlvbihlLHQscil7dmFyIGk9ZS50byxvPWUuZnJvbSxuPWUub3JpZW50YXRpb24sYT10aGlzLmNvbnZlcnRWYWx1ZVRvUHgoaSxlKSxzPXRoaXMuY29udmVydFZhbHVlVG9QeChvLGUpLGw9dGhpcy5jb252ZXJ0UHhUb1Byb2NlbnQoYSxlKSxjPXRoaXMuY29udmVydFB4VG9Qcm9jZW50KHMsZSk7XCJob3Jpem9udGFsXCI9PT1uPyh0LnN0eWxlLmxlZnQ9YytcIiVcIixyLnN0eWxlLmxlZnQ9bCtcIiVcIik6KHQuc3R5bGUuYm90dG9tPWMrXCIlXCIsci5zdHlsZS5ib3R0b209bCtcIiVcIil9LGUucHJvdG90eXBlLnVwRGF0YT1mdW5jdGlvbihlKXt2YXIgdD1lLnNsaWRlcixyPXQucXVlcnlTZWxlY3RvcihcIi5zbGlkZXJfX3JvbGxlcl9maXJzdFwiKSxpPXQucXVlcnlTZWxlY3RvcihcIi5zbGlkZXJfX3JvbGxlcl9zZWNvbmRcIiksbz10LnF1ZXJ5U2VsZWN0b3IoXCIuc2xpZGVyX190b29sdGlwX2ZpcnN0XCIpLG49dC5xdWVyeVNlbGVjdG9yKFwiLnNsaWRlcl9fdG9vbHRpcF9zZWNvbmRcIik7dGhpcy5tb3ZlUm9sbGVyc0F0VmFsdWUoZSxyLGkpLHRoaXMudG9nZ2xlUm9sbGVycyhlLGkpLHRoaXMudXBkYXRhQ29sb3IoZSxyLGkpLHRoaXMudXBkYXRhT3V0VG9vbHRpcChvLG4sZSl9LGUucHJvdG90eXBlLmNvbnZlcnRWYWx1ZVRvUHg9ZnVuY3Rpb24oZSx0KXt2YXIgcj10Lm1pbixpPXQubWF4LG89dC5zdGVwLG49dC5zaXplLGE9dC5vbmVTdGVwO3JldHVybiBlPT09aT9uOk1hdGgucm91bmQoKGUtcikvbykqYX0sZS5wcm90b3R5cGUuY29udmVydFB4VG9Qcm9jZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDEwMCplL3Quc2l6ZX0sZS5wcm90b3R5cGUudG9nZ2xlUm9sbGVycz1mdW5jdGlvbihlLHQpe3ZhciByPWUudHlwZTt0LnN0eWxlLmRpc3BsYXk9XCJzaW5nbGVcIj09PXI/XCJub25lXCI6XCJibG9ja1wifSxlfSgpO3QuUm9sbGVycz1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5UcmFjaz12b2lkIDA7dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuY3JlYXRlKGUpfXJldHVybiBlLnByb3RvdHlwZS5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zbGlkZXIscj1lLm9yaWVudGF0aW9uLGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpLmNsYXNzTmFtZT1cInNsaWRlcl9fdHJhY2sgc2xpZGVyX190cmFja19cIityLHQuYXBwZW5kKGkpLHRoaXMuY3JlYXRlT3V0RWxlbWVudChpLGUpfSxlLnByb3RvdHlwZS5jcmVhdGVPdXRFbGVtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dC5vcmllbnRhdGlvbixpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuY2xhc3NOYW1lPVwic2xpZGVyX19vdXQgc2xpZGVyX19vdXQtc3RhcnQgc2xpZGVyX19vdXQtc3RhcnRfXCIrcixvLmNsYXNzTmFtZT1cInNsaWRlcl9fb3V0IHNsaWRlcl9fb3V0LWVuZCBzbGlkZXJfX291dC1lbmRfXCIrcixlLmFwcGVuZChpKSxlLmFwcGVuZChvKSx0aGlzLnNldFN0YXJ0RW5kVHJhY2tPdXQoaSxvLHQpfSxlLnByb3RvdHlwZS5zZXRTdGFydEVuZFRyYWNrT3V0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1yLm1pbixvPXIubWF4LG49ci5mcm9tLGE9ci50byxzPXIubWluTWF4LGw9ci5mcm9tVG8sYz1yLmlzVHJhY2tQcmVmaXgsZD1yLnRyYWNrUHJlZml4OyExPT09YyYmKGQ9XCJcIiksITA9PT1zJiYoZS5pbm5lckhUTUw9XCJcIitpLnRvTG9jYWxlU3RyaW5nKCkrZCx0LmlubmVySFRNTD1cIlwiK28udG9Mb2NhbGVTdHJpbmcoKStkKSwhMD09PWwmJihlLmlubmVySFRNTD1cIlwiK24udG9Mb2NhbGVTdHJpbmcoKStkLHQuaW5uZXJIVE1MPVwiXCIrYS50b0xvY2FsZVN0cmluZygpK2QpfSxlLnByb3RvdHlwZS51cERhdGE9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zbGlkZXIscj10LnF1ZXJ5U2VsZWN0b3IoXCIuc2xpZGVyX19vdXQtc3RhcnRcIiksaT10LnF1ZXJ5U2VsZWN0b3IoXCIuc2xpZGVyX19vdXQtZW5kXCIpO3RoaXMuc2V0U3RhcnRFbmRUcmFja091dChyLGksZSl9LGV9KCk7dC5UcmFjaz1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TY2FsZT12b2lkIDA7dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuY3JlYXRlKGUpfXJldHVybiBlLnByb3RvdHlwZS5jcmVhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zbGlkZXIscj1lLm9yaWVudGF0aW9uLGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpLmNsYXNzTmFtZT1cInNsaWRlcl9fc2NhbGUgc2xpZGVyX19zY2FsZV9cIityLHQuYXBwZW5kKGkpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoaSksdGhpcy5hZGRTY2FsZU1hcmtlcihlLGkpLHRoaXMuY2hlY2tTY2FsZShlLGkpfSxlLnByb3RvdHlwZS51cERhdGE9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zbGlkZXIucXVlcnlTZWxlY3RvcihcIi5zbGlkZXJfX3NjYWxlXCIpO3RoaXMuY2hlY2tTY2FsZShlLHQpLHRoaXMudXBkYXRhU2NhbGVNYXJrZXIoZSl9LGUucHJvdG90eXBlLnVwZGF0YVNjYWxlTWFya2VyPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc2NhbGVQcmVmaXgscj1lLmlzU2NhbGVQcmVmaXgsaT1lLm9ubHlEaXZpc2lvbnMsbz1lLnNsaWRlcixuPWUuY29sb3I7by5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWRlcl9fc2NhbGUtdmFsdWVcIikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ITA9PT1yP2Uuc2V0QXR0cmlidXRlKFwiZGF0YS10ZXh0XCIsXCJcIit0KTplLnNldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiLFwiXCIpLCEwPT09aT8oZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRleHRcIixcIlwiKSxlLmNsYXNzTGlzdC5hZGQoXCJzbGlkZXJfX3NjYWxlLXZhbHVlX2ZzLTBcIikpOmUuY2xhc3NMaXN0LmFkZChcInNsaWRlcl9fc2NhbGUtdmFsdWVfZnMtbm9ybWFsXCIpfSkpLGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tc2NhbGUtY29sb3JcIixcIiBcIituKX0sZS5wcm90b3R5cGUuY2hlY2tTY2FsZT1mdW5jdGlvbihlLHQpe3ZhciByPWUuaXNTY2FsZTshMT09PXImJih0LnN0eWxlLmRpc3BsYXk9XCJub25lXCIpLCEwPT09ciYmKHQuc3R5bGUuZGlzcGxheT1cIlwiKX0sZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dGhpcy5vblNjYWxlQ2xpY2s9dGhpcy5vblNjYWxlQ2xpY2suYmluZCh0aGlzKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25TY2FsZUNsaWNrKX0sZS5wcm90b3R5cGUuYWRkU2NhbGVNYXJrZXI9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9ZS5taW4saT1lLm1heCxvPWUuc3RlcCxuPWUuc2l6ZSxhPWUub25lU3RlcCxzPXRoaXMuZ2V0SW5jcmVtZW50KGUpLGw9cy9vKmEsYz1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksZD0wLHU9cjt1PGkmJiEoZD5uLTUwKTt1Kz1zKXRoaXMuY3JlYXRlU2NhbGVNYXJrZXIoYyx1LGQsZSksZCs9bDt0aGlzLmNyZWF0ZVNjYWxlTWFya2VyKGMsaSxuLGUpLHQuYXBwZW5kKGMpfSxlLnByb3RvdHlwZS5nZXRJbmNyZW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zaXplLHI9ZS5vbmVTdGVwLGk9ZS5zdGVwLG89TWF0aC5jZWlsKHQvcik7cmV0dXJuIE1hdGguY2VpbChvLzUpKml9LGUucHJvdG90eXBlLmNyZWF0ZVNjYWxlTWFya2VyPWZ1bmN0aW9uKGUsdCxyLGkpe3ZhciBvPWkub3JpZW50YXRpb24sbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtuLmNsYXNzTmFtZT1cInNsaWRlcl9fc2NhbGUtdmFsdWUgc2xpZGVyX19zY2FsZS12YWx1ZV9cIitvLGUuYXBwZW5kKG4pLG4uaW5uZXJIVE1MPXQudG9TdHJpbmcoKSx0aGlzLnVwZGF0YVNjYWxlTWFya2VyKGkpO3ZhciBhPXRoaXMuY29udmVydFB4VG9QZXJjZW50KHIsaSk7XCJob3Jpem9udGFsXCI9PT1vP24uc3R5bGUubGVmdD1hK1wiJVwiOm4uc3R5bGUuYm90dG9tPWErXCIlXCJ9LGUucHJvdG90eXBlLmNvbnZlcnRQeFRvUGVyY2VudD1mdW5jdGlvbihlLHQpe3JldHVybiAxMDAqZS90LnNpemV9LGUucHJvdG90eXBlLm9uU2NhbGVDbGljaz1mdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtpZih0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2xpZGVyX19zY2FsZS12YWx1ZVwiKSl7dmFyIHI9TnVtYmVyKHQuaW5uZXJIVE1MKSxpPW5ldyBDdXN0b21FdmVudChcInNjYWxlY2xpY2tcIix7YnViYmxlczohMCxkZXRhaWw6e2V2ZW50OmUsdmFsdWU6cn19KTt0LmRpc3BhdGNoRXZlbnQoaSl9fSxlfSgpO3QuU2NhbGU9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQmFyPXZvaWQgMDt2YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5jcmVhdGUoZSl9cmV0dXJuIGUucHJvdG90eXBlLmNyZWF0ZT1mdW5jdGlvbihlKXt2YXIgdD1lLnNsaWRlcixyPWUub3JpZW50YXRpb24saT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuY2xhc3NOYW1lPVwic2xpZGVyX19iYXIgc2xpZGVyX19iYXJfXCIrcix0LmFwcGVuZChpKSx0aGlzLnVwZGF0YUNvbG9yKGUsaSksdGhpcy51cGRhdGFCYXIoZSxpKX0sZS5wcm90b3R5cGUudXBEYXRhPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoXCIuc2xpZGVyX19iYXJcIik7dGhpcy51cGRhdGFDb2xvcihlLHQpLHRoaXMudXBkYXRhQmFyKGUsdCl9LGUucHJvdG90eXBlLnVwZGF0YUNvbG9yPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5jb2xvcixpPWUuaXNHcmFkaWVudCxvPWUuZ3JhZGllbnQsbj1lLmdyYWRpZW50RGVnOyEwPT09ZS5pc0NoYW5nZUNvbG9yJiYodC5zdHlsZS5iYWNrZ3JvdW5kPSEwPT09aT9cImxpbmVhci1ncmFkaWVudChcIituK1wiZGVnLCBcIityK1wiLCBcIitvK1wiKVwiOnIpfSxlLnByb3RvdHlwZS5nZXRSb2xsZXJQb3NpdGlvbnM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zbGlkZXIucXVlcnlTZWxlY3RvckFsbChcIi5zbGlkZXJfX3JvbGxlclwiKTtyZXR1cm5bdGhpcy5jYWxjdWxhdGVQb3NpdGlvbih0WzBdLGUpLHRoaXMuY2FsY3VsYXRlUG9zaXRpb24odFsxXSxlKV0uc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS10fSkpfSxlLnByb3RvdHlwZS5jYWxjdWxhdGVQb3NpdGlvbj1mdW5jdGlvbihlLHQpe3ZhciByPVwiaG9yaXpvbnRhbFwiPT09dC5vcmllbnRhdGlvbj9cImxlZnRcIjpcInRvcFwiLGk9TnVtYmVyLnBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoZSkud2lkdGgsMTApO3JldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3JdK2kvMn0sZS5wcm90b3R5cGUuY29udmVydFB4VG9Qcm9jZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDEwMCplL3Quc2l6ZX0sZS5wcm90b3R5cGUudXBkYXRhQmFyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS50eXBlLGk9XCJob3Jpem9udGFsXCI9PT1lLm9yaWVudGF0aW9uLG89aT9cImxlZnRcIjpcInRvcFwiLG49aT9cIndpZHRoXCI6XCJoZWlnaHRcIixhPXRoaXMuZ2V0Um9sbGVyUG9zaXRpb25zKGUpLHM9XCJzaW5nbGVcIj09PXIsbD10aGlzLmdldE5ld1NsaWRlclBvcyhlKTtpZihzKWlmKGkpe3ZhciBjPXRoaXMuY29udmVydFB4VG9Qcm9jZW50KE1hdGguYWJzKGFbMV0tbCksZSk7dC5zdHlsZVtvXT1cIjAlXCIsdC5zdHlsZVtuXT1jK1wiJVwifWVsc2V7Yz0xMDAtKGQ9dGhpcy5jb252ZXJ0UHhUb1Byb2NlbnQoTWF0aC5hYnMoYVsxXS1sKSxlKSk7dC5zdHlsZVtvXT1kK1wiJVwiLHQuc3R5bGVbbl09YytcIiVcIn1lbHNle3ZhciBkPXRoaXMuY29udmVydFB4VG9Qcm9jZW50KE1hdGguYWJzKGFbMF0tbCksZSk7Yz10aGlzLmNvbnZlcnRQeFRvUHJvY2VudChNYXRoLmFicyhhWzFdLWFbMF0pLGUpO3Quc3R5bGVbb109ZCtcIiVcIix0LnN0eWxlW25dPWMrXCIlXCJ9fSxlLnByb3RvdHlwZS5nZXROZXdTbGlkZXJQb3M9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vcmllbnRhdGlvbixyPWUuc2xpZGVyO3JldHVyblwiaG9yaXpvbnRhbFwiPT09dD9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ6ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3B9LGV9KCk7dC5CYXI9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYWxsQ29sb3JzPXZvaWQgMDt0LmFsbENvbG9ycz17XCIjZjBmOGZmXCI6XCJhbGljZWJsdWVcIixcIiNmYWViZDdcIjpcImFudGlxdWV3aGl0ZVwiLFwiIzAwZmZmZlwiOlwiYXF1YVwiLFwiIzdmZmZkNFwiOlwiYXF1YW1hcmluZVwiLFwiI2YwZmZmZlwiOlwiYXp1cmVcIixcIiNmNWY1ZGNcIjpcImJlaWdlXCIsXCIjZmZlNGM0XCI6XCJiaXNxdWVcIixcIiMwMDAwMDBcIjpcImJsYWNrXCIsXCIjZmZlYmNkXCI6XCJibGFuY2hlZGFsbW9uZFwiLFwiIzAwMDBmZlwiOlwiYmx1ZVwiLFwiIzhhMmJlMlwiOlwiYmx1ZXZpb2xldFwiLFwiI2E1MmEyYVwiOlwiYnJvd25cIixcIiNkZWI4ODdcIjpcImJ1cmx5d29vZFwiLFwiIzVmOWVhMFwiOlwiY2FkZXRibHVlXCIsXCIjN2ZmZjAwXCI6XCJjaGFydHJldXNlXCIsXCIjZDI2OTFlXCI6XCJjaG9jb2xhdGVcIixcIiNmZjdmNTBcIjpcImNvcmFsXCIsXCIjNjQ5NWVkXCI6XCJjb3JuZmxvd2VyYmx1ZVwiLFwiI2ZmZjhkY1wiOlwiY29ybnNpbGtcIixcIiNkYzE0M2NcIjpcImNyaW1zb25cIixcIiMwMDAwOGJcIjpcImRhcmtibHVlXCIsXCIjMDA4YjhiXCI6XCJkYXJrY3lhblwiLFwiI2I4ODYwYlwiOlwiZGFya2dvbGRlbnJvZFwiLFwiI2E5YTlhOVwiOlwiZGFya2dyYXlcIixcIiMwMDY0MDBcIjpcImRhcmtncmVlblwiLFwiI2JkYjc2YlwiOlwiZGFya2toYWtpXCIsXCIjOGIwMDhiXCI6XCJkYXJrbWFnZW50YVwiLFwiIzU1NmIyZlwiOlwiZGFya29saXZlZ3JlZW5cIixcIiNmZjhjMDBcIjpcImRhcmtvcmFuZ2VcIixcIiM5OTMyY2NcIjpcImRhcmtvcmNoaWRcIixcIiM4YjAwMDBcIjpcImRhcmtyZWRcIixcIiNlOTk2N2FcIjpcImRhcmtzYWxtb25cIixcIiM4ZmJjOGZcIjpcImRhcmtzZWFncmVlblwiLFwiIzQ4M2Q4YlwiOlwiZGFya3NsYXRlYmx1ZVwiLFwiIzVkZGZiZVwiOlwiYXF1YW1hcmluZVwiLFwiIzE5ODAwMFwiOlwi0JfQtdC70LXQvdGL0LlcIixcIiMyZjRmNGZcIjpcImRhcmtzbGF0ZWdyYXlcIixcIiMwMGNlZDFcIjpcImRhcmt0dXJxdW9pc2VcIixcIiM5NDAwZDNcIjpcImRhcmt2aW9sZXRcIixcIiNmZjE0OTNcIjpcImRlZXBwaW5rXCIsXCIjMDBiZmZmXCI6XCJkZWVwc2t5Ymx1ZVwiLFwiIzY5Njk2OVwiOlwiZGltZ3JheVwiLFwiIzFlOTBmZlwiOlwiZG9kZ2VyYmx1ZVwiLFwiI2IyMjIyMlwiOlwiZmlyZWJyaWNrXCIsXCIjZmZmYWYwXCI6XCJmbG9yYWx3aGl0ZVwiLFwiIzIyOGIyMlwiOlwiZm9yZXN0Z3JlZW5cIixcIiNmZjAwZmZcIjpcImZ1Y2hzaWFcIixcIiNkY2RjZGNcIjpcImdhaW5zYm9yb1wiLFwiI2Y4ZjhmZlwiOlwiZ2hvc3R3aGl0ZVwiLFwiI2RhYTUyMFwiOlwiZ29sZGVucm9kXCIsXCIjZmZkNzAwXCI6XCJnb2xkXCIsXCIjODA4MDgwXCI6XCJncmF5XCIsXCIjMDA4MDAwXCI6XCLQl9C10LvQtdC90YvQuVwiLFwiI2FkZmYyZlwiOlwiZ3JlZW55ZWxsb3dcIixcIiNmMGZmZjBcIjpcImhvbmV5ZGV3XCIsXCIjZmY2OWI0XCI6XCJob3RwaW5rXCIsXCIjY2Q1YzVjXCI6XCJpbmRpYW5yZWRcIixcIiM0YjAwODJcIjpcImluZGlnb1wiLFwiI2ZmZmZmMFwiOlwiaXZvcnlcIixcIiNmMGU2OGNcIjpcImtoYWtpXCIsXCIjZmZmMGY1XCI6XCJsYXZlbmRlcmJsdXNoXCIsXCIjZTZlNmZhXCI6XCJsYXZlbmRlclwiLFwiIzdjZmMwMFwiOlwibGF3bmdyZWVuXCIsXCIjZmZmYWNkXCI6XCJsZW1vbmNoaWZmb25cIixcIiNhZGQ4ZTZcIjpcImxpZ2h0Ymx1ZVwiLFwiI2YwODA4MFwiOlwibGlnaHRjb3JhbFwiLFwiI2UwZmZmZlwiOlwibGlnaHRjeWFuXCIsXCIjZmFmYWQyXCI6XCJsaWdodGdvbGRlbnJvZHllbGxvd1wiLFwiI2QzZDNkM1wiOlwibGlnaHRncmF5XCIsXCIjOTBlZTkwXCI6XCJsaWdodGdyZWVuXCIsXCIjZmZiNmMxXCI6XCJsaWdodHBpbmtcIixcIiNmZmEwN2FcIjpcImxpZ2h0c2FsbW9uXCIsXCIjMjBiMmFhXCI6XCJsaWdodHNlYWdyZWVuXCIsXCIjODdjZWZhXCI6XCJsaWdodHNreWJsdWVcIixcIiM3Nzg4OTlcIjpcImxpZ2h0c2xhdGVncmF5XCIsXCIjYjBjNGRlXCI6XCJsaWdodHN0ZWVsYmx1ZVwiLFwiI2ZmZmZlMFwiOlwibGlnaHR5ZWxsb3dcIixcIiMwMGZmMDBcIjpcImxpbWVcIixcIiMzMmNkMzJcIjpcImxpbWVncmVlblwiLFwiI2ZhZjBlNlwiOlwibGluZW5cIixcIiM4MDAwMDBcIjpcIm1hcm9vblwiLFwiIzY2Y2RhYVwiOlwibWVkaXVtYXF1YW1hcmluZVwiLFwiIzAwMDBjZFwiOlwibWVkaXVtYmx1ZVwiLFwiI2JhNTVkM1wiOlwibWVkaXVtb3JjaGlkXCIsXCIjOTM3MGRiXCI6XCJtZWRpdW1wdXJwbGVcIixcIiMzY2IzNzFcIjpcIm1lZGl1bXNlYWdyZWVuXCIsXCIjN2I2OGVlXCI6XCJtZWRpdW1zbGF0ZWJsdWVcIixcIiMwMGZhOWFcIjpcIm1lZGl1bXNwcmluZ2dyZWVuXCIsXCIjNDhkMWNjXCI6XCJtZWRpdW10dXJxdW9pc2VcIixcIiNjNzE1ODVcIjpcIm1lZGl1bXZpb2xldHJlZFwiLFwiIzE5MTk3MFwiOlwibWlkbmlnaHRibHVlXCIsXCIjZjVmZmZhXCI6XCJtaW50Y3JlYW1cIixcIiNmZmU0ZTFcIjpcIm1pc3R5cm9zZVwiLFwiI2ZmZTRiNVwiOlwibW9jY2FzaW5cIixcIiNmZmRlYWRcIjpcIm5hdmFqb3doaXRlXCIsXCIjMDAwMDgwXCI6XCJuYXZ5XCIsXCIjZmRmNWU2XCI6XCJvbGRsYWNlXCIsXCIjODA4MDAwXCI6XCJvbGl2ZVwiLFwiIzZiOGUyM1wiOlwib2xpdmVkcmFiXCIsXCIjZmZhNTAwXCI6XCJvcmFuZ2VcIixcIiNmZjQ1MDBcIjpcIm9yYW5nZXJlZFwiLFwiI2RhNzBkNlwiOlwib3JjaGlkXCIsXCIjZWVlOGFhXCI6XCJwYWxlZ29sZGVucm9kXCIsXCIjOThmYjk4XCI6XCJwYWxlZ3JlZW5cIixcIiNhZmVlZWVcIjpcInBhbGV0dXJxdW9pc2VcIixcIiNkYjcwOTNcIjpcInBhbGV2aW9sZXRyZWRcIixcIiNmZmVmZDVcIjpcInBhcGF5YXdoaXBcIixcIiNmZmRhYjlcIjpcInBlYWNocHVmZlwiLFwiI2NkODUzZlwiOlwicGVydVwiLFwiI2ZmYzBjYlwiOlwicGlua1wiLFwiI2RkYTBkZFwiOlwicGx1bVwiLFwiI2IwZTBlNlwiOlwicG93ZGVyYmx1ZVwiLFwiIzgwMDA4MFwiOlwicHVycGxlXCIsXCIjNjYzMzk5XCI6XCJyZWJlY2NhcHVycGxlXCIsXCIjZmYwMDAwXCI6XCLQmtGA0LDRgdC90YvQuVwiLFwiI2JjOGY4ZlwiOlwicm9zeWJyb3duXCIsXCIjNDE2OWUxXCI6XCJyb3lhbGJsdWVcIixcIiM4YjQ1MTNcIjpcInNhZGRsZWJyb3duXCIsXCIjZmE4MDcyXCI6XCJzYWxtb25cIixcIiNmNGE0NjBcIjpcInNhbmR5YnJvd25cIixcIiMyZThiNTdcIjpcInNlYWdyZWVuXCIsXCIjZmZmNWVlXCI6XCJzZWFzaGVsbFwiLFwiI2EwNTIyZFwiOlwic2llbm5hXCIsXCIjYzBjMGMwXCI6XCJzaWx2ZXJcIixcIiM4N2NlZWJcIjpcInNreWJsdWVcIixcIiM2YTVhY2RcIjpcInNsYXRlYmx1ZVwiLFwiIzcwODA5MFwiOlwic2xhdGVncmF5XCIsXCIjZmZmYWZhXCI6XCJzbm93XCIsXCIjMDBmZjdmXCI6XCJzcHJpbmdncmVlblwiLFwiIzQ2ODJiNFwiOlwic3RlZWxibHVlXCIsXCIjZDJiNDhjXCI6XCJ0YW5cIixcIiMwMDgwODBcIjpcInRlYWxcIixcIiNkOGJmZDhcIjpcInRoaXN0bGVcIixcIiNmZjYzNDdcIjpcInRvbWF0b1wiLFwiIzQwZTBkMFwiOlwidHVycXVvaXNlXCIsXCIjZWU4MmVlXCI6XCJ2aW9sZXRcIixcIiNmNWRlYjNcIjpcIndoZWF0XCIsXCIjZmZmZmZmXCI6XCLQkdC10LvRi9C5XCIsXCIjZjVmNWY1XCI6XCJ3aGl0ZXNtb2tlXCIsXCIjZmZmZjAwXCI6XCLQltC10LvRgtGL0LlcIixcIiM5YWNkMzJcIjpcItCv0LHQu9C+0YfQvdC+LdC30LXQu9C10L3Ri9C5XCIsXCIjZTU4MDAwXCI6XCLQnNC+0YDQutC+0LLQvdGL0LlcIixcIiNjYzAwMDBcIjpcItCR0L7RgdGC0L7QvdGB0LrQuNC5LdC60YDQsNGB0L3Ri9C5XCIsXCIjMzMwMDAwXCI6XCLQmtC+0YDQuNGH0L3QtdCy0YvQuVwiLFwiIzdmODAwMFwiOlwi0J7Qu9C40LLQutC+0LLRi9C5XCIsXCIjOTkwMDAwXCI6XCLQodCw0L3Qs9GA0LjRj1wiLFwiI2IyODAwMFwiOlwi0KLQtdC80L3Qvi3Qt9C+0LvQvtGC0L7QuVwiLFwiIzRjODAwMFwiOlwi0J3QtdC20L3Qvi3QvtC70LjQstC60L7QstGL0LlcIixcIiM2NjAwMDBcIjpcItCa0L7RgNC40YfQvdC10LLQvi3QvNCw0LvQuNC90L7QstGL0LlcIixcIiM2YzYwMDBcIjpcItCe0LvQuNCy0LrQvtCy0YvQuVwiLFwiIzZhNTVjM1wiOlwi0J/Rg9GA0L/Rg9GA0L3Qvi3RgdC40L3QuNC5XCIsXCIjNjdjOGY2XCI6XCLQr9GA0LrQvi3Qs9C+0LvRg9Cx0L7QuVwiLFwiIzQ5MmY1Y1wiOlwi0JPQu9GD0LHQvtC60LjQuS3RhNC40L7Qu9C10YLQvtCy0YvQuVwiLFwiIzVjZDFlY1wiOlwi0JPQvtC70YPQsdC+0LlcIixcIiMxM2ZmNDJcIjpcItCv0YDQutC+LdC30LXQu9C10L3Ri9C5XCIsXCIjMWRhNDI2XCI6XCLQn9Cw0YHRgtC10LvRjNC90L4t0LfQtdC70LXQvdGL0LlcIixcIiMyZmRiYzBcIjpcItCR0LjRgNGO0LfQvtCy0YvQuVwiLFwiIzM4Njc0OFwiOlwi0KLQtdC80L3Qvi3Qt9C10LvQtdC90YvQuVwiLFwiIzU5YTljMVwiOlwi0KLQtdC80L3Qvi3Qs9C+0LvRg9Cx0L7QuVwiLFwiIzE0NjY2NlwiOlwi0KLQtdC80L3Qvi3QsdC40YDRjtC30L7QstGL0LlcIixcIiNjODA5OTNcIjpcItCk0LjQvtC70LXRgtC+0LLQvi3QutGA0LDRgdC90YvQuVwiLFwiI2ZhMGJmOFwiOlwi0KTRg9C60YHQuNGPXCIsXCIjMTkwMTMyXCI6XCLQotC10LzQvdC+LdGE0LjQvtC70LXRgtC+0LLRi9C5XCIsXCIjMzIwMjYyXCI6XCLQotC10LzQvdC+LdGE0LjQvtC70LXRgtC+0LLRi9C5XCIsXCIjNGIwMzk3XCI6XCLQmNC90LTQuNCz0L5cIixcIiNhZjA4NjFcIjpcItCg0L7Qt9C+0LLQsNGC0L4t0LvQuNC70L7QstGL0LlcIixcIiNlMTBhYzZcIjpcItCc0LDQu9C40L3QvtCy0YvQuVwiLFwiIzk2MDcyZVwiOlwi0JHRg9GA0LPRg9C90LTRgdC60LjQuVwiLFwiIzY0MDRjYVwiOlwi0J/Rg9GA0L/Rg9GA0L3Qvi3RgdC40L3QuNC5XCIsXCIjN2QwNWZjXCI6XCLQpNC40L7Qu9C10YLQvtCy0YvQuVwiLFwiIzMyMDI2NVwiOlwi0KLQtdC80L3Ri9C5INC40L3QtNC40LPQvlwiLFwiIzBcIjpcIiMwMDBcIixvcmFuZ2U6XCLQntGA0LDQvdC20LXQstGL0LlcIixwdXJwbGU6XCLQpNC40L7Qu9C10YLQvtCy0YvQuVwiLFwiIzRiZTc0ZFwiOlwi0JzQsNC70LDRhdC40YLQvtCy0YvQuVwiLFwiIzY1MzQ2NlwiOlwi0J/Rg9GA0L/Rg9GA0L3Ri9C5XCIsXCIjMzI5YTMzXCI6XCLQl9C10LvQtdC90YvQuVwiLFwiIzE5NGQxYVwiOlwi0KLQtdC80L3Qvi3Qt9C10LvQtdC90YvQuVwiLFwiI2ZkMDJmZlwiOlwi0KDQvtC30L7QstGL0LlcIixcIiNiMTFiYjNcIjpcItCk0LjQvtC70LXRgtC+0LLQvi3QsdCw0LrQu9Cw0LbQsNC90L3Ri9C5XCIsXCIjZTNiNWU2XCI6XCLQodCy0LXRgtC70L4t0YDQvtC30L7QstGL0LlcIn19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1yKDIpLG89cigxMyk7XCJzdHJpbmdcIj09dHlwZW9mKG89by5fX2VzTW9kdWxlP28uZGVmYXVsdDpvKSYmKG89W1tlLmksbyxcIlwiXV0pO3ZhciBuPXtpbnNlcnQ6XCJoZWFkXCIsc2luZ2xldG9uOiExfTtpKG8sbik7ZS5leHBvcnRzPW8ubG9jYWxzfHx7fX0sZnVuY3Rpb24oZSx0LHIpe31dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZkMlZpY0dGamF5OWliMjkwYzNSeVlYQWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM05zYVdSbGNpOUZkbVZ1ZEVWdGFYUjBaWEl2UlhabGJuUkZiV2wwZEdWeUxuUnpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTl6Ykdsa1pYSXZhVzUwWlhKbVlXTmxjeTl6ZEdGdVpHRnlaRTl3ZEdsdmJuTXVkSE1pTENKM1pXSndZV05yT2k4dkx5NHZibTlrWlY5dGIyUjFiR1Z6TDNOMGVXeGxMV3h2WVdSbGNpOWthWE4wTDNKMWJuUnBiV1V2YVc1cVpXTjBVM1I1YkdWelNXNTBiMU4wZVd4bFZHRm5MbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emJHbGtaWEl2YzJ4cFpHVnlMblJ6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emJHbGtaWEl2VUhKbGMyVnVkR1Z5TDFCeVpYTmxiblJsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjMnhwWkdWeUwwMXZaR1ZzTDAxdlpHVnNMblJ6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emJHbGtaWEl2Vm1sbGR5OVdhV1YzTG5Seklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OXpiR2xrWlhJdlZtbGxkeTlTYjJ4c1pYSnpMMUp2Ykd4bGNuTXVkSE1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNOc2FXUmxjaTlXYVdWM0wxUnlZV05yTDFSeVlXTnJMblJ6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emJHbGtaWEl2Vm1sbGR5OVRZMkZzWlM5VFkyRnNaUzUwY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMyeHBaR1Z5TDFacFpYY3ZRbUZ5TDBKaGNpNTBjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YzJ4cFpHVnlMMmx1ZEdWeVptRmpaWE12WTI5c2IzSXVkSE1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNOc2FXUmxjaTl6Ykdsa1pYSXVjMk56Y3o4M09URmlJbDBzSW01aGJXVnpJanBiSW1sdWMzUmhiR3hsWkUxdlpIVnNaWE1pTENKZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5Zklpd2liVzlrZFd4bFNXUWlMQ0psZUhCdmNuUnpJaXdpYlc5a2RXeGxJaXdpYVNJc0ltd2lMQ0p0YjJSMWJHVnpJaXdpWTJGc2JDSXNJbTBpTENKaklpd2laQ0lzSW01aGJXVWlMQ0puWlhSMFpYSWlMQ0p2SWl3aVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGJuVnRaWEpoWW14bElpd2laMlYwSWl3aWNpSXNJbE41YldKdmJDSXNJblJ2VTNSeWFXNW5WR0ZuSWl3aWRtRnNkV1VpTENKMElpd2liVzlrWlNJc0lsOWZaWE5OYjJSMWJHVWlMQ0p1Y3lJc0ltTnlaV0YwWlNJc0ltdGxlU0lzSW1KcGJtUWlMQ0p1SWl3aWIySnFaV04wSWl3aWNISnZjR1Z5ZEhraUxDSndjbTkwYjNSNWNHVWlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJbkFpTENKeklpd2lSWFpsYm5SRmJXbDBkR1Z5SWl3aWRHaHBjeUlzSW1WMlpXNTBjeUlzSW5OMVluTmpjbWxpWlNJc0ltVjJaVzUwVG1GdFpTSXNJbU5oYkd4aVlXTnJJaXdpY0hWemFDSXNJblZ1YzNWaWMyTnlhV0psSWl3aVptbHNkR1Z5SWl3aVpYWmxiblJEWVd4c1ltRmpheUlzSW1WdGFYUWlMQ0p1WlhkRVlYUmhJaXdpWlhabGJuUWlMQ0ptYjNKRllXTm9JaXdpYzNSaGJtUmhjbVJQY0hScGIyNXpJaXdpYjNKcFpXNTBZWFJwYjI0aUxDSjBlWEJsSWl3aWJXbHVJaXdpYldGNElpd2ljM1JsY0NJc0ltWnliMjBpTENKMGJ5SXNJbkJ5WldacGVDSXNJbWx6VUhKbFptbDRJaXdpYVhOTVlXSmxiQ0lzSW1selUyTmhiR1VpTENKamIyeHZjaUlzSW1selUyTmhiR1ZRY21WbWFYZ2lMQ0p6WTJGc1pWQnlaV1pwZUNJc0ltMXBiazFoZUNJc0ltWnliMjFVYnlJc0ltbHpWSEpoWTJ0UWNtVm1hWGdpTENKMGNtRmphMUJ5WldacGVDSXNJbWx6UTI5c2IzSWlMQ0pqYUdGdVoyVkRiMnh2Y2lJc0ltbHpRMmhoYm1kbFEyOXNiM0lpTENKcGMwZHlZV1JwWlc1MElpd2laM0poWkdsbGJuUWlMQ0puY21Ga2FXVnVkRVJsWnlJc0ltbHpRMjlzYjNKUGRYUWlMQ0p2Ym14NVJHbDJhWE5wYjI1eklpd2lZV3hzUTI5c2IzSnpJaXdpYldWdGJ5SXNJbWx6VDJ4a1NVVWlMQ0pDYjI5c1pXRnVJaXdpZDJsdVpHOTNJaXdpWkc5amRXMWxiblFpTENKaGJHd2lMQ0poZEc5aUlpd2laMlYwVkdGeVoyVjBJaXdpZEdGeVoyVjBJaXdpYzNSNWJHVlVZWEpuWlhRaUxDSnhkV1Z5ZVZObGJHVmpkRzl5SWl3aVNGUk5URWxHY21GdFpVVnNaVzFsYm5RaUxDSmpiMjUwWlc1MFJHOWpkVzFsYm5RaUxDSm9aV0ZrSWl3aVpTSXNJbk4wZVd4bGMwbHVSRzl0SWl3aVoyVjBTVzVrWlhoQ2VVbGtaVzUwYVdacFpYSWlMQ0pwWkdWdWRHbG1hV1Z5SWl3aWNtVnpkV3gwSWl3aWJHVnVaM1JvSWl3aWJXOWtkV3hsYzFSdlJHOXRJaXdpYkdsemRDSXNJbTl3ZEdsdmJuTWlMQ0pwWkVOdmRXNTBUV0Z3SWl3aWFXUmxiblJwWm1sbGNuTWlMQ0pwZEdWdElpd2lhV1FpTENKaVlYTmxJaXdpWTI5MWJuUWlMQ0pqYjI1allYUWlMQ0pwYm1SbGVDSXNJbTlpYWlJc0ltTnpjeUlzSW0xbFpHbGhJaXdpYzI5MWNtTmxUV0Z3SWl3aWNtVm1aWEpsYm1ObGN5SXNJblZ3WkdGMFpYSWlMQ0poWkdSVGRIbHNaU0lzSW1sdWMyVnlkRk4wZVd4bFJXeGxiV1Z1ZENJc0luTjBlV3hsSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW1GMGRISnBZblYwWlhNaUxDSnViMjVqWlNJc0ltdGxlWE1pTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0pwYm5ObGNuUWlMQ0pGY25KdmNpSXNJbUZ3Y0dWdVpFTm9hV3hrSWl3aWRHVjRkRk4wYjNKbElpd2ljbVZ3YkdGalpWUmxlSFFpTENKeVpYQnNZV05sYldWdWRDSXNJbXB2YVc0aUxDSmhjSEJzZVZSdlUybHVaMnhsZEc5dVZHRm5JaXdpY21WdGIzWmxJaXdpYzNSNWJHVlRhR1ZsZENJc0ltTnpjMVJsZUhRaUxDSmpjM05PYjJSbElpd2lZM0psWVhSbFZHVjRkRTV2WkdVaUxDSmphR2xzWkU1dlpHVnpJaXdpY21WdGIzWmxRMmhwYkdRaUxDSnBibk5sY25SQ1pXWnZjbVVpTENKaGNIQnNlVlJ2VkdGbklpd2ljbVZ0YjNabFFYUjBjbWxpZFhSbElpd2lZblJ2WVNJc0luVnVaWE5qWVhCbElpd2laVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBJaXdpU2xOUFRpSXNJbk4wY21sdVoybG1lU0lzSW1acGNuTjBRMmhwYkdRaUxDSnphVzVuYkdWMGIyNGlMQ0p6YVc1bmJHVjBiMjVEYjNWdWRHVnlJaXdpZFhCa1lYUmxJaXdpYzNSNWJHVkpibVJsZUNJc0luQmhjbVZ1ZEU1dlpHVWlMQ0p5WlcxdmRtVlRkSGxzWlVWc1pXMWxiblFpTENKdVpYZFBZbW9pTENKc1lYTjBTV1JsYm5ScFptbGxjbk1pTENKdVpYZE1hWE4wSWl3aWRHOVRkSEpwYm1jaUxDSnVaWGRNWVhOMFNXUmxiblJwWm1sbGNuTWlMQ0pmYVNJc0lsOXBibVJsZUNJc0luTndiR2xqWlNJc0lsOWZZWE56YVdkdUlpd2lZWE56YVdkdUlpd2lZWEpuZFcxbGJuUnpJaXdpWVhCd2JIa2lMQ0lrSWl3aVVISmxjMlZ1ZEdWeVh6RWlMQ0p6ZEdGdVpHRnlaRTl3ZEdsdmJuTmZNU0lzSW1wUmRXVnllU0lzSW1adUlpd2lZMjlzYjNKVGJHbGtaWElpTENKdFpYUm9iMlFpTENKdFpYUm9iMlJ6SWl3aWFXNXBkQ0lzSWlSemJHbGtaWElpTENKd1lYSmhiWE1pTENKbGVIUmxibVFpTENKa1lYUmhJaXdpVUhKbGMyVnVkR1Z5SWl3aVoyVjBUM0IwYVc5dWN5SXNJbU5vWVc1blpTSXNJblpoYkhWbGN5SXNJbk5sZEU5d2RHbHZibk1pTENKMWNFUmhkR0ZXYVdWM0lpd2laMlYwVm1Gc2RXVWlMQ0ptZFc1aklpd2laVzFwZEhSbGNpSXNJazF2WkdWc1h6RWlMQ0pXYVdWM1h6RWlMQ0pGZG1WdWRFVnRhWFIwWlhKZk1TSXNJbVZzWlcxbGJuUWlMQ0p0YjJSbGJDSXNJbU55WldGMFpVMXZaR1ZzSWl3aWRtbGxkeUlzSW1OeVpXRjBaVlpwWlhjaUxDSnpkR0YwWlNJc0ltSnBibVJUZFdKelkzSnBZbVVpTENKMWNFUmhkR0ZUYkdsa1pYSWlMQ0p1WlhkUGNIUnBiMjV6SWl3aWMyVjBSR0YwWVNJc0lrMXZaR1ZzSWl3aVZtbGxkeUlzSW1kbGRFNWxkMFJoZEdFaUxDSnpaVzVrVG1WM1VHOXphWFJwYjI0aUxDSmhaR1JUZFdKelkzSnBZblJwYjI1eklpd2lkWEJFWVhSaElpd2libVYzVUc5emFYUnBiMjRpTENKdGIyUmxiRk4wWVhSbElpd2lkbUZzYVdSaGRHVkdjbTl0Vkc4aUxDSjJZV3hwWkdGMFpVMXBiazFoZUZOMFpYQWlMQ0p0WVhoVGRHVndJaXdpVFdGMGFDSXNJbUZpY3lJc0lsSnZiR3hsY25OZk1TSXNJbFJ5WVdOclh6RWlMQ0pUWTJGc1pWOHhJaXdpUW1GeVh6RWlMQ0p6Ykdsa1pYSWlMQ0pqY21WaGRHVlRiR2xrWlhJaUxDSnliMnhzWlhKeklpd2lZM0psWVhSbFVtOXNiR1Z5Y3lJc0ltSmhjaUlzSW1OeVpXRjBaVUpoY2lJc0luUnlZV05ySWl3aVkzSmxZWFJsVkhKaFkyc2lMQ0p6WTJGc1pTSXNJbU55WldGMFpWTmpZV3hsSWl3aVltbHVaRVYyWlc1MFRHbHpkR1Z1WlhKeklpd2ljMmw2WlNJc0ltZGxkRk5zYVdSbGNsTnBlbVVpTENKdmJtVlRkR1Z3SWl3aVoyVjBUMjVsVTNSbGNDSXNJbU5zWVhOelRtRnRaU0lzSW1Gd2NHVnVaQ0lzSWxSeVlXTnJJaXdpUW1GeUlpd2lVbTlzYkdWeWN5SXNJbE5qWVd4bElpd2libVYzVTNSaGRHVWlMQ0oxY0dSaGRHRlRkR0YwWlNJc0ltTmxhV3dpTENKdmJsUnlZV05yUTJ4cFkyc2lMQ0p2YmxOallXeGxRMnhwWTJzaUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeWN5SXNJbUpwYm1STmIzVnpaVVJ2ZDI0aUxDSmtjbUZuVTNSaGNuUWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpWjJWMFZHRnlaMlYwVkhsd1pTSXNJbVJ5WVdkZk1TSXNJbVJ5WVdjaUxDSm9ZVzVrYkdWVmNGOHhJaXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lJc0ltMXZkWE5sVm1Gc2RXVWlMQ0p3Y21WMlpXNTBSR1ZtWVhWc2RDSXNJblJsYzNRaUxDSmpiMjUyWlhKMFVIaFViMVpoYkhWbElpd2lkRzkxWTJobGN5SXNJbU5zYVdWdWRGZ2lMQ0pqYkdsbGJuUlpJaXdpZFhCa1lYUmxVRzl6YVhScGIyNGlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNJaXdpWTI5dWRHRnBibk1pTENKa1pYUmhhV3dpTENKamIyOXlaR2x1WVhSbElpd2lYMkVpTENKamIyNTJaWEowVm1Gc2RXVlViME52Ykc5eUlpd2labkp2YlVScGMzUmhibU5sSWl3aWRHOUVhWE4wWVc1alpTSXNJbk5zYVdSbGNsQnZjeUlzSW1kbGRGTnNhV1JsY2xCdmMybDBhVzl1SWl3aWNIZ2lMQ0p5YjNWdVpDSXNJbDlpSWl3aWRtRnNJaXdpY0dGc2FYUnlZU0lzSW1keVVHRnNhWFJ5WVNJc0ltTnZjbkpsWTNSSGNtRmthV1Z1ZENJc0ltZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ0lzSW14bFpuUWlMQ0owYjNBaUxDSjNhV1IwYUNJc0ltaGxhV2RvZENJc0luSnZiR3hsY2tacGNuTjBJaXdpY205c2JHVnlVMlZqYjI1a0lpd2lZM0psWVhSbFZHOXZiSFJwY0NJc0ltMXZkbVZTYjJ4c1pYSnpRWFJXWVd4MVpTSXNJblJ2WjJkc1pWSnZiR3hsY25NaUxDSjFjR1JoZEdGRGIyeHZjaUlzSW1acGMzUlViMjlzZEdsd0lpd2ljMlZqYjI1a1ZHOXZiSFJwY0NJc0luVndaR0YwWVU5MWRGUnZiMngwYVhBaUxDSnBibTVsY2toVVRVd2lMQ0owYjB4dlkyRnNaVk4wY21sdVp5SXNJbTVsZDBOdmJHOXlJaXdpYm1WM1IzSmhaR2xsYm5RaUxDSjFibVJsWm1sdVpXUWlMQ0ppWVdOclozSnZkVzVrUTI5c2IzSWlMQ0pqYkdGemMweHBjM1FpTENKaFpHUWlMQ0ppWVdOclozSnZkVzVrSWl3aWNIaFVieUlzSW1OdmJuWmxjblJXWVd4MVpWUnZVSGdpTENKd2VFWnliMjBpTENKd2IzTnBkR2x2YmxSdklpd2lZMjl1ZG1WeWRGQjRWRzlRY205alpXNTBJaXdpY0c5emFYUnBiMjVHY205dElpd2lZbTkwZEc5dElpd2laR2x6Y0d4aGVTSXNJbU55WldGMFpVOTFkRVZzWlcxbGJuUWlMQ0p6ZEdGeWRGWmhiSFZsSWl3aVpXNWtWbUZzZFdVaUxDSnpaWFJUZEdGeWRFVnVaRlJ5WVdOclQzVjBJaXdpYjNWMFUzUmhjblFpTENKdmRYUkZibVFpTENKaFpHUlRZMkZzWlUxaGNtdGxjaUlzSW1Ob1pXTnJVMk5oYkdVaUxDSjFjR1JoZEdGVFkyRnNaVTFoY210bGNpSXNJbk5qWVd4bFRXRnlhMlZ5SWl3aVpHOWpkVzFsYm5SRmJHVnRaVzUwSWl3aWMyVjBVSEp2Y0dWeWRIa2lMQ0pwYm1NaUxDSm5aWFJKYm1OeVpXMWxiblFpTENKd2VFbHVZeUlzSW1aeVlXZHRaVzUwSWl3aVkzSmxZWFJsUkc5amRXMWxiblJHY21GbmJXVnVkQ0lzSW5CNFEzVnljbVZ1ZENJc0ltTjFjbkpsYm5RaUxDSmpjbVZoZEdWVFkyRnNaVTFoY210bGNpSXNJbkJ2YzJsMGFXOXVJaXdpYjJabWMyVjBJaXdpWTI5dWRtVnlkRkI0Vkc5UVpYSmpaVzUwSWl3aVNGUk5URVZzWlcxbGJuUWlMQ0pPZFcxaVpYSWlMQ0p6WTJGc1pVVjJaVzUwSWl3aVEzVnpkRzl0UlhabGJuUWlMQ0ppZFdKaWJHVnpJaXdpWkdsemNHRjBZMmhGZG1WdWRDSXNJblZ3WkdGMFlVSmhjaUlzSW1kbGRGSnZiR3hsY2xCdmMybDBhVzl1Y3lJc0ltTmhiR04xYkdGMFpWQnZjMmwwYVc5dUlpd2ljMjl5ZENJc0ltRWlMQ0ppSWl3aWMybGtaU0lzSW5CaGNuTmxTVzUwSWl3aVoyVjBRMjl0Y0hWMFpXUlRkSGxzWlNJc0ltbHpTRzl5YVhwdmJuUmhiQ0lzSW1ScGNtVmpkR2x2YmlJc0luSnZiR3hsY2xCdmN5SXNJbWx6VTJsdVoyeGxJaXdpWjJWMFRtVjNVMnhwWkdWeVVHOXpJaXdpWVhCcElpd2lZMjl1ZEdWdWRDSXNJbVJsWm1GMWJIUWlMQ0pzYjJOaGJITWlYU3dpYldGd2NHbHVaM01pT2lKaFFVTkZMRWxCUVVsQkxFVkJRVzFDTEVkQlIzWkNMRk5CUVZORExFVkJRVzlDUXl4SFFVYzFRaXhIUVVGSFJpeEZRVUZwUWtVc1IwRkRia0lzVDBGQlQwWXNSVUZCYVVKRkxFZEJRVlZETEZGQlIyNURMRWxCUVVsRExFVkJRVk5LTEVWQlFXbENSU3hIUVVGWkxFTkJRM3BEUnl4RlFVRkhTQ3hGUVVOSVNTeEhRVUZITEVWQlEwaElMRkZCUVZNc1NVRlZWaXhQUVU1QlNTeEZRVUZSVEN4SFFVRlZUU3hMUVVGTFNpeEZRVUZQUkN4UlFVRlRReXhGUVVGUlFTeEZRVUZQUkN4UlFVRlRSaXhIUVVjdlJFY3NSVUZCVDBVc1IwRkJTU3hGUVVkS1JpeEZRVUZQUkN4UlFVdG1SaXhGUVVGdlFsRXNSVUZCU1VZc1JVRkhlRUpPTEVWQlFXOUNVeXhGUVVGSlZpeEZRVWQ0UWtNc1JVRkJiMEpWTEVWQlFVa3NVMEZCVTFJc1JVRkJVMU1zUlVGQlRVTXNSMEZETTBOYUxFVkJRVzlDWVN4RlFVRkZXQ3hGUVVGVFV5eEpRVU5zUTBjc1QwRkJUME1zWlVGQlpXSXNSVUZCVTFNc1JVRkJUU3hEUVVGRlN5eFpRVUZaTEVWQlFVMURMRWxCUVV0TUxFdEJTMmhGV2l4RlFVRnZRbXRDTEVWQlFVa3NVMEZCVTJoQ0xFZEJRMWdzYjBKQlFWaHBRaXhSUVVFd1FrRXNUMEZCVDBNc1lVRkRNVU5PTEU5QlFVOURMR1ZCUVdWaUxFVkJRVk5wUWl4UFFVRlBReXhaUVVGaExFTkJRVVZETEUxQlFVOHNWMEZGTjBSUUxFOUJRVTlETEdWQlFXVmlMRVZCUVZNc1lVRkJZeXhEUVVGRmJVSXNUMEZCVHl4TFFWRjJSSEpDTEVWQlFXOUNjMElzUlVGQlNTeFRRVUZUUkN4RlFVRlBSU3hIUVVWMlF5eEhRVVJWTEVWQlFWQkJMRWxCUVZWR0xFVkJRVkZ5UWl4RlFVRnZRbkZDTEVsQlF5OUNMRVZCUVZCRkxFVkJRVlVzVDBGQlQwWXNSVUZEY0VJc1IwRkJWeXhGUVVGUVJTeEhRVUU0UWl4cFFrRkJWa1lzUjBGQmMwSkJMRWRCUVZOQkxFVkJRVTFITEZkQlFWa3NUMEZCVDBnc1JVRkRhRVlzU1VGQlNVa3NSVUZCUzFnc1QwRkJUMWtzVDBGQlR5eE5RVWQyUWl4SFFVWkJNVUlzUlVGQmIwSnJRaXhGUVVGRlR5eEhRVU4wUWxnc1QwRkJUME1zWlVGQlpWVXNSVUZCU1N4VlFVRlhMRU5CUVVWVUxGbEJRVmtzUlVGQlRVc3NUVUZCVDBFc1NVRkRkRVFzUlVGQlVFVXNSMEZCTkVJc2FVSkJRVlJHTEVWQlFXMUNMRWxCUVVrc1NVRkJTVTBzUzBGQlQwNHNSVUZCVDNKQ0xFVkJRVzlDVlN4RlFVRkZaU3hGUVVGSlJTeEZRVUZMTEZOQlFWTkJMRWRCUVU4c1QwRkJUMDRzUlVGQlRVMHNTVUZCVVVNc1MwRkJTeXhMUVVGTlJDeEpRVU01U1N4UFFVRlBSaXhIUVVsU2VrSXNSVUZCYjBJMlFpeEZRVUZKTEZOQlFWTXhRaXhIUVVOb1F5eEpRVUZKVXl4RlFVRlRWQ3hIUVVGVlFTeEZRVUZQY1VJc1YwRkROMElzVjBGQmQwSXNUMEZCVDNKQ0xFVkJRV2RDTEZOQlF5OURMRmRCUVRoQ0xFOUJRVTlCTEVkQlJYUkRMRTlCUkVGSUxFVkJRVzlDVlN4RlFVRkZSU3hGUVVGUkxFbEJRVXRCTEVkQlF6VkNRU3hIUVVsU1dpeEZRVUZ2UW1Fc1JVRkJTU3hUUVVGVGFVSXNSVUZCVVVNc1IwRkJXU3hQUVVGUGFrSXNUMEZCVDJ0Q0xGVkJRVlZETEdWQlFXVXhRaXhMUVVGTGRVSXNSVUZCVVVNc1NVRkhla2N2UWl4RlFVRnZRbXRETEVWQlFVa3NSMEZKYWtKc1F5eEZRVUZ2UWtFc1JVRkJiMEp0UXl4RlFVRkpMRWNzSzBKRGFrWnlSSEpDTEU5QlFVOURMR1ZCUVdWaUxFVkJRVk1zWVVGQll5eERRVUZGYlVJc1QwRkJUeXhKUVVOMFJHNUNMRVZCUVZGclF5eHJRa0ZCWlN4RlFVTjJRaXhKUVVGSlFTeEZRVUU0UWl4WFFVTTVRaXhUUVVGVFFTeEpRVU5NUXl4TFFVRkxReXhQUVVGVExFZEJZV3hDTEU5QldFRkdMRVZCUVdGS0xGVkJRVlZQTEZWQlFWa3NVMEZCVlVNc1JVRkJWME1zU1VGRGJrUktMRXRCUVV0RExFOUJRVTlGTEV0QlFXVklMRXRCUVV0RExFOUJRVTlGTEVkQlFXRXNTVUZEY2tSSUxFdEJRVXRETEU5QlFVOUZMRWRCUVZkRkxFdEJRVXRFTEVsQlJXaERUQ3hGUVVGaFNpeFZRVUZWVnl4WlFVRmpMRk5CUVZWSUxFVkJRVmRETEVkQlEzUkVTaXhMUVVGTFF5eFBRVUZQUlN4SFFVRmhTQ3hMUVVGTFF5eFBRVUZQUlN4SFFVRlhTU3hSUVVGUExGTkJRVlZETEVkQlFXbENMRTlCUVU5S0xFbEJRV0ZKTEUxQlJURkhWQ3hGUVVGaFNpeFZRVUZWWXl4TFFVRlBMRk5CUVZWT0xFVkJRVmRQTEVkQlF5OURMRWxCUVVsRExFVkJRVkZZTEV0QlFVdERMRTlCUVU5RkxFZEJRM2hDVVN4SFFVRlRRU3hGUVVGTlF5eFRRVUZSTEZOQlFWVlNMRWRCUVZrc1QwRkJUMEVzUlVGQlUyeERMRXRCUVVzc1MwRkJUWGRETEU5QlJYSkZXQ3hGUVdaelFpeEhRV2xDYWtOc1F5eEZRVUZSYTBNc1lVRkJaVUVzUnl3MlFrTnVRblpDZEVJc1QwRkJUME1zWlVGQlpXSXNSVUZCVXl4aFFVRmpMRU5CUVVWdFFpeFBRVUZQTEVsQlEzUkVia0lzUlVGQlVXZEVMSEZDUVVGclFpeEZRVU14UWl4SlFVTkpRU3hGUVVGclFpeERRVU5zUWtNc1dVRkJZU3hoUVVOaVF5eExRVUZOTEZOQlEwNURMRWxCUVVzc1JVRkRURU1zU1VGQlN5eEhRVU5NUXl4TFFVRk5MRVZCUTA1RExFdEJRVTBzUlVGRFRrTXNSMEZCU1N4RlFVTktReXhQUVVGUkxFbEJRMUpETEZWQlFWVXNSVUZEVmtNc1UwRkJVeXhGUVVOVVF5eFRRVUZUTEVWQlExUkRMRTFCUVU4c1UwRkRVRU1zWlVGQlpTeEZRVU5tUXl4WlFVRmhMRWxCUTJKRExGRkJRVkVzUlVGRFVrTXNVVUZCVVN4RlFVTlNReXhsUVVGbExFVkJRMlpETEZsQlFXRXNTVUZEWWtNc1UwRkJVeXhGUVVOVVF5eGhRVUZoTEVWQlEySkRMR1ZCUVdVc1JVRkRaa01zV1VGQldTeEZRVU5hUXl4VFFVRlZMRk5CUTFaRExGbEJRV0VzUjBGRFlrTXNXVUZCV1N4RlFVTmFReXhsUVVGbExFVkJRMlpETEZWQk5VSlZMRVZCUVZFc1NVRTBRa05CTEZkQlJYWkNNMFVzUlVGQlVXZEVMR2RDUVVGclFrRXNSeXcyUWtNdlFqRkNMRWxCUTAwMFFpeEZRVVJHUXl4RlFVVkxMRmRCVlV3c1dVRlViMElzU1VGQlZFUXNTVUZOVkVFc1JVRkJUMFVzVVVGQlVVTXNVVUZCVlVNc1ZVRkJXVUVzVTBGQlUwTXNUVUZCVVVZc1QwRkJUMGNzVDBGSGVFUk9MRWRCU1ZCUExFVkJRVmtzVjBGRFpDeEpRVUZKVUN4RlFVRlBMRWRCUTFnc1QwRkJUeXhUUVVGclFsRXNSMEZEZGtJc1VVRkJORUlzU1VGQmFrSlNMRVZCUVV0UkxFZEJRWGxDTEVOQlEzWkRMRWxCUVVsRExFVkJRV05NTEZOQlFWTk5MR05CUVdOR0xFZEJSWHBETEVkQlFVbE1MRTlCUVU5UkxHMUNRVUZ4UWtZc1lVRkJkVUpPTEU5QlFVOVJMR3RDUVVNMVJDeEpRVWRGUml4RlFVRmpRU3hGUVVGWlJ5eG5Ra0ZCWjBKRExFdEJRekZETEUxQlFVOURMRWRCUlZCTUxFVkJRV01zUzBGSmJFSlVMRVZCUVV0UkxFZEJRVlZETEVWQlIycENMRTlCUVU5VUxFVkJRVXRSTEVsQmNFSkJMRWRCZDBKYVR5eEZRVUZqTEVkQlJXeENMRk5CUVZORExFVkJRWEZDUXl4SFFVYzFRaXhKUVVaQkxFbEJRVWxETEVkQlFWVXNSVUZGVERWR0xFVkJRVWtzUlVGQlIwRXNSVUZCU1hsR0xFVkJRVmxKTEU5QlFWRTNSaXhKUVVOMFF5eEhRVUZKZVVZc1JVRkJXWHBHTEVkQlFVY3lSaXhoUVVGbFFTeEZRVUZaTEVOQlF6VkRReXhGUVVGVE5VWXNSVUZEVkN4TlFVbEtMRTlCUVU4MFJpeEZRVWRVTEZOQlFWTkZMRVZCUVdGRExFVkJRVTFETEVkQlNURkNMRWxCU0VFc1NVRkJTVU1zUlVGQllTeEhRVU5pUXl4RlFVRmpMRWRCUlZSc1J5eEZRVUZKTEVWQlFVZEJMRVZCUVVrclJpeEZRVUZMUml4UFFVRlJOMFlzU1VGQlN5eERRVU53UXl4SlFVRkpiVWNzUlVGQlQwb3NSVUZCU3k5R0xFZEJRMXB2Unl4RlFVRkxTaXhGUVVGUlN5eExRVUZQUml4RlFVRkxMRWRCUVV0SUxFVkJRVkZMTEV0QlFVOUdMRVZCUVVzc1IwRkRiRVJITEVWQlFWRk1MRVZCUVZkSExFbEJRVThzUlVGRE1VSlVMRVZCUVdFc1IwRkJSMWtzVDBGQlQwZ3NSVUZCU1N4TFFVRkxSeXhQUVVGUFJDeEhRVU16UTB3c1JVRkJWMGNzUjBGQlRVVXNSVUZCVVN4RlFVTjZRaXhKUVVGSlJTeEZRVUZSWkN4RlFVRnhRa01zUjBGRE4wSmpMRVZCUVUwc1EwRkRVa01zU1VGQlMxQXNSVUZCU3l4SFFVTldVU3hOUVVGUFVpeEZRVUZMTEVkQlExcFRMRlZCUVZkVUxFVkJRVXNzUzBGSFNDeEpRVUZZU3l4SFFVTkdaaXhGUVVGWlpTeEhRVUZQU3l4aFFVTnVRbkJDTEVWQlFWbGxMRWRCUVU5TkxGRkJRVkZNTEVsQlJUTkNhRUlzUlVGQldXNUVMRXRCUVVzc1EwRkRabkZFTEZkQlFWbEJMRVZCUTFwdFFpeFJRVUZUUXl4RlFVRlRUaXhGUVVGTFZDeEhRVU4yUW1Fc1YwRkJXU3hKUVVsb1FsZ3NSVUZCV1RWRUxFdEJRVXR4UkN4SFFVZHVRaXhQUVVGUFR5eEZRVWRVTEZOQlFWTmpMRVZCUVcxQ2FFSXNSMEZETVVJc1NVRkJTV2xDTEVWQlFWRnVReXhUUVVGVGIwTXNZMEZCWXl4VFFVTXZRa01zUlVGQllXNUNMRVZCUVZGdFFpeFpRVUZqTEVkQlJYWkRMRkZCUVdkRExFbEJRWEpDUVN4RlFVRlhReXhOUVVGMVFpeERRVU16UXl4SlFVRkpRU3hGUVVGdFJDeExRVVZ1UkVFc1NVRkRSa1FzUlVGQlYwTXNUVUZCVVVFc1IwRlJka0lzUjBGS1FURkhMRTlCUVU4eVJ5eExRVUZMUml4SFFVRlpkRVVzVTBGQlVTeFRRVUZWZEVJc1IwRkRlRU13Uml4RlFVRk5TeXhoUVVGaEwwWXNSVUZCU3pSR0xFVkJRVmMxUml4UFFVZFFMRzFDUVVGdVFubEZMRVZCUVZGMVFpeFBRVU5xUW5aQ0xFVkJRVkYxUWl4UFFVRlBUaXhQUVVOV0xFTkJRMHdzU1VGQlNTOUNMRVZCUVZORUxFVkJRVlZsTEVWQlFWRjFRaXhSUVVGVkxGRkJSWHBETEVsQlFVdHlReXhGUVVOSUxFMUJRVTBzU1VGQlNYTkRMRTFCUVUwc01rZEJSMnhDZEVNc1JVRkJUM1ZETEZsQlFWbFNMRWRCUjNKQ0xFOUJRVTlCTEVWQlkxUXNTVUZEVFZNc1JVRkVSa01zUjBGRFJVUXNSVUZCV1N4SFFVTlVMRk5CUVdsQ2JFSXNSVUZCVDI5Q0xFZEJSVGRDTEU5QlJFRkdMRVZCUVZWc1FpeEhRVUZUYjBJc1JVRkRXa1lzUlVGQlZXeEdMRTlCUVU5dlF5eFRRVUZUYVVRc1MwRkJTeXhSUVVreFF5eFRRVUZUUXl4RlFVRnZRbUlzUlVGQlQxUXNSVUZCVDNWQ0xFVkJRVkYwUWl4SFFVTnFSQ3hKUVVGSlF5eEZRVUZOY1VJc1JVRkJVeXhIUVVGTGRFSXNSVUZCU1VVc1RVRkJVU3hWUVVGVlNpeFBRVUZQUlN4RlFVRkpSU3hOUVVGUExFMUJRVTFLTEU5QlFVOUZMRVZCUVVsRExFbEJRVXNzUzBGQlQwUXNSVUZCU1VNc1NVRkpha2NzUjBGQlNVOHNSVUZCVFdVc1YwRkRVbVlzUlVGQlRXVXNWMEZCVjBNc1VVRkJWVTRzUlVGQldXNUNMRVZCUVU5RkxFOUJRM3BETEVOQlEwd3NTVUZCU1hkQ0xFVkJRVlZ3UkN4VFFVRlRjVVFzWlVGQlpYcENMRWRCUTJ4RE1FSXNSVUZCWVc1Q0xFVkJRVTF0UWl4WFFVVnVRa0VzUlVGQlZ6VkNMRWxCUTJKVExFVkJRVTF2UWl4WlFVRlpSQ3hGUVVGWE5VSXNTVUZITTBJMFFpeEZRVUZYZGtNc1QwRkRZbTlDTEVWQlFVMXhRaXhoUVVGaFNpeEZRVUZUUlN4RlFVRlhOVUlzU1VGRmRrTlRMRVZCUVUxUkxGbEJRVmxUTEVsQlMzaENMRk5CUVZOTExFVkJRVmQwUWl4RlFVRlBha0lzUlVGQlUxTXNSMEZEYkVNc1NVRkJTVU1zUlVGQlRVUXNSVUZCU1VNc1NVRkRWa01zUlVGQlVVWXNSVUZCU1VVc1RVRkRXa01zUlVGQldVZ3NSVUZCU1Vjc1ZVRmxjRUlzUjBGaVNVUXNSVUZEUmswc1JVRkJUVXNzWVVGQllTeFJRVUZUV0N4SFFVVTFRazBzUlVGQlRYVkNMR2RDUVVGblFpeFRRVWR3UWpWQ0xFZEJRVFpDTEc5Q1FVRlVOa0lzVDBGRGRFSXZRaXhIUVVGUExIVkVRVUYxUkVnc1QwRkJUMnRETEV0QlFVdERMRk5CUVZORExHMUNRVUZ0UWtNc1MwRkJTME1zVlVGQlZXcERMRTFCUVdVc1VVRk5iRWxMTEVWQlFVMWxMRmRCUTFKbUxFVkJRVTFsTEZkQlFWZERMRkZCUVZWMlFpeE5RVU4wUWl4RFFVTk1MRXRCUVU5UExFVkJRVTAyUWl4WlFVTllOMElzUlVGQlRXOUNMRmxCUVZsd1FpeEZRVUZOTmtJc1dVRkhNVUkzUWl4RlFVRk5VU3haUVVGWk0wTXNVMEZCVTNGRUxHVkJRV1Y2UWl4TFFVazVReXhKUVVGSmNVTXNSVUZCV1N4TFFVTmFReXhGUVVGdFFpeEZRVVYyUWl4VFFVRlRha01zUlVGQlUwNHNSVUZCUzFRc1IwRkRja0lzU1VGQlNXbENMRVZCUTBGblF5eEZRVU5CYkVJc1JVRkZTaXhIUVVGSkwwSXNSVUZCVVN0RExGVkJRVmNzUTBGRGNrSXNTVUZCU1Vjc1JVRkJZVVlzU1VGRGFrSXZRaXhGUVVGUk9FSXNTVUZCWTBFc1JVRkJXUzlDTEVWQlFXMUNhRUlzU1VGRGNrUnBSQ3hGUVVGVGJrSXNSVUZCYjBKMFJ5eExRVUZMTEV0QlFVMTVSaXhGUVVGUGFVTXNSMEZCV1N4SFFVTXpSRzVDTEVWQlFWTkVMRVZCUVc5Q2RFY3NTMEZCU3l4TFFVRk5lVVlzUlVGQlQybERMRWRCUVZrc1VVRkZNMFJxUXl4RlFVRlJSQ3hGUVVGdFFtaENMRWRCUXpOQ2FVUXNSVUZCVTFZc1JVRkJWeTlITEV0QlFVc3NTMEZCVFhsR0xFVkJRVTlxUWl4SFFVVjBReXRDTEVWQlFWTXNXVUY0Um1Jc1UwRkJORUprTEVkQlJURkNMRWRCUVhsQ0xFOUJRWEpDUVN4RlFVRk5hME1zVjBGRFVpeFBRVUZQTEVWQlIxUnNReXhGUVVGTmEwTXNWMEZCVjJRc1dVRkJXWEJDTEVkQmJVWjZRbTFETEVOQlFXMUNia01zU1VGTGRrSXNUMEZFUVdkRExFVkJRVTk0UXl4SFFVTkJMRk5CUVhGQ05FTXNSMEZETVVJc1IwRkJTVUVzUlVGQlVTeERRVU5XTEVkQlFVbEJMRVZCUVU4elF5eE5RVUZSUkN4RlFVRkpReXhMUVVGUE1rTXNSVUZCVHpGRExGRkJRVlZHTEVWQlFVbEZMRTlCUVZNd1F5eEZRVUZQZWtNc1dVRkJZMGdzUlVGQlNVY3NWVUZEYmtZc1QwRkhSbkZETEVWQlFVOTRReXhGUVVGTk5FTXNVVUZGWW5SQ0xFdEJTMDVvU1N4RlFVRlBSQ3hSUVVGVkxGTkJRVlZwUnl4RlFVRk5ReXhKUVVNdlFrRXNSVUZCVlVFc1IwRkJWeXhKUVVkU0swTXNWMEZCTUVNc2EwSkJRWFJDTDBNc1JVRkJVU3RETEZsQlEzWkRMME1zUlVGQlVTdERMRlZCUVZsd1JTeExRVWwwUWl4SlFVRkpNa1VzUlVGQmEwSjRSQ3hGUVVSMFFrTXNSVUZCVDBFc1IwRkJVU3hIUVVNd1FrTXNSMEZEZWtNc1QwRkJUeXhUUVVGblFuVkVMRWRCUjNKQ0xFZEJSa0ZCTEVWQlFWVkJMRWRCUVZjc1IwRkZNa0lzYlVKQlFUVkROMGtzVDBGQlQydENMRlZCUVZVMFNDeFRRVUZUY2tvc1MwRkJTMjlLTEVkQlFXNURMRU5CU1VFc1NVRkJTeXhKUVVGSmRrb3NSVUZCU1N4RlFVRkhRU3hGUVVGSmMwb3NSVUZCWjBKNlJDeFBRVUZSTjBZc1NVRkJTeXhEUVVNdlF5eEpRVU5KZDBjc1JVRkJVV1FzUlVGRVN6UkVMRVZCUVdkQ2RFb3NTVUZGYWtONVJpeEZRVUZaWlN4SFFVRlBTeXhoUVV0eVFpeEpRVVpCTEVsQlFVazBReXhGUVVGeFFqTkVMRVZCUVdGNVJDeEZRVUZUZGtRc1IwRkZkRU13UkN4RlFVRkxMRVZCUVVkQkxFVkJRVXRLTEVWQlFXZENla1FzVDBGQlVUWkVMRWxCUVUwc1EwRkRiRVFzU1VGRlNVTXNSVUZCVTJwRkxFVkJSa3MwUkN4RlFVRm5Ra2tzU1VGSlN5eEpRVUZ1UTJwRkxFVkJRVmxyUlN4SFFVRlJPVU1zWVVGRGRFSndRaXhGUVVGWmEwVXNSMEZCVVRkRExGVkJSWEJDY2tJc1JVRkJXVzFGTEU5QlFVOUVMRVZCUVZFc1NVRkpMMEpNTEVWQlFXdENSeXhOTERaQ1EzcFJkRUlzU1VGQlNVa3NSVUZCV1RWSUxFMUJRVkZCTEV0QlFVczBTQ3hWUVVGaExGZEJVM1JETEU5QlVrRkJMRVZCUVZkdVNpeFBRVUZQYjBvc1VVRkJWU3hUUVVGVE5Va3NSMEZEYWtNc1NVRkJTeXhKUVVGSllTeEZRVUZITDBJc1JVRkJTU3hGUVVGSGVVSXNSVUZCU1hOSkxGVkJRVlZzUlN4UFFVRlJOMFlzUlVGQlNYbENMRVZCUVVkNlFpeEpRVVUxUXl4SlFVRkxMRWxCUVVrNFFpeExRVVJVUXl4RlFVRkpaMGtzVlVGQlZTOUtMRWRCUTA5VkxFOUJRVTlyUWl4VlFVRlZReXhsUVVGbE1VSXNTMEZCU3pSQ0xFVkJRVWRFTEV0QlEzcEVXaXhGUVVGRldTeEhRVUZMUXl4RlFVRkZSQ3hKUVVWcVFpeFBRVUZQV2l4SlFVVkxPRWtzVFVGQlRTOUlMRXRCUVUwNFNDeFpRVVZvUTNKS0xFOUJRVTlETEdWQlFXVmlMRVZCUVZNc1lVRkJZeXhEUVVGRmJVSXNUMEZCVHl4SlFVTjBSQ3hKUVVkeFFtZEtMRVZCU0dwQ1F5eEZRVUZqTEVWQlFWRXNSMEZEZEVKRExFVkJRVzlDTEVWQlFWRXNSMEZEYUVNc1JVRkJVU3hMUVVOaFJpeEZRWGREYmtKSExGRkJka05KUXl4SFFVRkhReXhaUVVGakxGTkJRV05ETEVWQlFWRjJSU3hIUVVOeVF5eEpRVUZKZDBVc1JVRkJWU3hEUVVOV1F5eExRVUZOTEZOQlFWVkRMRVZCUVZORExFZEJRM0pDTEVsQlFVa3pSU3hGUVVGVmFVVXNSVUZCUlZjc1QwRkJUeXhIUVVGSlZDeEZRVUZyUW5KSUxHZENRVUZwUWpaSUxFZEJSemxFTEU5QlJrRkVMRVZCUVZGSExFdEJRVXNzV1VGQllTeEpRVUZKV0N4RlFVRlpXU3hWUVVGVk9VVXNSVUZCVXpCRkxFbEJRemRFUVN4RlFVRlJSeXhMUVVGTExGVkJRVmRvUWl4RlFVRlRRU3hGUVVGVExFZEJRVWszUkN4SFFVRlZNRVVzUlVGQlVVY3NTMEZCU3l4aFFVRmhSU3hsUVVNelJVd3NSMEZGV0Uwc1QwRkJVU3hUUVVGVlRpeEZRVUZUVHl4SFFVTjJRaXhaUVVGelFpeEpRVUZZUVN4RlFVTkJVQ3hGUVVGUlJ5eExRVUZMTEdOQlIzQkNTQ3hGUVVGUlJ5eExRVUZMTEdGQlFXRkxMRmRCUVZkRUxFZEJRM0pEVUN4RlFVRlJSeXhMUVVGTExHRkJRV0ZOTEdGQlEyNUNiRW9zVDBGSFptMUtMRk5CUVZVc1UwRkJWVllzUlVGQlUxY3NSMEZGZWtJc1QwRkVRVmdzUlVGQlVVY3NTMEZCU3l4aFFVRmhVeXhSUVVGUmJrb3NWVUZCVlN4VlFVRlhhMG9zVVVGRGJrTXNTVUZCVkVFc1IwRkpVRmdzUlVGQlVVY3NTMEZCU3l4aFFVRmhVeXhSUVVGUmJrb3NWVUZCVlN4VlFVRlhhMG9zUjBGSWFFUndTaXhQUVZGdVFpeE5RVUZ6UWl4cFFrRkJXSE5KTEVkQlFXMURMRmRCUVZoQkxFVkJRM2hDUXl4RlFVRlJSQ3hIUVVGUmNFc3NTMEZCU3poQ0xFdEJRVTFCTEV0QlFVMDRTQ3hWUVVGVkxFdEJSV2hETEdsQ1FVRllVU3hIUVVGdFF5eGhRVUZZUVN4SFFVTXZRa01zUlVGQlVVUXNSMEZCVVhCTExFdEJRVXM0UWl4TFFVRk5RU3hMUVVGTk9FZ3NWVUZCVlN4SlFVVjZRaXhwUWtGQldGRXNSMEZCZDBKQkxFOUJRVzVETEVWQlExZERMRVZCUVZGRExFdEJRVXQ0U1N4TFFVRk5jMGtzVFN3MlFrTndSSFJETEVsQlFVbFdMRVZCUVZrMVNDeE5RVUZSUVN4TFFVRkxORWdzVlVGQllTeFhRVk4wUXl4UFFWSkJRU3hGUVVGWGJrb3NUMEZCVDI5S0xGRkJRVlVzVTBGQlV6VkpMRWRCUTJwRExFbEJRVXNzU1VGQlNXRXNSVUZCUnk5Q0xFVkJRVWtzUlVGQlIzbENMRVZCUVVselNTeFZRVUZWYkVVc1QwRkJVVGRHTEVWQlFVbDVRaXhGUVVGSGVrSXNTVUZGTlVNc1NVRkJTeXhKUVVGSk9FSXNTMEZFVkVNc1JVRkJTV2RKTEZWQlFWVXZTaXhIUVVOUFZTeFBRVUZQYTBJc1ZVRkJWVU1zWlVGQlpURkNMRXRCUVVzMFFpeEZRVUZIUkN4TFFVTjZSRm9zUlVGQlJWa3NSMEZCUzBNc1JVRkJSVVFzU1VGRmFrSXNUMEZCVDFvc1NVRkZTemhKTEUxQlFVMHZTQ3hMUVVGTk9FZ3NXVUZGYUVOeVNpeFBRVUZQUXl4bFFVRmxZaXhGUVVGVExHRkJRV01zUTBGQlJXMUNMRTlCUVU4c1NVRkRkRVJ1UWl4RlFVRlJaMHdzWlVGQldTeEZRVU53UWl4SlFVRkpVeXhGUVVGVkxFVkJRVkVzUjBGRGJFSkRMRVZCUVZNc1JVRkJVU3hIUVVOcVFrTXNSVUZCYVVJc1JVRkJVU3hIUVVONlFuUkNMRVZCUVc5Q0xFVkJRVkVzUjBGRE5VSlhMRVZCUVRKQ0xGZEJRek5DTEZOQlFWTkJMRVZCUVZVNVJTeEZRVUZUTUVZc1IwRkRlRUo2U2l4TFFVRkxlVW9zVVVGQlZVRXNSVUZEWm5wS0xFdEJRVXR4U2l4UlFVRlZMRWxCUVVsSExFVkJRV1Y2U2l4aFFVTnNRME1zUzBGQlN6QktMRTFCUVZFeFNpeExRVUZMTWtvc1dVRkJXVFZHTEVkQlF6bENMMFFzUzBGQlN6UktMRXRCUVU4MVNpeExRVUZMTmtvc1YwRkJWemRLTEV0QlFVc3dTaXhOUVVGTlNTeE5RVUZQVEN4SFFVTTVRM3BLTEV0QlFVc3JTaXhuUWtGdlExUXNUMEZzUTBGc1FpeEZRVUZWYkVvc1ZVRkJWWFZLTEZkQlFXRXNWMEZETjBKc1NpeExRVUZMTkVvc1MwRkJTMGtzWjBKQlJXUnVRaXhGUVVGVmJFb3NWVUZCVlhOS0xGZEJRV0VzVTBGQlZXeEdMRWRCUTNaRExFbEJRVWxyUnl4RlFVRmhja01zUlVGQlUwRXNSVUZCVXl4SFFVRkpUU3hGUVVGclFuSklMR2xDUVVGclFtdEVMRWRCUXpORkwwUXNTMEZCU3pCS0xFMUJRVTFSTEZGQlFWRkVMRWxCUlhaQ2NFSXNSVUZCVld4S0xGVkJRVlZ0U2l4WFFVRmhMRmRCUXpkQ0xFOUJRVTg1U1N4TFFVRkxNRW9zVFVGQlRVa3NUMEZGZEVKcVFpeEZRVUZWYkVvc1ZVRkJWV2RMTEZsQlFXTXNVMEZCVlRWR0xFZEJRM2hETEU5QlFVOHNTVUZCU1hWR0xFVkJRVkZoTEUxQlFVMXdSeXhKUVVVM1FqaEZMRVZCUVZWc1NpeFZRVUZWYTBzc1YwRkJZU3hUUVVGVk9VWXNSVUZCVXpCR0xFZEJRMmhFTEU5QlFVOHNTVUZCU1VZc1JVRkJUMkVzUzBGQlMzSkhMRVZCUVZNd1JpeEpRVVZ3UTFvc1JVRkJWV3hLTEZWQlFWVnZTeXhqUVVGblFpeFhRVU5vUXk5S0xFdEJRVXR4U3l4WFFVRmhja3NzUzBGQlMzRkxMRmRCUVZjNVN5eExRVUZMVXl4TlFVTjJRMEVzUzBGQlMzTkxMR2RDUVVGclFuUkxMRXRCUVV0elN5eG5Ra0ZCWjBJdlN5eExRVUZMVXl4TlFVTnFSRUVzUzBGQlMzVkxMRzlDUVVWVU1VSXNSVUZCVld4S0xGVkJRVlUwU3l4cFFrRkJiVUlzVjBGRGJrTjJTeXhMUVVGTE1Fb3NUVUZCVFV3c1VVRkJVVzVLTEZWQlFWVXNWVUZCVjBZc1MwRkJTM0ZMTEZsQlF6ZERja3NzUzBGQlN6UktMRXRCUVV0UUxGRkJRVkZ1U2l4VlFVRlZMR05CUVdWR0xFdEJRVXR6U3l4clFrRkZjRVI2UWl4RlFVRlZiRW9zVlVGQlZUQkxMRmRCUVdFc1UwRkJWVE5LTEVkQlEzWkRWaXhMUVVGTE5Fb3NTMEZCUzFrc1QwRkJUemxLTEVkQlEycENWaXhMUVVGTGNVb3NVVUZCVVRWSkxFdEJRVXNzVlVGQlYwTXNTVUZGYWtOdFNTeEZRVUZWYkVvc1ZVRkJWVEpMTEdkQ1FVRnJRaXhUUVVGVlJ5eEhRVU0xUXl4SlFVRkpReXhGUVVGaE1Vc3NTMEZCU3pCS0xFMUJRVTFKTEUxQlEzaENjRW9zUlVGQlZXdElMRVZCUVZOQkxFVkJRVk1zUjBGQlNUaERMRWRCUVdGRUxFZEJRMnBFZWtzc1MwRkJTekJLTEUxQlFVMVJMRkZCUVZGNFNpeEpRVVZvUW0xSkxFVkJNVU50UWl4SFFUUkRPVUpvVEN4RlFVRlJaMHdzVlVGQldVRXNSeXcyUWtNM1JIQkNMRWxCUVVscVFpeEZRVUZaTlVnc1RVRkJVVUVzUzBGQlN6UklMRlZCUVdFc1YwRlRkRU1zVDBGU1FVRXNSVUZCVjI1S0xFOUJRVTl2U2l4UlFVRlZMRk5CUVZNMVNTeEhRVU5xUXl4SlFVRkxMRWxCUVVsaExFVkJRVWN2UWl4RlFVRkpMRVZCUVVkNVFpeEZRVUZKYzBrc1ZVRkJWV3hGTEU5QlFWRTNSaXhGUVVGSmVVSXNSVUZCUjNwQ0xFbEJSVFZETEVsQlFVc3NTVUZCU1RoQ0xFdEJSRlJETEVWQlFVbG5TU3hWUVVGVkwwb3NSMEZEVDFVc1QwRkJUMnRDTEZWQlFWVkRMR1ZCUVdVeFFpeExRVUZMTkVJc1JVRkJSMFFzUzBGRGVrUmFMRVZCUVVWWkxFZEJRVXRETEVWQlFVVkVMRWxCUldwQ0xFOUJRVTlhTEVsQlJVczRTU3hOUVVGTkwwZ3NTMEZCVFRoSUxGbEJSV2hEY2tvc1QwRkJUME1zWlVGQlpXSXNSVUZCVXl4aFFVRmpMRU5CUVVWdFFpeFBRVUZQTEVsQlEzUkVia0lzUlVGQlVYTk5MRmRCUVZFc1JVRkRhRUlzU1VGQlNWZ3NSVUZCYVVJc1JVRkJVU3hIUVVONlFsY3NSVUZCZFVJc1YwRkRka0lzVTBGQlUwRXNSVUZCVFhCSExFZEJRMWd2UkN4TFFVRkxjVW9zVVVGQlZTeEpRVUZKUnl4RlFVRmxla29zWVVGRGJFTkRMRXRCUVVzNFNpeE5RVUZST1Vvc1MwRkJTM2RKTEV0QlFVdDZSU3hIUVdkRk0wSXNUMEU1UkVGdlJ5eEZRVUZOZUVzc1ZVRkJWWFZMTEZGQlFWVXNVMEZCVlc1SExFZEJRMmhETEVsQlFVazBSeXhGUVVGcFFqTkxMRXRCUVVzeVN5eGxRVUZsTlVjc1IwRkRja00yUnl4RlFVRnhRalZMTEV0QlFVczBTeXh0UWtGQmJVSTNSeXhIUVVOcVJDOUVMRXRCUVVzNFNpeE5RVUZSYkVNc1JVRkJVMEVzUlVGQlUwRXNSVUZCVXl4SFFVRkpOMFFzUjBGQlZUUkhMRWRCUVdsQ1F5eEhRVU4yUlRWTExFdEJRVXR4U2l4UlFVRlJOVWtzUzBGQlN5eFZRVUZYVkN4TFFVRkxPRW9zVVVGRmRFTkxMRVZCUVUxNFN5eFZRVUZWTmtrc1MwRkJUeXhUUVVGVmVrVXNSMEZGTjBJc1QwRkVRUzlFTEV0QlFVdHJTeXhSUVVGUmJrY3NSMEZEVGk5RUxFdEJRVXM0U2l4UFFVVm9Ra3NzUlVGQlRYaExMRlZCUVZWcFRDeHRRa0ZCY1VJc1UwRkJWVGRITEVkQlF6TkRMRWxCUVVrdlF5eEZRVUZOSzBNc1JVRkJVUzlETEVsQlFVdERMRVZCUVUwNFF5eEZRVUZST1VNc1NVRkJTME1zUlVGQlR6WkRMRVZCUVZFM1F5eExRVU55UkVFc1JVRkJUeXhKUVVOUU5rTXNSVUZCVVRkRExFdEJRVThzUjBGRGJrSXNTVUZCU1RKS0xFVkJRVlZETEV0QlFVdERMRWxCUVVrNVNpeEhRVUZQTEVWQll6bENMRTlCWWtsRExFVkJRVTh5U2l4SlFVTlFPVWNzUlVGQlVUZERMRXRCUVU4eVNpeEhRVU5tTlVvc1IwRkJUMFFzUjBGQlQwTXNSVUZCVFN4SlFVTndRamhETEVWQlFWRXZReXhKUVVGTlFTeEZRVUZOUlN4SFFVVndRa1lzUjBGQlQwTXNSMEZCVDBFc1JVRkJUU3hKUVVOd1FqaERMRVZCUVZFdlF5eEpRVUZOUVN4RlFVTmtLME1zUlVGQlVUbERMRWxCUVUxRUxFVkJRVTFGTEVkQlJYQkNSQ3hGUVVGTkxFZEJRVXRCTEVWQlFVMUVMRWxCUTJwQ0swTXNSVUZCVVRsRExFbEJRVTFFTEVWQlFVMUZMRVZCUTNCQ05rTXNSVUZCVVM5RExFbEJRVTFCTEVkQlJWZ3JReXhIUVVWWWIwY3NSVUZCVFhoTExGVkJRVlZuVEN4bFFVRnBRaXhUUVVGVk5VY3NSMEZEZGtNc1NVRkJTVFZETEVWQlFVODBReXhGUVVGUk5VTXNTMEZCVFVNc1JVRkJTekpETEVWQlFWRXpReXhIUVVGSlNDeEZRVUZOT0VNc1JVRkJVVGxETEVsQlFVdEVMRVZCUVUwclF5eEZRVUZSTDBNc1NVRkJTMFFzUlVGQlQyZEVMRVZCUVZGb1JDeExRVUZOUnl4RlFVRlBOa01zUlVGQlVUZERMRXRCTmtKd1NDeE5RVFZDWVN4WFFVRlVTQ3hKUVVOQlowUXNSVUZCVVRORExFZEJRVXRJTEVkQlJXSkVMRVZCUVUxSExFbEJRMDQwUXl4RlFVRlJOVU1zUzBGQlQwZ3NSMEZEWmtrc1JVRkJTMGdzU1VGRFREaERMRVZCUVZFelF5eEhRVUZMU0N4SFFVTmlRU3hGUVVGTkxFZEJRV0VzU1VGQlVrUXNTVUZEV0N0RExFVkJRVkUxUXl4TFFVRlBTQ3hGUVVObUswTXNSVUZCVVRORExFZEJRVXRLTEVkQlJVb3NWMEZCVkVRc1IwRkRTVWtzUjBGQlVVTXNTVUZEVWpKRExFVkJRVkUxUXl4TFFVRlBReXhGUVVGTFJpeEhRVWQ0UWtVc1IwRkJUVW9zU1VGRFRpdERMRVZCUVZFelF5eEhRVUZMU2l4RlFVRk5SU3hGUVVOdVFqWkRMRVZCUVZFMVF5eExRVUZQU0N4SFFVVm1SeXhGUVVGUExFZEJRMGhJTEVWQlFVMHNSMEZCUzBNc1JVRkJUU3hKUVVOcVFqaERMRVZCUVZFMVF5eExRVUZQU0N4SFFVZHVRa01zUlVGQlRVUXNTVUZEVGl0RExFVkJRVkV6UXl4SFFVRkxTaXhGUVVGTlJTeEhRVVZvUWpaRExFZEJSVXB2Unl4RlFXNUZaU3hIUVhGRk1VSjBUU3hGUVVGUmMwMHNUVUZCVVVFc1J5dzJRa051Um1oQ0xFbEJRVWwyUXl4RlFVRlpOVWdzVFVGQlVVRXNTMEZCU3pSSUxGVkJRV0VzVjBGVGRFTXNUMEZTUVVFc1JVRkJWMjVLTEU5QlFVOXZTaXhSUVVGVkxGTkJRVk0xU1N4SFFVTnFReXhKUVVGTExFbEJRVWxoTEVWQlFVY3ZRaXhGUVVGSkxFVkJRVWQ1UWl4RlFVRkpjMGtzVlVGQlZXeEZMRTlCUVZFM1JpeEZRVUZKZVVJc1JVRkJSM3BDTEVsQlJUVkRMRWxCUVVzc1NVRkJTVGhDTEV0QlJGUkRMRVZCUVVsblNTeFZRVUZWTDBvc1IwRkRUMVVzVDBGQlQydENMRlZCUVZWRExHVkJRV1V4UWl4TFFVRkxORUlzUlVGQlIwUXNTMEZEZWtSYUxFVkJRVVZaTEVkQlFVdERMRVZCUVVWRUxFbEJSV3BDTEU5QlFVOWFMRWxCUlVzNFNTeE5RVUZOTDBnc1MwRkJUVGhJTEZsQlJXaERja29zVDBGQlQwTXNaVUZCWldJc1JVRkJVeXhoUVVGakxFTkJRVVZ0UWl4UFFVRlBMRWxCUTNSRWJrSXNSVUZCVVhWTkxGVkJRVThzUlVGRFppeEpRVUZKV2l4RlFVRnBRaXhGUVVGUkxFZEJRM3BDZDBJc1JVRkJXU3hGUVVGUkxFZEJRM0JDUXl4RlFVRlZMRVZCUVZFc1IwRkRiRUpETEVWQlFWVXNSVUZCVVN4SFFVTnNRa01zUlVGQlVTeEZRVUZSTEVsQlEyaENaaXhGUVVGelFpeFhRVU4wUWl4VFFVRlRRU3hGUVVGTGNrY3NSVUZCVXpCR0xFZEJRMjVDZWtvc1MwRkJTM0ZLTEZGQlFWVXNTVUZCU1Vjc1JVRkJaWHBLTEdGQlEyeERReXhMUVVGTGVVb3NVVUZCVlVFc1JVRkRabnBLTEV0QlFVdHZUQ3hQUVVGVGNFd3NTMEZCUzNGTUxHRkJRV0YwU0N4RlFVRlRNRVlzUjBGRGVrTjZTaXhMUVVGTE9Fb3NUVUZCVVRsS0xFdEJRVXQzU1N4TFFVRkxla1VzUjBGRGRrSXZSQ3hMUVVGTGMwd3NVVUZCVlhSTUxFdEJRVXQxVEN4alFVRmpka3dzUzBGQlN6aEtMRTlCUTNaRE9Vb3NTMEZCUzNkTUxFbEJRVTE0VEN4TFFVRkxlVXdzVlVGQlZYcE1MRXRCUVVzNFNpeFBRVU12UWpsS0xFdEJRVXN3VEN4TlFVRlJNVXdzUzBGQlN6Sk1MRmxCUVZrelRDeExRVUZMT0Vvc1QwRkRia001U2l4TFFVRkxORXdzVFVGQlVUVk1MRXRCUVVzMlRDeFpRVUZaTjB3c1MwRkJTemhLTEU5QlEyNURPVW9zUzBGQlMzZExMRTlCUVU5NFN5eExRVUZMT0Vvc1QwRkRha0k1U2l4TFFVRkxPRXdzY1VKQkswOVVMRTlCTlU5Qk1VSXNSVUZCUzNwTExGVkJRVlUyU1N4TFFVRlBMRk5CUVZWNlJTeEhRVU0xUWl4SlFVRkpaMGtzUlVGQlR5OU1MRXRCUVV0blRTeGpRVUZqYWtrc1IwRkRNVUpyU1N4RlFVRlZhazBzUzBGQlMydE5MRmRCUVZkdVNTeEhRVU14UW5GSUxFVkJRVk53VEN4TFFVRkxiMHdzVDBGRGJFSXNUMEZCVDNoRUxFVkJRVk5CTEVWQlFWTXNSMEZCU1RkRUxFZEJRVlVzUTBGQlJXZEpMRXRCUVUxQkxFVkJRVTFGTEZGQlFWTkJMRVZCUVZOaUxFOUJRVkZCTEV0QlJXNUdhRUlzUlVGQlMzcExMRlZCUVZVd1RDeGhRVUZsTEZOQlFWVjBTQ3hGUVVGVE1FWXNSMEZETjBNc1NVRkJTVE5KTEVWQlFXTnBSQ3hGUVVGUmFrUXNXVUZEZEVKelN5eEZRVUZUZGtrc1UwRkJVMjlETEdOQlFXTXNUMEZIY0VNc1QwRkdRVzFITEVWQlFVOWxMRlZCUVZrc2FVSkJRVzFDY2t3c1JVRkRkRU15U1N4RlFVRlJNa01zVDBGQlQyaENMRWRCUTFKQkxFZEJSVmhvUWl4RlFVRkxla3NzVlVGQlZXZE5MRmxCUVdNc1UwRkJWVFZJTEVkQlEyNURMRTlCUVU4c1NVRkJTV3RJTEVWQlFWRnZRaXhOUVVGTmRFa3NTVUZGTjBKeFJ5eEZRVUZMZWtzc1ZVRkJWVGhNTEZWQlFWa3NVMEZCVlRGSUxFZEJRMnBETEU5QlFVOHNTVUZCU1c5SUxFVkJRVTF0UWl4SlFVRkpka2tzU1VGRmVrSnhSeXhGUVVGTGVrc3NWVUZCVlRSTUxHTkJRV2RDTEZOQlFWVjRTQ3hIUVVOeVF5eFBRVUZQTEVsQlFVbHBTQ3hGUVVGVmRVSXNVVUZCVVhoSkxFbEJSV3BEY1Vjc1JVRkJTM3BMTEZWQlFWVnJUU3haUVVGakxGTkJRVlU1U0N4SFFVTnVReXhQUVVGUExFbEJRVWx0U0N4RlFVRlJjMElzVFVGQlRYcEpMRWxCVFRkQ2NVY3NSVUZCUzNwTExGVkJRVlUyU3l4UFFVRlRMRk5CUVZWcFF5eEhRVU01UWl4SlFVRkpReXhGUVVGak9VVXNSVUZCVTBFc1JVRkJVeXhIUVVGSk5VZ3NTMEZCU3poS0xFOUJRVkV5UXl4SFFVTnlSSHBOTEV0QlFVdHpUQ3hSUVVGUlpDeFBRVUZQYTBNc1IwRkRjRUl4VFN4TFFVRkxkMHdzU1VGQlNXaENMRTlCUVU5clF5eEhRVU5vUWpGTkxFdEJRVXMwVEN4TlFVRk5jRUlzVDBGQlQydERMRWRCUTJ4Q01VMHNTMEZCU3pCTUxFMUJRVTFzUWl4UFFVRlBhME1zUjBGRGJFSXhUU3hMUVVGTE9Fb3NUVUZCVVd4RExFVkJRVk1zUjBGQlNUaEZMRWxCUnpsQ2RFTXNSVUZCUzNwTExGVkJRVlZ4U3l4aFFVRmxMRmRCUXpGQ2FFc3NTMEZCUzI5TUxFOUJRVTkwUml4VFFVTmFPVVlzUzBGQlMyOU1MRTlCUVZOd1RDeExRVUZMY1V3c1lVRkJZWEpNTEV0QlFVczRTaXhOUVVGUE9Vb3NTMEZCUzNsS0xGTkJRMnBFZWtvc1MwRkJTemhLTEUxQlFWRTVTaXhMUVVGTGQwa3NTMEZCUzNoSkxFdEJRVXM0U2l4UFFVTTFRamxLTEV0QlFVdHpUQ3hSUVVGVmRFd3NTMEZCUzNWTUxHTkJRV04yVEN4TFFVRkxPRW9zVDBGRGRrTTVTaXhMUVVGTE5Fd3NUVUZCVVRWTUxFdEJRVXMyVEN4WlFVRlpOMHdzUzBGQlN6aEtMRTlCUTI1RE9Vb3NTMEZCU3pCTUxFMUJRVkV4VEN4TFFVRkxNa3dzV1VGQldUTk1MRXRCUVVzNFNpeFBRVU51UXpsS0xFdEJRVXQzVEN4SlFVRk5lRXdzUzBGQlMzbE1MRlZCUVZWNlRDeExRVUZMT0Vvc1QwRkRMMEk1U2l4TFFVRkxkMHNzVDBGQlQzaExMRXRCUVVzNFNpeFBRVU5xUWpsS0xFdEJRVXM0VEN4elFrRkZWREZDTEVWQlFVdDZTeXhWUVVGVmRVMHNWMEZCWVN4VFFVRlZia2tzUjBGRGJFTXNTVUZCU1M5RExFVkJRVTByUXl4RlFVRlJMME1zU1VGQlMwTXNSVUZCVFRoRExFVkJRVkU1UXl4SlFVRkxReXhGUVVGUE5rTXNSVUZCVVRkRExFdEJRM0pFZVVNc1JVRkJVMjFJTEV0QlFVczJRaXhOUVVGTk1Vd3NSVUZCVFVRc1IwRkJUMFVzUjBGRGNrTXNUMEZCVDJ4Q0xFdEJRVXRuVFN4alFVRmpha2tzUjBGQlYwb3NSMEZGZWtONVJ5eEZRVUZMZWtzc1ZVRkJWVzFOTEcxQ1FVRnhRaXhYUVVOb1F6bE1MRXRCUVVzMFRTeGhRVUZsTlUwc1MwRkJTelJOTEdGQlFXRnlUaXhMUVVGTFV5eE5RVU16UTBFc1MwRkJTelpOTEdGQlFXVTNUU3hMUVVGTE5rMHNZVUZCWVhST0xFdEJRVXRUTEUxQlF6TkRRU3hMUVVGTE9FMHNjVUpCUlZReFF5eEZRVUZMZWtzc1ZVRkJWVzFPTEd0Q1FVRnZRaXhYUVVNdlFpeEpRVUZKUXl4RlFVRm5RaTlOTEV0QlFVdG5UaXhWUVVGVmVrNHNTMEZCUzFNc1RVRkRlRU5CTEV0QlFVdHZUQ3hQUVVGUE5rSXNhVUpCUVdsQ0xHRkJRV05HTEVkQlF6TkRMMDBzUzBGQlMyOU1MRTlCUVU4MlFpeHBRa0ZCYVVJc1dVRkJZVVlzUjBGRE1VTXZUU3hMUVVGTGIwd3NUMEZCVHpaQ0xHbENRVUZwUWl4UlFVRlRhazRzUzBGQlN6Uk5MR05CUXpORE5VMHNTMEZCUzI5TUxFOUJRVTgyUWl4cFFrRkJhVUlzWVVGQlkycE9MRXRCUVVzMlRTeGxRVVZ3UkhwRExFVkJRVXQ2U3l4VlFVRlZjVTRzVlVGQldTeFRRVUZWY2swc1IwRkRha01zU1VGQlNYTkRMRVZCUVZOMFF5eEZRVUZOYzBNc1QwRkRia0lzUjBGQlNXcEVMRXRCUVV0clRpeGpRVUZqYWtzc1IwRkJVeXhEUVVNMVFpeEpRVUZKYTBzc1JVRkJVMjVPTEV0QlFVdHZUaXhMUVVGTE4wNHNTMEZCUzFNc1MwRkJUV2xFTEVkQlF6bENiMHNzUlVGQllTeFhRVU5pZUVzc1UwRkJVM2xMTEc5Q1FVRnZRaXhaUVVGaFNDeEhRVU14UTJ4TExFVkJRVTl4U3l4dlFrRkJiMElzV1VGQllVZ3NSMEZEZUVOMFN5eFRRVUZUZVVzc2IwSkJRVzlDTEZWQlFWZEVMRWRCUTNoRGNFc3NSVUZCVDNGTExHOUNRVUZ2UWl4WFFVRlpSQ3hKUVVVelEzaExMRk5CUVZOdlN5eHBRa0ZCYVVJc1dVRkJZVVVzUjBGRGRrTnNTeXhGUVVGUFowc3NhVUpCUVdsQ0xGbEJRV0ZGTEVkQlEzSkRkRXNzVTBGQlUyOUxMR2xDUVVGcFFpeFZRVUZYU1N4SFFVTnlRM0JMTEVWQlFVOW5TeXhwUWtGQmFVSXNWMEZCV1Vrc1MwRkhOVU5xUkN4RlFVRkxla3NzVlVGQlZYbE9MRXRCUVU4c1UwRkJWVzVMTEVWQlFWRjBReXhIUVVOd1F5eEpRVUZKUnl4RlFVRmpaQ3hMUVVGTE9Fb3NUVUZCVFdoS0xGbEJRM3BDZVUwc1JVRkJZU3hGUVVOcVFqVk5MRVZCUVUwMlRTeHBRa0ZEUkN4VFFVRlRReXhMUVVGTGVFc3NSVUZCVDJ0S0xHRkJTV3hDYjBJc1JVRkdXU3hsUVVGb1FucE5MRVZCUTIxQ0xHTkJRV1pJTEVWQlFVMUpMRXRCUTA5bUxFdEJRVXN3VGl4cFFrRkJhVUl2VFN4RlFVRk5aMDRzVVVGQlVTeEhRVUZIUXl4VFFVZDJRelZPTEV0QlFVc3dUaXhwUWtGQmFVSXZUU3hGUVVGTmFVNHNVMEZIZWtJc1kwRkJabXBPTEVWQlFVMUpMRXRCUTBWbUxFdEJRVXN3VGl4cFFrRkJhVUl2VFN4RlFVRk5aMDRzVVVGQlVTeEhRVUZIUlN4VFFVZDJRemRPTEV0QlFVc3dUaXhwUWtGQmFVSXZUU3hGUVVGTmEwNHNVMEZGTjBNM1RpeExRVUZMT0U0c1pVRkJaVkFzUlVGQldYUkxMRXRCUlhCRGJVZ3NSVUZCUzNwTExGVkJRVlYxVGl4alFVRm5RaXhUUVVGVmFrc3NSMEZEY2tNc1NVRkJTWEZKTEVWQlFWVjBUQ3hMUVVGTGIwd3NUMEZCVHpKRExHbENRVUZwUWl4dFFrRkRNME1zVDBGQlNYcERMRVZCUVZFc1NVRkRTa0VzUlVGQlVTeEhRVUZITUVNc1UwRkJVeTlMTEVkQlEySXNUMEZGV0hGSkxFVkJRVkVzUjBGQlJ6QkRMRk5CUVZNdlN5eEhRVU5pTEV0QlJVb3NZVUZGV0cxSUxFVkJRVXQ2U3l4VlFVRlZhMDRzWVVGQlpTeFRRVUZWYkUwc1IwRkRjRU1zU1VGQlNUTkNMRVZCUVZFeVFpeEZRVUZOYzA0c1QwRkJUMnBRTEUxQlEzcENaMElzUzBGQlN6aE9MR1ZCUVdVNVR5eEpRVVY0UW05TUxFVkJRVXQ2U3l4VlFVRlZhVTRzWVVGQlpTeFRRVUZWYWswc1IwRkRjRU1zU1VGQlNVY3NSVUZCWTJRc1MwRkJTemhLTEUxQlFVMW9TaXhaUVVONlFtMURMRVZCUVZOMFF5eEZRVUZOYzBNc1QwRkRabWxNTEVWQlFXRXNSVUZEYWtJc1NVRkJTU3hSUVVGUlZDeExRVUZMZUVzc1JVRkJUMnRLTEZkQlFYaENMRU5CUjBrclFpeEZRVVJuUWl4bFFVRm9RbkJPTEVWQlEyRklMRVZCUVUxcFRpeFJRVWRPYWs0c1JVRkJUV3RPTEZGQlJYWkNMRWxCUVVrM1R5eEZRVUZSWjBJc1MwRkJTekJPTEdsQ1FVRnBRbEVzUjBGRGJFTnNUeXhMUVVGTE9FNHNaVUZCWlRsUExFdEJSWGhDYjB3c1JVRkJTM3BMTEZWQlFWVnRUeXhsUVVGcFFpeFRRVUZWT1U4c1JVRkJUMmxGTEVkQlF6ZERMRWxCUVVsclRDeEZRVUZMYms4c1MwRkJTemhLTEUxQlFVOHpTU3hGUVVGUFowNHNSVUZCUjJoT0xFdEJRVTFETEVWQlFVc3JUU3hGUVVGSEwwMHNSMEZCU1V3c1JVRkJUMjlPTEVWQlFVZHdUaXhMUVVGTlJ5eEZRVUZQYVU0c1JVRkJSMnBPTEV0QlF6TkZiRUlzUzBGQlMyOVBMRzlDUVVGdlFuQlFMRWRCUTNwQ0xFbEJRVWx4VUN4RlFVRmxka1FzUzBGQlMwTXNTVUZCU1RWS0xFVkJRVTl1UXl4SFFVTXZRbk5RTEVWQlFXRjRSQ3hMUVVGTFF5eEpRVUZKTTBvc1JVRkJTM0JETEVkQlExQXNWMEZCVkN0Q0xFZEJRME56VGl4RlFVTmFjazhzUzBGQlMzRktMRkZCUVZFMVNTeExRVUZMTEdOQlFXVXNRMEZCUlZVc1MwRkJUVzVETEVsQlIzaERhVVVzUlVGWFpTeFRRVVJHYWtRc1MwRkJTMnRPTEdOQlFXTnFTeXhKUVVWNlFtcEZMRVZCUVZGdlF5eEZRVUZMUml4SlFVTmliRU1zUlVGQlVXMURMRWRCUTFwdVFpeExRVUZMY1Vvc1VVRkJVVFZKTEV0QlFVc3NZMEZCWlN4RFFVRkZWU3hMUVVGTmJrTXNUVUZIY2tOQkxFVkJRVkZ0UXl4RlFVRlBSQ3hKUVVObWJFTXNSVUZCVVc5RExFZEJRMXB3UWl4TFFVRkxjVW9zVVVGQlVUVkpMRXRCUVVzc1kwRkJaU3hEUVVGRlZ5eEhRVUZKY0VNc1MwRnFRalZDTEZWQlJFUnhVQ3hGUVVGbFF5eEZRVUZqTEU5QlFWTXNUVUZGYUVSMFR5eExRVUZMY1Vvc1VVRkJVVFZKTEV0QlFVc3NZMEZCWlN4RFFVRkZWU3hMUVVGTmJrTXNTVUZIZWtOblFpeExRVUZMY1Vvc1VVRkJVVFZKTEV0QlFVc3NZMEZCWlN4RFFVRkZWeXhIUVVGSmNFTXNTMEZwUW01RWIwd3NSVUZCUzNwTExGVkJRVlVyVGl4cFFrRkJiVUlzVTBGQlZWRXNSMEZEZUVNc1NVRkJTVU1zUlVGQlMyNVBMRXRCUVVzNFNpeE5RVUZQT1Vrc1JVRkJUVzFPTEVWQlFVZHVUaXhKUVVGTFF5eEZRVUZOYTA0c1JVRkJSMnhPTEVsQlFVdERMRVZCUVU5cFRpeEZRVUZIYWs0c1MwRkJUU3RMTEVWQlFWVnJReXhGUVVGSGJFTXNVVUZCVTBZc1JVRkJUMjlETEVWQlFVZHdReXhMUVVGTmFrd3NSVUZCWTNGT0xFVkJRVWR5VGl4WlFVTndTSGxPTEVWQlFWbDJUeXhMUVVGTGQwOHNiMEpCUldwQ1F5eEZRVUZMTEVWQlQxUXNUMEZNU1VFc1JVRkVaMElzWlVGQmFFSXpUaXhGUVVOTGIwNHNSVUZCWVVzc1JVRklTRUVzUlVGQldYaERMRVZCVFZCdFF5eEhRVVZtYmtNc1JVRkRSVGxMTEVWQlExQjNUaXhGUVVGTExFVkJRMFY2VGl4RlFVTkRPRW9zUzBGQlN6UkVMRTFCUVUxRUxFVkJRVXQ0UXl4SFFVRlhMMHNzUlVGQlQwWXNSMEZQYkVSdlNpeEZRVUZMZWtzc1ZVRkJWWGxQTEc5Q1FVRnpRaXhUUVVGVmNGQXNSMEZETTBNc1NVRkJTVzFRTEVWQlFVdHVUeXhMUVVGTE9Fb3NUVUZCVDNKSkxFVkJRVkV3VFN4RlFVRkhNVTBzVFVGQlQxY3NSVUZCVnl0TUxFVkJRVWN2VEN4VFFVTnFSSFZOTEVWQlFVc3pUeXhMUVVGTE9Fb3NUVUZCVHpkSkxFVkJRVTB3VGl4RlFVRkhNVTRzU1VGQlMyVXNSVUZCVlRKTkxFVkJRVWN6VFN4UlFVRlRReXhGUVVGak1FMHNSVUZCUnpGTkxGbEJRM1JGTWswc1JVRkJUVFZRTEVWQlFWRnBReXhGUVVOc1FpeEpRVUZuUWl4SlFVRmFaU3hGUVVGclFpeERRVU5zUWl4SlFVRkpOazBzUlVGQlZTeEZRVU5XUXl4RlFVRlpMRWRCUTBrc1NVRkJhRUkzVFN4SFFVTkJORTBzUlVGQlZTOUVMRXRCUVVzMFJDeE5RVUZaTEVsQlFVNUZMRVZCUVZrc1NVRkJUU3hMUVVOMlEwVXNSVUZCV1doRkxFdEJRVXMwUkN4TlFVRlpMRWxCUVU1RkxFVkJRVmtzU1VGQlRTeFBRVWQ2UTBNc1JVRkJWUzlFTEV0QlFVczBSQ3hOUVVGWkxFbEJRVTVGTEVWQlFWa3NTVUZCVFN4TFFVTjJRMFVzUlVGQldXaEZMRXRCUVVzMFJDeE5RVUZaTEVsQlFVNUZMRVZCUVZrc1NVRkJUU3hOUVVVM1F5eEpRVUZKUnl4RlFVRnJRbXBGTEV0QlFVdERMRWxCUVVrclJDeEhRVWt2UW5KT0xFVkJRVkVzU1VGSVRYRktMRXRCUVV0RExFbEJRVWs0UkN4SFFVTkJkRWdzVTBGQlV5eEpRVWRvUTI1R0xFVkJRVmNzU1VGR1R6Sk5MRVZCUVdkQ2VFZ3NVMEZCVXl4SlFVY3pRM1pJTEV0QlFVdHhTaXhSUVVGUk5Va3NTMEZCU3l4alFVRmxMRU5CUVVWblFpeE5RVUZQUVN4SlFVTXhRM3BDTEV0QlFVdHhTaXhSUVVGUk5Va3NTMEZCU3l4alFVRmxMRU5CUVVVeVFpeFRRVUZWUVN4TlFVZHlSR2RKTEVWQlFVdDZTeXhWUVVGVk5rOHNhMEpCUVc5Q0xGZEJReTlDTEVsQlFVbE1MRVZCUVV0dVR5eExRVUZMT0Vvc1RVRkJUMmhLTEVWQlFXTnhUaXhGUVVGSGNrNHNXVUZCWVhOTExFVkJRVk1yUXl4RlFVRkhMME1zVDBGUkwwUXNUVUZPYjBJc1pVRkJhRUowU3l4RlFVTlhjMHNzUlVGQlR6UkVMSGRDUVVGM1FrTXNTMEZITDBJM1JDeEZRVUZQTkVRc2QwSkJRWGRDUlN4TFFVbHNSRGxGTEVWQlFVdDZTeXhWUVVGVmNVMHNZMEZCWjBJc1UwRkJWV3BKTEVkQlUzSkRMRTFCVG05Q0xHVkJSa1pCTEVWQlFWRnFSQ3haUVVkbVpDeExRVUZMYjB3c1QwRkJUelJFTEhkQ1FVRjNRa2NzVFVGSGNFTnVVQ3hMUVVGTGIwd3NUMEZCVHpSRUxIZENRVUYzUWtrc1VVRkpOVU5vUml4RlFURlFZeXhIUVRSUWVrSjJUU3hGUVVGUmRVMHNTMEZCVDBFc1J5dzJRa001VVdZelRDeFBRVUZQUXl4bFFVRmxZaXhGUVVGVExHRkJRV01zUTBGQlJXMUNMRTlCUVU4c1NVRkRkRVJ1UWl4RlFVRlJNRThzWVVGQlZTeEZRVU5zUWl4SlFVRkpRU3hGUVVGNVFpeFhRVU42UWl4VFFVRlRRU3hGUVVGUmVFa3NSMEZEWWk5RUxFdEJRVXRZTEU5QlFVOHdSU3hIUVRSSWFFSXNUMEV4U0VGM1NTeEZRVUZSTlUwc1ZVRkJWVTRzVDBGQlV5eFRRVUZWTUVVc1IwRkRha01zU1VGQlNYRklMRVZCUVZOeVNDeEZRVUZSY1Vnc1QwRkJVWFJMTEVWQlFXTnBSQ3hGUVVGUmFrUXNXVUZETDBOMVR5eEZRVUZqZUUwc1UwRkJVMjlETEdOQlFXTXNUMEZEZWtOdlN5eEZRVUZaYkVRc1ZVRkJXU3h6UkVGQmQwUnlUQ3hGUVVOb1JpeEpRVUZKZDA4c1JVRkJaWHBOTEZOQlFWTnZReXhqUVVGakxFOUJRekZEY1Vzc1JVRkJZVzVFTEZWQlFWa3NjVVZCUVhWRmNrd3NSVUZEYUVkelN5eEZRVUZQWjBJc1QwRkJUMmxFTEVkQlEyUnFSU3hGUVVGUFowSXNUMEZCVDJ0RUxFZEJRMlIwVUN4TFFVRkxkVkFzWTBGQlkwWXNSVUZCWVVNc1JVRkJZM1pNTEVkQlF6bERMMFFzUzBGQlMzZFFMRzFDUVVGdFFucE1MRVZCUVZOelRDeEZRVUZoUXl4SFFVTTVRM1JRTEV0QlFVdDVVQ3hqUVVGak1Vd3NSVUZCVTNWTUxFZEJRelZDZEZBc1MwRkJTekJRTEZsQlFWa3pUQ3hGUVVGVGMwd3NSVUZCWVVNc1NVRkZNME12UXl4RlFVRlJOVTBzVlVGQlZUUlFMR05CUVdkQ0xGTkJRVlZHTEVWQlFXRkRMRVZCUVdOMlRDeEhRVU51UlN4SlFVRkpha1FzUlVGQlkybEVMRVZCUVZGcVJDeFpRVU4wUWpaUExFVkJRV001VFN4VFFVRlRiME1zWTBGQll5eFBRVU42UXpCTExFVkJRVmw0UkN4VlFVRlpMSGxFUVVFeVJISk1MRVZCUTI1R0xFbEJRVWs0VHl4RlFVRm5RaTlOTEZOQlFWTnZReXhqUVVGakxFOUJRek5ETWtzc1JVRkJZM3BFTEZWQlFWa3NNRVJCUVRSRWNrd3NSVUZEZEVaMVR5eEZRVUZaYWtRc1QwRkJUM1ZFTEVkQlEyNUNUQ3hGUVVGaGJFUXNUMEZCVDNkRUxFZEJRM0JDTlZBc1MwRkJTelpRTEdsQ1FVRnBRa1lzUlVGQllVTXNSVUZCWlRkTUxFbEJSWFJFZDBrc1JVRkJVVFZOTEZWQlFWVnJVU3hwUWtGQmJVSXNVMEZCVlVZc1JVRkJZVU1zUlVGQlpUZE1MRWRCUTNaRkxFbEJRVWt6UXl4RlFVRkxNa01zUlVGQlVUTkRMRWRCUVVsRUxFVkJRVTgwUXl4RlFVRlJOVU1zUzBGQlRVMHNSVUZCVVhORExFVkJRVkYwUXl4TlFVRlBTaXhGUVVGVE1FTXNSVUZCVVRGRExFOUJRVkZETEVWQlFWZDVReXhGUVVGUmVrTXNVMEZCVlVNc1JVRkJWWGRETEVWQlFWRjRReXhSUVVGVFlTeEZRVUZYTWtJc1JVRkJVVE5DTEZOQlFWVkZMRVZCUVdGNVFpeEZRVUZSZWtJc1YwRkJXVVVzUlVGQldYVkNMRVZCUVZGMlFpeFZRVUZYVGl4RlFVRm5RalpDTEVWQlFWRTNRaXhsUVVOMlVDeEpRVUZhV0N4TFFVTnBRaXhKUVVGaVJDeEpRVU5CY1U4c1JVRkJXVWNzVlVGQldTeEhRVUZMTTA4c1JVRkJTelJQTEdsQ1FVRnRRakZQTEVWQlEzSkVkVThzUlVGQlkwVXNWVUZCV1N4SFFVRkxNVThzUlVGQlJ6SlBMR2xDUVVGdFFqRlBMRWxCUlhoRExFbEJRV0pETEVsQlEwRnhUeXhGUVVGWlJ5eFZRVUZaTTA4c1JVRkJTelJQTEdsQ1FVTTNRa2dzUlVGQlkwVXNWVUZCV1RGUExFVkJRVWN5VHl4dFFrRlBja01zU1VGQlNVTXNSVUZCVjNoT0xFVkJRVlZtTEVkQlEzSkNkMDhzUlVGQlkzcE9MRVZCUVZWS0xGRkJSMUk0VGl4SlFVRm9Ra1FzU1VGRFFVRXNSVUZCWXpkT0xGRkJSVVE0VGl4SlFVRmlSaXhKUVVOQlFTeEZRVUZYZGs4c1NVRkZUeXhKUVVGc1FsTXNTVUZEYlVJc1NVRkJaa2tzU1VGRFFYRk9MRVZCUVZsSExGVkJRVmxGTEVWQlFWTkVMR2xDUVVOcVEwZ3NSVUZCWTBVc1ZVRkJXVWNzUlVGQldVWXNhVUpCUTNSRFNpeEZRVUZaTTBzc1RVRkJUVzFNTEdkQ1FVRnJRaXhIUVVGTE1VOHNSVUZEZWtOdFR5eEZRVUZqTlVzc1RVRkJUVzFNTEdkQ1FVRnJRaXhIUVVGTEwwNHNSVUZETTBOMVRpeEZRVUZaVXl4VlFVRlZReXhKUVVGSkxITkNRVU14UWxRc1JVRkJZMUVzVlVGQlZVTXNTVUZCU1N4M1FrRkhjRUlzU1VGQldqbFBMRWxCUTBGdlR5eEZRVUZaVXl4VlFVRlZReXhKUVVGSkxHZERRVU14UWxRc1JVRkJZMUVzVlVGQlZVTXNTVUZCU1N4clEwRkhjRU01UkN4RlFVRlJOVTBzVlVGQlZTdFFMRmxCUVdNc1UwRkJWVE5NTEVWQlFWTnpUQ3hGUVVGaFF5eEhRVU0xUkN4SlFVRkpOMDRzUlVGQlVYTkRMRVZCUVZGMFF5eE5RVUZQVlN4RlFVRmhORUlzUlVGQlVUVkNMRmRCUVZsRExFVkJRVmN5UWl4RlFVRlJNMElzVTBGQlZVWXNSVUZCWjBJMlFpeEZRVUZSTjBJc1kwRkJaVWNzUlVGQll6QkNMRVZCUVZFeFFpeGhRVU5vU1N4SlFVRnNRa2dzUzBGRGJVSXNTVUZCWmtNc1IwRkRRV3RPTEVWQlFWbHlTeXhOUVVGTmMwd3NWMEZCWVN4dFFrRkJjVUpxVHl4RlFVRmpMRkZCUVZWYUxFVkJRVkVzUzBGQlQxY3NSVUZCVnl4SlFVTjBSMnRPTEVWQlFXRjBTeXhOUVVGTmMwd3NWMEZCWVN4dFFrRkJjVUpxVHl4RlFVRmpMRkZCUVZWYUxFVkJRVkVzUzBGQlQxY3NSVUZCVnl4TlFVZDJSMmxPTEVWQlFWbHlTeXhOUVVGTmMwd3NWMEZCWVRkUExFVkJReTlDTms0c1JVRkJZWFJMTEUxQlFVMXpUQ3hYUVVGaE4wOHNTMEZKTlVNNFN5eEZRVUZSTlUwc1ZVRkJWVFpRTEcxQ1FVRnhRaXhUUVVGVmVrd3NSVUZCVTNOTUxFVkJRV0ZETEVkQlEyNUZMRWxCUVVsc1R5eEZRVUZMTWtNc1JVRkJVVE5ETEVkQlFVbEVMRVZCUVU4MFF5eEZRVUZSTlVNc1MwRkJUVXdzUlVGQlkybEVMRVZCUVZGcVJDeFpRVU0xUkhsUUxFVkJRVTkyVVN4TFFVRkxkMUVzYVVKQlFXbENjRkFzUlVGQlNUSkRMRWRCUTJwRE1FMHNSVUZCVTNwUkxFdEJRVXQzVVN4cFFrRkJhVUp5VUN4RlFVRk5ORU1zUjBGRGNrTXlUU3hGUVVGaE1WRXNTMEZCU3pKUkxHMUNRVUZ0UWtvc1JVRkJUWGhOTEVkQlF6TkROazBzUlVGQlpUVlJMRXRCUVVzeVVTeHRRa0ZCYlVKR0xFVkJRVkV4VFN4SFFVTXZRaXhsUVVGb1FtcEVMRWRCUTBGMVR5eEZRVUZaY2tzc1RVRkJUV2xMTEV0QlFVOHlRaXhGUVVGbExFbEJRM2hEZEVJc1JVRkJZWFJMTEUxQlFVMXBTeXhMUVVGUGVVSXNSVUZCWVN4TlFVZDJRM0pDTEVWQlFWbHlTeXhOUVVGTk5rd3NUMEZCVTBRc1JVRkJaU3hKUVVNeFEzUkNMRVZCUVdGMFN5eE5RVUZOTmt3c1QwRkJVMGdzUlVGQllTeE5RVWRxUkc1RkxFVkJRVkUxVFN4VlFVRlZOa3NzVDBGQlV5eFRRVUZWZWtjc1IwRkRha01zU1VGQlNYRklMRVZCUVZOeVNDeEZRVUZSY1Vnc1QwRkRha0pwUlN4RlFVRmpha1VzUlVGQlQycEpMR05CUVdNc2VVSkJRMjVEYlUwc1JVRkJaV3hGTEVWQlFVOXFTU3hqUVVGakxEQkNRVU53UTNkTkxFVkJRV04yUlN4RlFVRlBha2tzWTBGQll5d3dRa0ZEYmtONVRTeEZRVUZuUW5oRkxFVkJRVTlxU1N4alFVRmpMREpDUVVONlEyNUVMRXRCUVV0M1VDeHRRa0ZCYlVKNlRDeEZRVUZUYzB3c1JVRkJZVU1zUjBGRE9VTjBVQ3hMUVVGTGVWQXNZMEZCWXpGTUxFVkJRVk4xVEN4SFFVTTFRblJRTEV0QlFVc3dVQ3haUVVGWk0wd3NSVUZCVTNOTUxFVkJRV0ZETEVkQlEzWkRkRkFzUzBGQlN6WlFMR2xDUVVGcFFrWXNSVUZCWVVNc1JVRkJaVGRNTEVsQlJYUkVkMGtzUlVGQlVUVk5MRlZCUVZVMlVTeHBRa0ZCYlVJc1UwRkJWWGhTTEVWQlFVOHJSU3hIUVVOc1JDeEpRVUZKTDBNc1JVRkJUU3RETEVWQlFWRXZReXhKUVVGTFF5eEZRVUZOT0VNc1JVRkJVVGxETEVsQlFVdERMRVZCUVU4MlF5eEZRVUZSTjBNc1MwRkJUVFpMTEVWQlFVOW9TU3hGUVVGUlowa3NTMEZCVFVVc1JVRkJWV3hKTEVWQlFWRnJTU3hSUVVOMFJ5eFBRVUZKYWs0c1NVRkJWV2xETEVWQlEwZzRTeXhGUVVOS2FrSXNTMEZCU3pSRUxFOUJRVTh4VUN4RlFVRlJaME1zUjBGQlQwVXNSMEZCVVN0TExFZEJSVGxEVFN4RlFVRlJOVTBzVlVGQlZXZFNMRzFDUVVGeFFpeFRRVUZWTTFJc1JVRkJUeXRGTEVkQlJYQkVMRTlCUVdkQ0xFbEJRVkl2UlN4RlFVUkhLMFVzUlVGQlVXZEpMRTFCUjNaQ1VTeEZRVUZSTlUwc1ZVRkJWVGhRTEdOQlFXZENMRk5CUVZVeFRDeEZRVUZUTUVZc1IwRkRha1FzU1VGQlNURkpMRVZCUVU5blJDeEZRVUZSYUVRc1MwRkZaakJKTEVWQlFWRjZSU3hOUVVGTk9Fd3NVVUZFVEN4WFFVRlVMMUFzUlVGRGQwSXNUMEZIUVN4VFFVZDZRbmRNTEVWQk9VaHBRaXhIUVdkSk5VSXhUeXhGUVVGUk1FOHNVVUZCVlVFc1J5dzJRa05zU1d4Q09VNHNUMEZCVDBNc1pVRkJaV0lzUlVGQlV5eGhRVUZqTEVOQlFVVnRRaXhQUVVGUExFbEJRM1JFYmtJc1JVRkJVWGRQTEZkQlFWRXNSVUZEYUVJc1NVRkJTVUVzUlVGQmRVSXNWMEZEZGtJc1UwRkJVMEVzUlVGQlRYUkpMRWRCUTFndlJDeExRVUZMV0N4UFFVRlBNRVVzUjBGM1EyaENMRTlCZEVOQmMwa3NSVUZCVFRGTkxGVkJRVlZPTEU5QlFWTXNVMEZCVlRCRkxFZEJReTlDTEVsQlFVbHhTQ3hGUVVGVGNrZ3NSVUZCVVhGSUxFOUJRVkYwU3l4RlFVRmphVVFzUlVGQlVXcEVMRmxCUXk5RE5Fc3NSVUZCVVRkSkxGTkJRVk52UXl4alFVRmpMRTlCUTI1RGVVY3NSVUZCVFZNc1ZVRkJXU3dyUWtGQmFVTnlUQ3hGUVVOdVJITkxMRVZCUVU5blFpeFBRVUZQVml4SFFVTmtNVXdzUzBGQlN5dFJMR2xDUVVGcFFuSkdMRVZCUVU4elNDeEpRVVZxUTNOSkxFVkJRVTB4VFN4VlFVRlZiMUlzYVVKQlFXMUNMRk5CUVZWeVJpeEZRVUZQTTBnc1IwRkRhRVFzU1VGQlNXcEVMRVZCUVdOcFJDeEZRVUZSYWtRc1dVRkRkRUpyVVN4RlFVRmhiazhzVTBGQlUyOURMR05CUVdNc1QwRkRjRU5uVFN4RlFVRlhjRThzVTBGQlUyOURMR05CUVdNc1QwRkRkRU1yVEN4RlFVRlhOMFVzVlVGQldTeHRSRUZCY1VSeVRDeEZRVU0xUlcxUkxFVkJRVk01UlN4VlFVRlpMQ3REUVVGcFJISk1MRVZCUTNSRk5Fc3NSVUZCVFZVc1QwRkJUelJGTEVkQlEySjBSaXhGUVVGTlZTeFBRVUZQTmtVc1IwRkRZbXBTTEV0QlFVdHJVaXh2UWtGQmIwSkdMRVZCUVZsRExFVkJRVlZzVGl4SlFVVnVSSE5KTEVWQlFVMHhUU3hWUVVGVmRWSXNiMEpCUVhOQ0xGTkJRVlZETEVWQlFWVkRMRVZCUVZGeVRpeEhRVU01UkN4SlFVRkpMME1zUlVGQlRTdERMRVZCUVZFdlF5eEpRVUZMUXl4RlFVRk5PRU1zUlVGQlVUbERMRWxCUVV0RkxFVkJRVTgwUXl4RlFVRlJOVU1zUzBGQlRVTXNSVUZCU3pKRExFVkJRVkV6UXl4SFFVRkpVU3hGUVVGVGJVTXNSVUZCVVc1RExFOUJRVkZETEVWQlFWTnJReXhGUVVGUmJFTXNUMEZCVVVNc1JVRkJaMEpwUXl4RlFVRlJha01zWTBGRGRFcERMRVZCUVdOblF5eEZRVUZSYUVNc1lVRkRTaXhKUVVGc1FrUXNTVUZEUVVNc1JVRkJZeXhMUVVWSUxFbEJRVmhJTEVsQlEwRjFVQ3hGUVVGVGNrSXNWVUZCV1N4SFFVRkxPVThzUlVGQlNTdFBMR2xDUVVGdFFtaFBMRVZCUTJwRWNWQXNSVUZCVDNSQ0xGVkJRVmtzUjBGQlN6ZFBMRVZCUVVrNFR5eHBRa0ZCYlVKb1R5eEpRVVZ3UXl4SlFVRllSaXhKUVVOQmMxQXNSVUZCVTNKQ0xGVkJRVmtzUjBGQlN6TlBMRVZCUVVzMFR5eHBRa0ZCYlVKb1R5eEZRVU5zUkhGUUxFVkJRVTkwUWl4VlFVRlpMRWRCUVVzeFR5eEZRVUZITWs4c2FVSkJRVzFDYUU4c1NVRkhkRVJ6U3l4RlFVRk5NVTBzVlVGQlZUWkxMRTlCUVZNc1UwRkJWWHBITEVkQlF5OUNMRWxCUVVseFNDeEZRVUZUY2tnc1JVRkJVWEZJTEU5QlEycENLMFlzUlVGQlZ5OUdMRVZCUVU5cVNTeGpRVUZqTEhOQ1FVTm9RMmxQTEVWQlFWTm9SeXhGUVVGUGFra3NZMEZCWXl4dlFrRkRiRU51UkN4TFFVRkxhMUlzYjBKQlFXOUNReXhGUVVGVlF5eEZRVUZSY2s0c1NVRkZlRU56U1N4RlFURkRaU3hIUVRSRE1VSjRUeXhGUVVGUmQwOHNUVUZCVVVFc1J5dzJRa001UTJoQ05VNHNUMEZCVDBNc1pVRkJaV0lzUlVGQlV5eGhRVUZqTEVOQlFVVnRRaXhQUVVGUExFbEJRM1JFYmtJc1JVRkJVVEpQTEZkQlFWRXNSVUZEYUVJc1NVRkJTVUVzUlVGQmRVSXNWMEZEZGtJc1UwRkJVMEVzUlVGQlRYcEpMRWRCUTFndlJDeExRVUZMV0N4UFFVRlBNRVVzUjBGeFIyaENMRTlCYmtkQmVVa3NSVUZCVFRkTkxGVkJRVlZPTEU5QlFWTXNVMEZCVlRCRkxFZEJReTlDTEVsQlFVbHhTQ3hGUVVGVGNrZ3NSVUZCVVhGSUxFOUJRVkYwU3l4RlFVRmphVVFzUlVGQlVXcEVMRmxCUXk5RE9Fc3NSVUZCVVM5SkxGTkJRVk52UXl4alFVRmpMRTlCUTI1RE1rY3NSVUZCVFU4c1ZVRkJXU3dyUWtGQmFVTnlUQ3hGUVVOdVJITkxMRVZCUVU5blFpeFBRVUZQVWl4SFFVTmtOVXdzUzBGQlN6aE5MR3RDUVVGclFteENMRWRCUTNaQ05Vd3NTMEZCUzNGU0xHVkJRV1YwVGl4RlFVRlROa2dzUjBGRE4wSTFUQ3hMUVVGTGMxSXNWMEZCVjNaT0xFVkJRVk0yU0N4SlFVVTNRbGtzUlVGQlRUZE5MRlZCUVZVMlN5eFBRVUZUTEZOQlFWVjZSeXhIUVVNdlFpeEpRVU5KTmtnc1JVRkVVemRJTEVWQlFWRnhTQ3hQUVVOR2Fra3NZMEZCWXl4clFrRkRha051UkN4TFFVRkxjMUlzVjBGQlYzWk9MRVZCUVZNMlNDeEhRVU42UWpWTUxFdEJRVXQxVWl4clFrRkJhMEo0VGl4SlFVVXpRbmxKTEVWQlFVMDNUU3hWUVVGVk5GSXNhMEpCUVc5Q0xGTkJRVlY0VGl4SFFVTXhReXhKUVVGSmNFTXNSVUZCWTI5RExFVkJRVkZ3UXl4WlFVRmhSQ3hGUVVGblFuRkRMRVZCUVZGeVF5eGpRVUZsWVN4RlFVRm5RbmRDTEVWQlFWRjRRaXhqUVVGbE5ra3NSVUZCVTNKSUxFVkJRVkZ4U0N4UFFVRlJNMG9zUlVGQlVYTkRMRVZCUVZGMFF5eE5RVU16U1RKS0xFVkJRVTh5UXl4cFFrRkJhVUlzZDBKQlF6bENiazRzVTBGQlVTeFRRVUZWTkZFc1NVRkRUQ3hKUVVGc1FqbFFMRVZCUTBFNFVDeEZRVUZaYmswc1lVRkJZU3haUVVGaExFZEJRVXN4UkN4SFFVY3pRelpRTEVWQlFWbHVUU3hoUVVGaExGbEJRV0VzUzBGRmNFSXNTVUZCYkVJNVF5eEhRVU5CYVZBc1JVRkJXVzVOTEdGQlFXRXNXVUZCWVN4SlFVTjBRMjFOTEVWQlFWbHdRaXhWUVVGVlF5eEpRVUZKTERaQ1FVY3hRbTFDTEVWQlFWbHdRaXhWUVVGVlF5eEpRVUZKTEc5RFFVZHNRM2hPTEZOQlFWTTBUeXhuUWtGQlowSjZUU3hOUVVGTk1FMHNXVUZCV1N4blFrRkJhVUlzU1VGQlRXcFJMRWxCUlhSRkswc3NSVUZCVFRkTkxGVkJRVlV5VWl4WFFVRmhMRk5CUVZWMlRpeEZRVUZUTmtnc1IwRkROVU1zU1VGQlNYQkxMRVZCUVZWMVF5eEZRVUZSZGtNc1UwRkRUaXhKUVVGYVFTeEpRVU5CYjBzc1JVRkJUVFZITEUxQlFVMDRUQ3hSUVVGVkxGTkJSVllzU1VGQlduUlFMRWxCUTBGdlN5eEZRVUZOTlVjc1RVRkJUVGhNTEZGQlFWVXNTMEZIT1VKMFJTeEZRVUZOTjAwc1ZVRkJWVzFPTEd0Q1FVRnZRaXhUUVVGVmJFSXNSMEZETVVNMVRDeExRVUZMTmswc1lVRkJaVGROTEV0QlFVczJUU3hoUVVGaGRFNHNTMEZCUzFNc1RVRkRNME0wVEN4RlFVRk5jVUlzYVVKQlFXbENMRkZCUVZOcVRpeExRVUZMTmswc1pVRkZla05NTEVWQlFVMDNUU3hWUVVGVk1GSXNaVUZCYVVJc1UwRkJWWFJPTEVWQlFWTTJTQ3hIUVUxb1JDeEpRVXhCTEVsQlFVazFTeXhGUVVGTkswTXNSVUZCVVM5RExFbEJRVXRETEVWQlFVMDRReXhGUVVGUk9VTXNTVUZCUzBNc1JVRkJUelpETEVWQlFWRTNReXhMUVVGTk5rc3NSVUZCVDJoSkxFVkJRVkZuU1N4TFFVRk5SU3hGUVVGVmJFa3NSVUZCVVd0SkxGRkJRMnhITUVZc1JVRkJUVE5TTEV0QlFVczBVaXhoUVVGaE4wNHNSMEZEZUVJNFRpeEZRVUZUUml4RlFVRk5lbEVzUlVGQlVTdExMRVZCUTNaQ05rWXNSVUZCVjJwUUxGTkJRVk5yVUN4NVFrRkRjRUpETEVWQlFWa3NSVUZEVUVNc1JVRkJWV3BTTEVWQlFVdHBVaXhGUVVGVmFGSXNTMEZETVVJclVTeEZRVUZaYWtjc1JVRkJUeXhKUVVSWmEwY3NSMEZCVjA0c1JVRkhPVU16VWl4TFFVRkxhMU1zYTBKQlFXdENTaXhGUVVGVlJ5eEZRVUZUUkN4RlFVRlhhazhzUjBGRGNrUnBUeXhIUVVGaFNDeEZRVVZxUWpkU0xFdEJRVXRyVXl4clFrRkJhMEpLTEVWQlFWVTNVU3hGUVVGTE9Fc3NSVUZCVFdoSkxFZEJRelZETmtnc1JVRkJUVkVzVDBGQlR6QkdMRWxCUldwQ2RFWXNSVUZCVFRkTkxGVkJRVlZwVXl4aFFVRmxMRk5CUVZVM1RpeEhRVU55UXl4SlFVRkpaMGtzUlVGQlQyaEpMRVZCUVZGblNTeExRVUZOUlN4RlFVRlZiRWtzUlVGQlVXdEpMRkZCUVZNdlN5eEZRVUZQTmtNc1JVRkJVVGRETEV0QlF5OUViRU1zUlVGQlVUaE1MRXRCUVVzMlFpeExRVUZMV2l4RlFVRlBSU3hIUVVVM1FpeFBRVVJWYmtJc1MwRkJTelpDTEV0QlFVc3pUaXhGUVVGUkxFZEJRVXRyUXl4SFFVZHlRM05NTEVWQlFVMDNUU3hWUVVGVmRWTXNhMEpCUVc5Q0xGTkJRVlZLTEVWQlFWVTVVeXhGUVVGUGJWUXNSVUZCVlhCUExFZEJRM0pGTEVsQlFVbHFSQ3hGUVVGamFVUXNSVUZCVVdwRUxGbEJRM1JDTUZFc1JVRkJZek5QTEZOQlFWTnZReXhqUVVGakxGRkJRM3BEZFUwc1JVRkJXWEpHTEZWQlFWa3NNa05CUVRaRGNrd3NSVUZEY2tWblVpeEZRVUZUTVVZc1QwRkJUMjlHTEVkQlEyaENRU3hGUVVGWk1VSXNWVUZCV1RsUkxFVkJRVTExU1N4WFFVTTVRblpJTEV0QlFVdDFVaXhyUWtGQmEwSjRUaXhIUVVOMlFpeEpRVUZKY1U4c1JVRkJVM0JUTEV0QlFVdHhVeXh0UWtGQmJVSkdMRVZCUVZWd1R5eEhRVU16UWl4bFFVRm9RbXBFTEVWQlEwRXdVU3hGUVVGWmVFMHNUVUZCVFdsTExFdEJRVTl0UkN4RlFVRlRMRWxCUjJ4RFdpeEZRVUZaZUUwc1RVRkJUVFpNTEU5QlFWTjFRaXhGUVVGVExFdEJSelZETlVZc1JVRkJUVGROTEZWQlFWVXdVeXh0UWtGQmNVSXNVMEZCVlhKVUxFVkJRVThyUlN4SFFVVnNSQ3hQUVVGblFpeEpRVUZTTDBVc1JVRkVSeXRGTEVWQlFWRm5TU3hOUVVsMlFsTXNSVUZCVFRkTkxGVkJRVlZyVGl4aFFVRmxMRk5CUVZWc1RTeEhRVU55UXl4SlFVRkpjME1zUlVGQlUzUkRMRVZCUVUxelF5eFBRVU51UWl4SFFVRk5RU3hoUVVGclFuRlFMR0ZCUlc1Q2NsQXNSVUZCVDIxT0xGVkJRVlZ3UXl4VFFVRlRMSFZDUVVFdlFpeERRVVZCTEVsQlFVbG9VQ3hGUVVGUmRWUXNUMEZCVDNSUUxFVkJRVTgyVFN4WFFVTjBRakJETEVWQlFXRXNTVUZCU1VNc1dVRkJXU3hoUVVGakxFTkJRVVZETEZOQlFWTXNSVUZCVFhwRkxFOUJRVkVzUTBGQlJYUk9MRTFCUVU5QkxFVkJRVTh6UWl4TlFVRlBRU3hMUVVNdlJtbEZMRVZCUVU4d1VDeGpRVUZqU0N4TFFVVnNRbWhITEVWQmRrZGxMRWRCZVVjeFFqTlBMRVZCUVZFeVR5eE5RVUZSUVN4SExEWkNRek5IYUVJdlRpeFBRVUZQUXl4bFFVRmxZaXhGUVVGVExHRkJRV01zUTBGQlJXMUNMRTlCUVU4c1NVRkRkRVJ1UWl4RlFVRlJlVThzVTBGQlRTeEZRVU5rTEVsQlFVbEJMRVZCUVhGQ0xGZEJRM0pDTEZOQlFWTkJMRVZCUVVsMlNTeEhRVU5VTDBRc1MwRkJTMWdzVDBGQlR6QkZMRWRCYlVab1FpeFBRV3BHUVhWSkxFVkJRVWt6VFN4VlFVRlZUaXhQUVVGVExGTkJRVlV3UlN4SFFVTTNRaXhKUVVGSmNVZ3NSVUZCVTNKSUxFVkJRVkZ4U0N4UFFVRlJkRXNzUlVGQlkybEVMRVZCUVZGcVJDeFpRVU12UXpCTExFVkJRVTB6U1N4VFFVRlRiME1zWTBGQll5eFBRVU5xUTNWSExFVkJRVWxYTEZWQlFWa3NNa0pCUVRaQ2Nrd3NSVUZETjBOelN5eEZRVUZQWjBJc1QwRkJUMW9zUjBGRFpIaE1MRXRCUVVzd1VDeFpRVUZaTTB3c1JVRkJVM2xJTEVkQlF6RkNlRXdzUzBGQlN6UlRMRlZCUVZVM1R5eEZRVUZUZVVnc1NVRkZOVUpqTEVWQlFVa3pUU3hWUVVGVk5rc3NUMEZCVXl4VFFVRlZla2NzUjBGRE4wSXNTVUZEU1hsSUxFVkJSRk42U0N4RlFVRlJjVWdzVDBGRFNtcEpMR05CUVdNc1owSkJReTlDYmtRc1MwRkJTekJRTEZsQlFWa3pUQ3hGUVVGVGVVZ3NSMEZETVVKNFRDeExRVUZMTkZNc1ZVRkJWVGRQTEVWQlFWTjVTQ3hKUVVVMVFtTXNSVUZCU1ROTkxGVkJRVlVyVUN4WlFVRmpMRk5CUVZVelRDeEZRVUZUZVVnc1IwRkRNME1zU1VGQlNTOUtMRVZCUVZGelF5eEZRVUZSZEVNc1RVRkJUMVVzUlVGQllUUkNMRVZCUVZFMVFpeFhRVUZaUXl4RlFVRlhNa0lzUlVGQlVUTkNMRk5CUVZWRExFVkJRV013UWl4RlFVRlJNVUlzWVVGRGVrWXNTVUZFYzBnd1FpeEZRVUZSTjBJc1owSkJSelZKYzBvc1JVRkJTWGhITEUxQlFVMXpUQ3haUVVSTExFbEJRV1p1VHl4RlFVTjFRaXh0UWtGQmNVSkZMRVZCUVdNc1VVRkJWVm9zUlVGQlVTeExRVUZQVnl4RlFVRlhMRWxCUjNaRldDeEpRVWx1UXpaTExFVkJRVWt6VFN4VlFVRlZhMVFzYlVKQlFYRkNMRk5CUVZVNVR5eEhRVU42UXl4SlFVTkpkVWdzUlVGRVUzWklMRVZCUVZGeFNDeFBRVU5CTWtNc2FVSkJRV2xDTEcxQ1FVZDBReXhOUVVaMVFpeERRVUZETDA0c1MwRkJTemhUTEd0Q1FVRnJRbmhJTEVWQlFWRXNSMEZCU1haSUxFZEJRM1pFTDBRc1MwRkJTemhUTEd0Q1FVRnJRbmhJTEVWQlFWRXNSMEZCU1haSUxFbEJRMlpuVUN4TlFVRkxMRk5CUVZWRExFVkJRVWRETEVkQlFVc3NUMEZCVDBRc1JVRkJTVU1zVFVGRk9VUXpSeXhGUVVGSk0wMHNWVUZCVlcxVUxHdENRVUZ2UWl4VFFVRlZja29zUlVGQlV6RkdMRWRCUTJwRUxFbEJRMGx0VUN4RlFVRjFRaXhsUVVSVWJsQXNSVUZCVVdwRUxGbEJRMmRDTEU5QlFWTXNUVUZETDBOeFR5eEZRVUZSYjBRc1QwRkJUMWtzVTBGQlUwTXNhVUpCUVdsQ00wb3NSMEZCVXpCR0xFMUJRVThzU1VGRE4wUXNUMEZCVHpGR0xFVkJRVkYxUml4M1FrRkJkMEpyUlN4SFFVRlJMMFFzUlVGQlVTeEhRVVV6UkRkRExFVkJRVWt6VFN4VlFVRlZaMUlzYlVKQlFYRkNMRk5CUVZVelVpeEZRVUZQSzBVc1IwRkZhRVFzVDBGQlowSXNTVUZCVWk5RkxFVkJSRWNyUlN4RlFVRlJaMGtzVFVGSGRrSlBMRVZCUVVrelRTeFZRVUZWYVZRc1ZVRkJXU3hUUVVGVk4wOHNSVUZCVTNsSUxFZEJRM3BETEVsQlFVbDZTeXhGUVVGUFowUXNSVUZCVVdoRUxFdEJRMlp6VXl4RlFVRXJRaXhsUVVSSmRGQXNSVUZCVVdwRUxGbEJSVE5EYjFNc1JVRkJUMGNzUlVGQlpTeFBRVUZUTEUxQlF5OUNReXhGUVVGWlJDeEZRVUZsTEZGQlFWVXNVMEZEY2tORkxFVkJRVmwyVkN4TFFVRkxObE1zYlVKQlFXMUNPVThzUjBGRGNFTjVVQ3hGUVVGdlFpeFhRVUZVZWxNc1JVRkRXSGRPTEVWQlFWbDJUeXhMUVVGTGVWUXNaMEpCUVdkQ01WQXNSMEZEY2tNc1IwRkJTWGxRTEVWQlEwRXNSMEZCU1Vnc1JVRkJZeXhEUVVOa0xFbEJRVWxxVXl4RlFVRkxjRUlzUzBGQlN6SlJMRzFDUVVGdFFqZEdMRXRCUVV0RExFbEJRVWwzU1N4RlFVRlZMRWRCUVV0b1JpeEhRVUZaZUVzc1IwRkRja1Y1U0N4RlFVRkplRWNzVFVGQlRXdFBMRWRCUVZFc1MwRkRiRUl4U0N4RlFVRkplRWNzVFVGQlRYTlBMRWRCUVdGc1V5eEZRVUZMTEZGQlJUTkNMRU5CUlVkQkxFVkJRVXNzUzBGRVRFUXNSVUZCVDI1Q0xFdEJRVXN5VVN4dFFrRkJiVUkzUml4TFFVRkxReXhKUVVGSmQwa3NSVUZCVlN4SFFVRkxhRVlzUjBGQldYaExMRWxCUlhaRmVVZ3NSVUZCU1hoSExFMUJRVTFyVHl4SFFVRlJMMUlzUlVGQlR5eEpRVU42UW5GTExFVkJRVWw0Unl4TlFVRk5jMDhzUjBGQllXeFRMRVZCUVVzc1VVRkhMMElzUTBGRFJDeEpRVUZKUkN4RlFVRlBia0lzUzBGQlN6SlJMRzFDUVVGdFFqZEdMRXRCUVV0RExFbEJRVWwzU1N4RlFVRlZMRWRCUVV0b1JpeEhRVUZaZUVzc1IwRkRia1V6UXl4RlFVRkxjRUlzUzBGQlN6SlJMRzFDUVVGdFFqZEdMRXRCUVV0RExFbEJRVWwzU1N4RlFVRlZMRWRCUVV0QkxFVkJRVlVzU1VGQlMzaFFMRWRCUTNoRmVVZ3NSVUZCU1hoSExFMUJRVTFyVHl4SFFVRlJMMUlzUlVGQlR5eEpRVU42UW5GTExFVkJRVWw0Unl4TlFVRk5jMDhzUjBGQllXeFRMRVZCUVVzc1RVRkhjRU5yVEN4RlFVRkpNMDBzVlVGQlZUaFVMR2RDUVVGclFpeFRRVUZWTVZBc1IwRkRkRU1zU1VGQlNXcEVMRVZCUVdOcFJDeEZRVUZSYWtRc1dVRkJZWE5MTEVWQlFWTnlTQ3hGUVVGUmNVZ3NUMEZSZUVRc1RVRk9iMElzWlVGQmFFSjBTeXhGUVVOWGMwc3NSVUZCVHpSRUxIZENRVUYzUWtNc1MwRkhMMEkzUkN4RlFVRlBORVFzZDBKQlFYZENSU3hMUVVrelF6VkRMRVZCY2taaExFZEJkVVo0UW5wUExFVkJRVkY1VHl4SlFVRk5RU3hITERaQ1EzcEdaRGRPTEU5QlFVOURMR1ZCUVdWaUxFVkJRVk1zWVVGQll5eERRVUZGYlVJc1QwRkJUeXhKUVVOMFJHNUNMRVZCUVZFeVJTeGxRVUZaTEVWQmQweHdRak5GTEVWQlFWRXlSU3hWUVhaTVVTeERRVU5hTEZWQlFWY3NXVUZEV0N4VlFVRlhMR1ZCUTFnc1ZVRkJWeXhQUVVOWUxGVkJRVmNzWVVGRFdDeFZRVUZYTEZGQlExZ3NWVUZCVnl4UlFVTllMRlZCUVZjc1UwRkRXQ3hWUVVGWExGRkJRMWdzVlVGQlZ5eHBRa0ZEV0N4VlFVRlhMRTlCUTFnc1ZVRkJWeXhoUVVOWUxGVkJRVmNzVVVGRFdDeFZRVUZYTEZsQlExZ3NWVUZCVnl4WlFVTllMRlZCUVZjc1lVRkRXQ3hWUVVGWExGbEJRMWdzVlVGQlZ5eFJRVU5ZTEZWQlFWY3NhVUpCUTFnc1ZVRkJWeXhYUVVOWUxGVkJRVmNzVlVGRFdDeFZRVUZYTEZkQlExZ3NWVUZCVnl4WFFVTllMRlZCUVZjc1owSkJRMWdzVlVGQlZ5eFhRVU5ZTEZWQlFWY3NXVUZEV0N4VlFVRlhMRmxCUTFnc1ZVRkJWeXhqUVVOWUxGVkJRVmNzYVVKQlExZ3NWVUZCVnl4aFFVTllMRlZCUVZjc1lVRkRXQ3hWUVVGWExGVkJRMWdzVlVGQlZ5eGhRVU5ZTEZWQlFWY3NaVUZEV0N4VlFVRlhMR2RDUVVOWUxGVkJRVmNzWVVGRFdDeFZRVUZYTEZWQlExZ3NWVUZCVnl4blFrRkRXQ3hWUVVGWExHZENRVU5ZTEZWQlFWY3NZVUZEV0N4VlFVRlhMRmRCUTFnc1ZVRkJWeXhqUVVOWUxGVkJRVmNzVlVGRFdDeFZRVUZYTEdGQlExZ3NWVUZCVnl4WlFVTllMRlZCUVZjc1kwRkRXQ3hWUVVGWExHTkJRMWdzVlVGQlZ5eFZRVU5ZTEZWQlFWY3NXVUZEV0N4VlFVRlhMR0ZCUTFnc1ZVRkJWeXhaUVVOWUxGVkJRVmNzVDBGRFdDeFZRVUZYTEU5QlExZ3NWVUZCVnl4VlFVTllMRlZCUVZjc1kwRkRXQ3hWUVVGWExGZEJRMWdzVlVGQlZ5eFZRVU5ZTEZWQlFWY3NXVUZEV0N4VlFVRlhMRk5CUTFnc1ZVRkJWeXhSUVVOWUxGVkJRVmNzVVVGRFdDeFZRVUZYTEdkQ1FVTllMRlZCUVZjc1YwRkRXQ3hWUVVGWExGbEJRMWdzVlVGQlZ5eGxRVU5ZTEZWQlFWY3NXVUZEV0N4VlFVRlhMR0ZCUTFnc1ZVRkJWeXhaUVVOWUxGVkJRVmNzZFVKQlExZ3NWVUZCVnl4WlFVTllMRlZCUVZjc1lVRkRXQ3hWUVVGWExGbEJRMWdzVlVGQlZ5eGpRVU5ZTEZWQlFWY3NaMEpCUTFnc1ZVRkJWeXhsUVVOWUxGVkJRVmNzYVVKQlExZ3NWVUZCVnl4cFFrRkRXQ3hWUVVGWExHTkJRMWdzVlVGQlZ5eFBRVU5ZTEZWQlFWY3NXVUZEV0N4VlFVRlhMRkZCUTFnc1ZVRkJWeXhUUVVOWUxGVkJRVmNzYlVKQlExZ3NWVUZCVnl4aFFVTllMRlZCUVZjc1pVRkRXQ3hWUVVGWExHVkJRMWdzVlVGQlZ5eHBRa0ZEV0N4VlFVRlhMR3RDUVVOWUxGVkJRVmNzYjBKQlExZ3NWVUZCVnl4clFrRkRXQ3hWUVVGWExHdENRVU5ZTEZWQlFWY3NaVUZEV0N4VlFVRlhMRmxCUTFnc1ZVRkJWeXhaUVVOWUxGVkJRVmNzVjBGRFdDeFZRVUZYTEdOQlExZ3NWVUZCVnl4UFFVTllMRlZCUVZjc1ZVRkRXQ3hWUVVGWExGRkJRMWdzVlVGQlZ5eFpRVU5ZTEZWQlFWY3NVMEZEV0N4VlFVRlhMRmxCUTFnc1ZVRkJWeXhUUVVOWUxGVkJRVmNzWjBKQlExZ3NWVUZCVnl4WlFVTllMRlZCUVZjc1owSkJRMWdzVlVGQlZ5eG5Ra0ZEV0N4VlFVRlhMR0ZCUTFnc1ZVRkJWeXhaUVVOWUxGVkJRVmNzVDBGRFdDeFZRVUZYTEU5QlExZ3NWVUZCVnl4UFFVTllMRlZCUVZjc1lVRkRXQ3hWUVVGWExGTkJRMWdzVlVGQlZ5eG5Ra0ZEV0N4VlFVRlhMRlZCUTFnc1ZVRkJWeXhaUVVOWUxGVkJRVmNzV1VGRFdDeFZRVUZYTEdOQlExZ3NWVUZCVnl4VFFVTllMRlZCUVZjc1lVRkRXQ3hWUVVGWExGZEJRMWdzVlVGQlZ5eFhRVU5ZTEZWQlFWY3NVMEZEV0N4VlFVRlhMRk5CUTFnc1ZVRkJWeXhWUVVOWUxGVkJRVmNzV1VGRFdDeFZRVUZYTEZsQlExZ3NWVUZCVnl4UFFVTllMRlZCUVZjc1kwRkRXQ3hWUVVGWExGbEJRMWdzVlVGQlZ5eE5RVU5ZTEZWQlFWY3NUMEZEV0N4VlFVRlhMRlZCUTFnc1ZVRkJWeXhUUVVOWUxGVkJRVmNzV1VGRFdDeFZRVUZYTEZOQlExZ3NWVUZCVnl4UlFVTllMRlZCUVZjc1VVRkRXQ3hWUVVGWExHRkJRMWdzVlVGQlZ5eFRRVU5ZTEZWQlFWY3NhMEpCUTFnc1ZVRkJWeXhaUVVOWUxGVkJRVmNzY1VKQlExZ3NWVUZCVnl4aFFVTllMRlZCUVZjc1dVRkRXQ3hWUVVGWExGVkJRMWdzVlVGQlZ5eG5Ra0ZEV0N4VlFVRlhMR3RDUVVOWUxGVkJRVmNzYzBKQlExZ3NWVUZCVnl4WlFVTllMRlZCUVZjc2FVSkJRMWdzVlVGQlZ5eGxRVU5ZTEZWQlFWY3NjMEpCUTFnc1ZVRkJWeXhWUVVOWUxGVkJRVmNzWlVGRFdDeFZRVUZYTEc5Q1FVTllMRlZCUVZjc1dVRkRXQ3hWUVVGWExHZENRVU5ZTEZWQlFWY3NaMEpCUTFnc1ZVRkJWeXhyUWtGRFdDeFZRVUZYTEc5Q1FVTllMRlZCUVZjc1UwRkRXQ3hWUVVGWExHMUNRVU5ZTEZWQlFWY3NiVUpCUTFnc1ZVRkJWeXhUUVVOWUxGVkJRVmNzYlVKQlExZ3NWVUZCVnl4WlFVTllMRlZCUVZjc1kwRkRXQ3hWUVVGWExHbENRVU5ZTEZWQlFWY3NZVUZEV0N4VlFVRlhMR2RDUVVOWUxFdEJRVTBzVDBGRFRpeFBRVUZWTEZsQlExWXNUMEZCVlN4aFFVTldMRlZCUVZjc1kwRkRXQ3hWUVVGWExGbEJRMWdzVlVGQlZ5eFZRVU5ZTEZWQlFWY3NaMEpCUTFnc1ZVRkJWeXhWUVVOWUxGVkJRVmNzZDBKQlExZ3NWVUZCVnl4dFFpeG5Ra040VEdZc1NVRkJTV3RTTEVWQlFVMHNSVUZCVVN4SFFVTkdReXhGUVVGVkxFVkJRVkVzU1VGSlF5eHBRa0ZHZGtKQkxFVkJRVlZCTEVWQlFWRjRWU3hYUVVGaGQxVXNSVUZCVVVNc1VVRkJWVVFzUzBGSEwwTkJMRVZCUVZVc1EwRkJReXhEUVVGRE4xWXNSVUZCVDBNc1JVRkJTVFJXTEVWQlFWTXNUVUZIT1VNc1NVRkJTVFZRTEVWQlFWVXNRMEZGWkN4UFFVRnBRaXhQUVVOcVFpeFhRVUZ2UWl4SFFVVlFNbEFzUlVGQlNVTXNSVUZCVXpWUUxFZEJTVEZDYWtjc1JVRkJUMFFzVVVGQlZUaFdMRVZCUVZGRkxGRkJRVlVzU1NJc0ltWnBiR1VpT2lKemJHbGtaWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SWdYSFF2THlCVWFHVWdiVzlrZFd4bElHTmhZMmhsWEc0Z1hIUjJZWElnYVc1emRHRnNiR1ZrVFc5a2RXeGxjeUE5SUh0OU8xeHVYRzRnWEhRdkx5QlVhR1VnY21WeGRXbHlaU0JtZFc1amRHbHZibHh1SUZ4MFpuVnVZM1JwYjI0Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aHRiMlIxYkdWSlpDa2dlMXh1WEc0Z1hIUmNkQzh2SUVOb1pXTnJJR2xtSUcxdlpIVnNaU0JwY3lCcGJpQmpZV05vWlZ4dUlGeDBYSFJwWmlocGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFNrZ2UxeHVJRngwWEhSY2RISmxkSFZ5YmlCcGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFM1bGVIQnZjblJ6TzF4dUlGeDBYSFI5WEc0Z1hIUmNkQzh2SUVOeVpXRjBaU0JoSUc1bGR5QnRiMlIxYkdVZ0tHRnVaQ0J3ZFhRZ2FYUWdhVzUwYnlCMGFHVWdZMkZqYUdVcFhHNGdYSFJjZEhaaGNpQnRiMlIxYkdVZ1BTQnBibk4wWVd4c1pXUk5iMlIxYkdWelcyMXZaSFZzWlVsa1hTQTlJSHRjYmlCY2RGeDBYSFJwT2lCdGIyUjFiR1ZKWkN4Y2JpQmNkRngwWEhSc09pQm1ZV3h6WlN4Y2JpQmNkRngwWEhSbGVIQnZjblJ6T2lCN2ZWeHVJRngwWEhSOU8xeHVYRzRnWEhSY2RDOHZJRVY0WldOMWRHVWdkR2hsSUcxdlpIVnNaU0JtZFc1amRHbHZibHh1SUZ4MFhIUnRiMlIxYkdWelcyMXZaSFZzWlVsa1hTNWpZV3hzS0cxdlpIVnNaUzVsZUhCdmNuUnpMQ0J0YjJSMWJHVXNJRzF2WkhWc1pTNWxlSEJ2Y25SekxDQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLVHRjYmx4dUlGeDBYSFF2THlCR2JHRm5JSFJvWlNCdGIyUjFiR1VnWVhNZ2JHOWhaR1ZrWEc0Z1hIUmNkRzF2WkhWc1pTNXNJRDBnZEhKMVpUdGNibHh1SUZ4MFhIUXZMeUJTWlhSMWNtNGdkR2hsSUdWNGNHOXlkSE1nYjJZZ2RHaGxJRzF2WkhWc1pWeHVJRngwWEhSeVpYUjFjbTRnYlc5a2RXeGxMbVY0Y0c5eWRITTdYRzRnWEhSOVhHNWNibHh1SUZ4MEx5OGdaWGh3YjNObElIUm9aU0J0YjJSMWJHVnpJRzlpYW1WamRDQW9YMTkzWldKd1lXTnJYMjF2WkhWc1pYTmZYeWxjYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHViU0E5SUcxdlpIVnNaWE03WEc1Y2JpQmNkQzh2SUdWNGNHOXpaU0IwYUdVZ2JXOWtkV3hsSUdOaFkyaGxYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtTWdQU0JwYm5OMFlXeHNaV1JOYjJSMWJHVnpPMXh1WEc0Z1hIUXZMeUJrWldacGJtVWdaMlYwZEdWeUlHWjFibU4wYVc5dUlHWnZjaUJvWVhKdGIyNTVJR1Y0Y0c5eWRITmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVpDQTlJR1oxYm1OMGFXOXVLR1Y0Y0c5eWRITXNJRzVoYldVc0lHZGxkSFJsY2lrZ2UxeHVJRngwWEhScFppZ2hYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV2S0dWNGNHOXlkSE1zSUc1aGJXVXBLU0I3WEc0Z1hIUmNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lHNWhiV1VzSUhzZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN3Z1oyVjBPaUJuWlhSMFpYSWdmU2s3WEc0Z1hIUmNkSDFjYmlCY2RIMDdYRzVjYmlCY2RDOHZJR1JsWm1sdVpTQmZYMlZ6VFc5a2RXeGxJRzl1SUdWNGNHOXlkSE5jYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjaUE5SUdaMWJtTjBhVzl1S0dWNGNHOXlkSE1wSUh0Y2JpQmNkRngwYVdZb2RIbHdaVzltSUZONWJXSnZiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnVTNsdFltOXNMblJ2VTNSeWFXNW5WR0ZuS1NCN1hHNGdYSFJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRk41YldKdmJDNTBiMU4wY21sdVoxUmhaeXdnZXlCMllXeDFaVG9nSjAxdlpIVnNaU2NnZlNrN1hHNGdYSFJjZEgxY2JpQmNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lDZGZYMlZ6VFc5a2RXeGxKeXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYmlCY2RIMDdYRzVjYmlCY2RDOHZJR055WldGMFpTQmhJR1poYTJVZ2JtRnRaWE53WVdObElHOWlhbVZqZEZ4dUlGeDBMeThnYlc5a1pTQW1JREU2SUhaaGJIVmxJR2x6SUdFZ2JXOWtkV3hsSUdsa0xDQnlaWEYxYVhKbElHbDBYRzRnWEhRdkx5QnRiMlJsSUNZZ01qb2diV1Z5WjJVZ1lXeHNJSEJ5YjNCbGNuUnBaWE1nYjJZZ2RtRnNkV1VnYVc1MGJ5QjBhR1VnYm5OY2JpQmNkQzh2SUcxdlpHVWdKaUEwT2lCeVpYUjFjbTRnZG1Gc2RXVWdkMmhsYmlCaGJISmxZV1I1SUc1eklHOWlhbVZqZEZ4dUlGeDBMeThnYlc5a1pTQW1JRGg4TVRvZ1ltVm9ZWFpsSUd4cGEyVWdjbVZ4ZFdseVpWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1MElEMGdablZ1WTNScGIyNG9kbUZzZFdVc0lHMXZaR1VwSUh0Y2JpQmNkRngwYVdZb2JXOWtaU0FtSURFcElIWmhiSFZsSUQwZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aDJZV3gxWlNrN1hHNGdYSFJjZEdsbUtHMXZaR1VnSmlBNEtTQnlaWFIxY200Z2RtRnNkV1U3WEc0Z1hIUmNkR2xtS0NodGIyUmxJQ1lnTkNrZ0ppWWdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iMkpxWldOMEp5QW1KaUIyWVd4MVpTQW1KaUIyWVd4MVpTNWZYMlZ6VFc5a2RXeGxLU0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdYSFJjZEhaaGNpQnVjeUE5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hHNGdYSFJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWNpaHVjeWs3WEc0Z1hIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodWN5d2dKMlJsWm1GMWJIUW5MQ0I3SUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzSUhaaGJIVmxPaUIyWVd4MVpTQjlLVHRjYmlCY2RGeDBhV1lvYlc5a1pTQW1JRElnSmlZZ2RIbHdaVzltSUhaaGJIVmxJQ0U5SUNkemRISnBibWNuS1NCbWIzSW9kbUZ5SUd0bGVTQnBiaUIyWVd4MVpTa2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrS0c1ekxDQnJaWGtzSUdaMWJtTjBhVzl1S0d0bGVTa2dleUJ5WlhSMWNtNGdkbUZzZFdWYmEyVjVYVHNnZlM1aWFXNWtLRzUxYkd3c0lHdGxlU2twTzF4dUlGeDBYSFJ5WlhSMWNtNGdibk03WEc0Z1hIUjlPMXh1WEc0Z1hIUXZMeUJuWlhSRVpXWmhkV3gwUlhod2IzSjBJR1oxYm1OMGFXOXVJR1p2Y2lCamIyMXdZWFJwWW1sc2FYUjVJSGRwZEdnZ2JtOXVMV2hoY20xdmJua2diVzlrZFd4bGMxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dUlEMGdablZ1WTNScGIyNG9iVzlrZFd4bEtTQjdYRzRnWEhSY2RIWmhjaUJuWlhSMFpYSWdQU0J0YjJSMWJHVWdKaVlnYlc5a2RXeGxMbDlmWlhOTmIyUjFiR1VnUDF4dUlGeDBYSFJjZEdaMWJtTjBhVzl1SUdkbGRFUmxabUYxYkhRb0tTQjdJSEpsZEhWeWJpQnRiMlIxYkdWYkoyUmxabUYxYkhRblhUc2dmU0E2WEc0Z1hIUmNkRngwWm5WdVkzUnBiMjRnWjJWMFRXOWtkV3hsUlhod2IzSjBjeWdwSUhzZ2NtVjBkWEp1SUcxdlpIVnNaVHNnZlR0Y2JpQmNkRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0tHZGxkSFJsY2l3Z0oyRW5MQ0JuWlhSMFpYSXBPMXh1SUZ4MFhIUnlaWFIxY200Z1oyVjBkR1Z5TzF4dUlGeDBmVHRjYmx4dUlGeDBMeThnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbThnUFNCbWRXNWpkR2x2YmlodlltcGxZM1FzSUhCeWIzQmxjblI1S1NCN0lISmxkSFZ5YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2IySnFaV04wTENCd2NtOXdaWEowZVNrN0lIMDdYRzVjYmlCY2RDOHZJRjlmZDJWaWNHRmphMTl3ZFdKc2FXTmZjR0YwYUY5ZlhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5BZ1BTQmNJbHdpTzF4dVhHNWNiaUJjZEM4dklFeHZZV1FnWlc1MGNua2diVzlrZFd4bElHRnVaQ0J5WlhSMWNtNGdaWGh3YjNKMGMxeHVJRngwY21WMGRYSnVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eklEMGdNeWs3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVSWFpsYm5SRmJXbDBkR1Z5SUQwZ2RtOXBaQ0F3TzF4dWRtRnlJRVYyWlc1MFJXMXBkSFJsY2lBOUlDOHFLaUJBWTJ4aGMzTWdLaThnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCRmRtVnVkRVZ0YVhSMFpYSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWFpsYm5SeklEMGdlMzA3WEc0Z0lDQWdmVnh1SUNBZ0lFVjJaVzUwUlcxcGRIUmxjaTV3Y205MGIzUjVjR1V1YzNWaWMyTnlhV0psSUQwZ1puVnVZM1JwYjI0Z0tHVjJaVzUwVG1GdFpTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnSVhSb2FYTXVaWFpsYm5SelcyVjJaVzUwVG1GdFpWMGdKaVlnS0hSb2FYTXVaWFpsYm5SelcyVjJaVzUwVG1GdFpWMGdQU0JiWFNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WlhabGJuUnpXMlYyWlc1MFRtRnRaVjB1Y0hWemFDaGpZV3hzWW1GamF5azdYRzRnSUNBZ2ZUdGNiaUFnSUNCRmRtVnVkRVZ0YVhSMFpYSXVjSEp2ZEc5MGVYQmxMblZ1YzNWaWMyTnlhV0psSUQwZ1puVnVZM1JwYjI0Z0tHVjJaVzUwVG1GdFpTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxkbVZ1ZEhOYlpYWmxiblJPWVcxbFhTQTlJSFJvYVhNdVpYWmxiblJ6VzJWMlpXNTBUbUZ0WlYwdVptbHNkR1Z5S0daMWJtTjBhVzl1SUNobGRtVnVkRU5oYkd4aVlXTnJLU0I3SUhKbGRIVnliaUJqWVd4c1ltRmpheUFoUFQwZ1pYWmxiblJEWVd4c1ltRmphenNnZlNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExtVnRhWFFnUFNCbWRXNWpkR2x2YmlBb1pYWmxiblJPWVcxbExDQnVaWGRFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGRtVnVkQ0E5SUhSb2FYTXVaWFpsYm5SelcyVjJaVzUwVG1GdFpWMDdYRzRnSUNBZ0lDQWdJR1YyWlc1MElDWW1JR1YyWlc1MExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHTmhiR3hpWVdOcktTQjdJSEpsZEhWeWJpQmpZV3hzWW1GamF5NWpZV3hzS0c1MWJHd3NJRzVsZDBSaGRHRXBPeUI5S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQkZkbVZ1ZEVWdGFYUjBaWEk3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVGZG1WdWRFVnRhWFIwWlhJZ1BTQkZkbVZ1ZEVWdGFYUjBaWEk3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVjM1JoYm1SaGNtUlBjSFJwYjI1eklEMGdkbTlwWkNBd08xeHVkbUZ5SUdOdmJHOXlYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOWpiMnh2Y2x3aUtUdGNiblpoY2lCemRHRnVaR0Z5WkU5d2RHbHZibk1nUFNCN1hHNGdJQ0FnYjNKcFpXNTBZWFJwYjI0NklDZG9iM0pwZW05dWRHRnNKeXhjYmlBZ0lDQjBlWEJsT2lBblpHOTFZbXhsSnl4Y2JpQWdJQ0J0YVc0NklEQXNYRzRnSUNBZ2JXRjRPaUF4TUN4Y2JpQWdJQ0J6ZEdWd09pQXhMRnh1SUNBZ0lHWnliMjA2SURNc1hHNGdJQ0FnZEc4NklEY3NYRzRnSUNBZ2NISmxabWw0T2lBbjRvSzlKeXhjYmlBZ0lDQnBjMUJ5WldacGVEb2dkSEoxWlN4Y2JpQWdJQ0JwYzB4aFltVnNPaUIwY25WbExGeHVJQ0FnSUdselUyTmhiR1U2SUhSeWRXVXNYRzRnSUNBZ1kyOXNiM0k2SUNkdmNtRnVaMlVuTEZ4dUlDQWdJR2x6VTJOaGJHVlFjbVZtYVhnNklIUnlkV1VzWEc0Z0lDQWdjMk5oYkdWUWNtVm1hWGc2SUNmaWdyMG5MRnh1SUNBZ0lHMXBiazFoZURvZ1ptRnNjMlVzWEc0Z0lDQWdabkp2YlZSdk9pQm1ZV3h6WlN4Y2JpQWdJQ0JwYzFSeVlXTnJVSEpsWm1sNE9pQjBjblZsTEZ4dUlDQWdJSFJ5WVdOclVISmxabWw0T2lBbjRvSzlKeXhjYmlBZ0lDQnBjME52Ykc5eU9pQjBjblZsTEZ4dUlDQWdJR05vWVc1blpVTnZiRzl5T2lCMGNuVmxMRnh1SUNBZ0lHbHpRMmhoYm1kbFEyOXNiM0k2SUhSeWRXVXNYRzRnSUNBZ2FYTkhjbUZrYVdWdWREb2dkSEoxWlN4Y2JpQWdJQ0JuY21Ga2FXVnVkRG9nSjNCMWNuQnNaU2NzWEc0Z0lDQWdaM0poWkdsbGJuUkVaV2M2SURRMUxGeHVJQ0FnSUdselEyOXNiM0pQZFhRNklHWmhiSE5sTEZ4dUlDQWdJRzl1YkhsRWFYWnBjMmx2Ym5NNklHWmhiSE5sTEZ4dUlDQWdJR0ZzYkVOdmJHOXljem9nWTI5c2IzSmZNUzVoYkd4RGIyeHZjbk1zWEc1OU8xeHVaWGh3YjNKMGN5NXpkR0Z1WkdGeVpFOXdkR2x2Ym5NZ1BTQnpkR0Z1WkdGeVpFOXdkR2x2Ym5NN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1ZG1GeUlHbHpUMnhrU1VVZ1BTQm1kVzVqZEdsdmJpQnBjMDlzWkVsRktDa2dlMXh1SUNCMllYSWdiV1Z0Ynp0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHMWxiVzl5YVhwbEtDa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiV1Z0YnlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUM4dklGUmxjM1FnWm05eUlFbEZJRHc5SURrZ1lYTWdjSEp2Y0c5elpXUWdZbmtnUW5KdmQzTmxjbWhoWTJ0elhHNGdJQ0FnSUNBdkx5QkFjMlZsSUdoMGRIQTZMeTlpY205M2MyVnlhR0ZqYTNNdVkyOXRMeU5vWVdOckxXVTNNV1E0TmpreVpqWTFNek0wTVRjelptVmxOekUxWXpJeU1tTmlPREExWEc0Z0lDQWdJQ0F2THlCVVpYTjBjeUJtYjNJZ1pYaHBjM1JsYm1ObElHOW1JSE4wWVc1a1lYSmtJR2RzYjJKaGJITWdhWE1nZEc4Z1lXeHNiM2NnYzNSNWJHVXRiRzloWkdWeVhHNGdJQ0FnSUNBdkx5QjBieUJ2Y0dWeVlYUmxJR052Y25KbFkzUnNlU0JwYm5SdklHNXZiaTF6ZEdGdVpHRnlaQ0JsYm5acGNtOXViV1Z1ZEhOY2JpQWdJQ0FnSUM4dklFQnpaV1VnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNkbFluQmhZMnN0WTI5dWRISnBZaTl6ZEhsc1pTMXNiMkZrWlhJdmFYTnpkV1Z6THpFM04xeHVJQ0FnSUNBZ2JXVnRieUE5SUVKdmIyeGxZVzRvZDJsdVpHOTNJQ1ltSUdSdlkzVnRaVzUwSUNZbUlHUnZZM1Z0Wlc1MExtRnNiQ0FtSmlBaGQybHVaRzkzTG1GMGIySXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdFpXMXZPMXh1SUNCOU8xeHVmU2dwTzF4dVhHNTJZWElnWjJWMFZHRnlaMlYwSUQwZ1puVnVZM1JwYjI0Z1oyVjBWR0Z5WjJWMEtDa2dlMXh1SUNCMllYSWdiV1Z0YnlBOUlIdDlPMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYldWdGIzSnBlbVVvZEdGeVoyVjBLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ0WlcxdlczUmhjbWRsZEYwZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNCMllYSWdjM1I1YkdWVVlYSm5aWFFnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLSFJoY21kbGRDazdJQzh2SUZOd1pXTnBZV3dnWTJGelpTQjBieUJ5WlhSMWNtNGdhR1ZoWkNCdlppQnBabkpoYldVZ2FXNXpkR1ZoWkNCdlppQnBabkpoYldVZ2FYUnpaV3htWEc1Y2JpQWdJQ0FnSUdsbUlDaDNhVzVrYjNjdVNGUk5URWxHY21GdFpVVnNaVzFsYm5RZ0ppWWdjM1I1YkdWVVlYSm5aWFFnYVc1emRHRnVZMlZ2WmlCM2FXNWtiM2N1U0ZSTlRFbEdjbUZ0WlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlVhR2x6SUhkcGJHd2dkR2h5YjNjZ1lXNGdaWGhqWlhCMGFXOXVJR2xtSUdGalkyVnpjeUIwYnlCcFpuSmhiV1VnYVhNZ1lteHZZMnRsWkZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR1IxWlNCMGJ5QmpjbTl6Y3kxdmNtbG5hVzRnY21WemRISnBZM1JwYjI1elhHNGdJQ0FnSUNBZ0lDQWdjM1I1YkdWVVlYSm5aWFFnUFNCemRIbHNaVlJoY21kbGRDNWpiMjUwWlc1MFJHOWpkVzFsYm5RdWFHVmhaRHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMFhHNGdJQ0FnSUNBZ0lDQWdjM1I1YkdWVVlYSm5aWFFnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUcxbGJXOWJkR0Z5WjJWMFhTQTlJSE4wZVd4bFZHRnlaMlYwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnRaVzF2VzNSaGNtZGxkRjA3WEc0Z0lIMDdYRzU5S0NrN1hHNWNiblpoY2lCemRIbHNaWE5KYmtSdmJTQTlJRnRkTzF4dVhHNW1kVzVqZEdsdmJpQm5aWFJKYm1SbGVFSjVTV1JsYm5ScFptbGxjaWhwWkdWdWRHbG1hV1Z5S1NCN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNBdE1UdGNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITjBlV3hsYzBsdVJHOXRMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnYVdZZ0tITjBlV3hsYzBsdVJHOXRXMmxkTG1sa1pXNTBhV1pwWlhJZ1BUMDlJR2xrWlc1MGFXWnBaWElwSUh0Y2JpQWdJQ0FnSUhKbGMzVnNkQ0E5SUdrN1hHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdGIyUjFiR1Z6Vkc5RWIyMG9iR2x6ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0IyWVhJZ2FXUkRiM1Z1ZEUxaGNDQTlJSHQ5TzF4dUlDQjJZWElnYVdSbGJuUnBabWxsY25NZ1BTQmJYVHRjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQjJZWElnYVhSbGJTQTlJR3hwYzNSYmFWMDdYRzRnSUNBZ2RtRnlJR2xrSUQwZ2IzQjBhVzl1Y3k1aVlYTmxJRDhnYVhSbGJWc3dYU0FySUc5d2RHbHZibk11WW1GelpTQTZJR2wwWlcxYk1GMDdYRzRnSUNBZ2RtRnlJR052ZFc1MElEMGdhV1JEYjNWdWRFMWhjRnRwWkYwZ2ZId2dNRHRjYmlBZ0lDQjJZWElnYVdSbGJuUnBabWxsY2lBOUlGd2lYQ0l1WTI5dVkyRjBLR2xrTENCY0lpQmNJaWt1WTI5dVkyRjBLR052ZFc1MEtUdGNiaUFnSUNCcFpFTnZkVzUwVFdGd1cybGtYU0E5SUdOdmRXNTBJQ3NnTVR0Y2JpQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCblpYUkpibVJsZUVKNVNXUmxiblJwWm1sbGNpaHBaR1Z1ZEdsbWFXVnlLVHRjYmlBZ0lDQjJZWElnYjJKcUlEMGdlMXh1SUNBZ0lDQWdZM056T2lCcGRHVnRXekZkTEZ4dUlDQWdJQ0FnYldWa2FXRTZJR2wwWlcxYk1sMHNYRzRnSUNBZ0lDQnpiM1Z5WTJWTllYQTZJR2wwWlcxYk0xMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FXWWdLR2x1WkdWNElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ2MzUjViR1Z6U1c1RWIyMWJhVzVrWlhoZExuSmxabVZ5Wlc1alpYTXJLenRjYmlBZ0lDQWdJSE4wZVd4bGMwbHVSRzl0VzJsdVpHVjRYUzUxY0dSaGRHVnlLRzlpYWlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wZVd4bGMwbHVSRzl0TG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0JwWkdWdWRHbG1hV1Z5T2lCcFpHVnVkR2xtYVdWeUxGeHVJQ0FnSUNBZ0lDQjFjR1JoZEdWeU9pQmhaR1JUZEhsc1pTaHZZbW9zSUc5d2RHbHZibk1wTEZ4dUlDQWdJQ0FnSUNCeVpXWmxjbVZ1WTJWek9pQXhYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaR1Z1ZEdsbWFXVnljeTV3ZFhOb0tHbGtaVzUwYVdacFpYSXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR2xrWlc1MGFXWnBaWEp6TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm5ObGNuUlRkSGxzWlVWc1pXMWxiblFvYjNCMGFXOXVjeWtnZTF4dUlDQjJZWElnYzNSNWJHVWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZHpkSGxzWlNjcE8xeHVJQ0IyWVhJZ1lYUjBjbWxpZFhSbGN5QTlJRzl3ZEdsdmJuTXVZWFIwY21saWRYUmxjeUI4ZkNCN2ZUdGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHRjBkSEpwWW5WMFpYTXVibTl1WTJVZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnZG1GeUlHNXZibU5sSUQwZ2RIbHdaVzltSUY5ZmQyVmljR0ZqYTE5dWIyNWpaVjlmSUNFOVBTQW5kVzVrWldacGJtVmtKeUEvSUY5ZmQyVmljR0ZqYTE5dWIyNWpaVjlmSURvZ2JuVnNiRHRjYmx4dUlDQWdJR2xtSUNodWIyNWpaU2tnZTF4dUlDQWdJQ0FnWVhSMGNtbGlkWFJsY3k1dWIyNWpaU0E5SUc1dmJtTmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRTlpYW1WamRDNXJaWGx6S0dGMGRISnBZblYwWlhNcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHdGxlU2tnZTF4dUlDQWdJSE4wZVd4bExuTmxkRUYwZEhKcFluVjBaU2hyWlhrc0lHRjBkSEpwWW5WMFpYTmJhMlY1WFNrN1hHNGdJSDBwTzF4dVhHNGdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeTVwYm5ObGNuUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCdmNIUnBiMjV6TG1sdWMyVnlkQ2h6ZEhsc1pTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUhSaGNtZGxkQ0E5SUdkbGRGUmhjbWRsZENodmNIUnBiMjV6TG1sdWMyVnlkQ0I4ZkNBbmFHVmhaQ2NwTzF4dVhHNGdJQ0FnYVdZZ0tDRjBZWEpuWlhRcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrTnZkV3hrYmlkMElHWnBibVFnWVNCemRIbHNaU0IwWVhKblpYUXVJRlJvYVhNZ2NISnZZbUZpYkhrZ2JXVmhibk1nZEdoaGRDQjBhR1VnZG1Gc2RXVWdabTl5SUhSb1pTQW5hVzV6WlhKMEp5QndZWEpoYldWMFpYSWdhWE1nYVc1MllXeHBaQzVjSWlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdGeVoyVjBMbUZ3Y0dWdVpFTm9hV3hrS0hOMGVXeGxLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ6ZEhsc1pUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnRiM1psVTNSNWJHVkZiR1Z0Wlc1MEtITjBlV3hsS1NCN1hHNGdJQzh2SUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmx4dUlDQnBaaUFvYzNSNWJHVXVjR0Z5Wlc1MFRtOWtaU0E5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lITjBlV3hsTG5CaGNtVnVkRTV2WkdVdWNtVnRiM1psUTJocGJHUW9jM1I1YkdVcE8xeHVmVnh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdJQ292WEc1Y2JseHVkbUZ5SUhKbGNHeGhZMlZVWlhoMElEMGdablZ1WTNScGIyNGdjbVZ3YkdGalpWUmxlSFFvS1NCN1hHNGdJSFpoY2lCMFpYaDBVM1J2Y21VZ1BTQmJYVHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhKbGNHeGhZMlVvYVc1a1pYZ3NJSEpsY0d4aFkyVnRaVzUwS1NCN1hHNGdJQ0FnZEdWNGRGTjBiM0psVzJsdVpHVjRYU0E5SUhKbGNHeGhZMlZ0Wlc1ME8xeHVJQ0FnSUhKbGRIVnliaUIwWlhoMFUzUnZjbVV1Wm1sc2RHVnlLRUp2YjJ4bFlXNHBMbXB2YVc0b0oxeGNiaWNwTzF4dUlDQjlPMXh1ZlNncE8xeHVYRzVtZFc1amRHbHZiaUJoY0hCc2VWUnZVMmx1WjJ4bGRHOXVWR0ZuS0hOMGVXeGxMQ0JwYm1SbGVDd2djbVZ0YjNabExDQnZZbW9wSUh0Y2JpQWdkbUZ5SUdOemN5QTlJSEpsYlc5MlpTQS9JQ2NuSURvZ2IySnFMbTFsWkdsaElEOGdYQ0pBYldWa2FXRWdYQ0l1WTI5dVkyRjBLRzlpYWk1dFpXUnBZU3dnWENJZ2Uxd2lLUzVqYjI1allYUW9iMkpxTG1OemN5d2dYQ0o5WENJcElEb2diMkpxTG1OemN6c2dMeThnUm05eUlHOXNaQ0JKUlZ4dVhHNGdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBZ0tpOWNibHh1SUNCcFppQW9jM1I1YkdVdWMzUjViR1ZUYUdWbGRDa2dlMXh1SUNBZ0lITjBlV3hsTG5OMGVXeGxVMmhsWlhRdVkzTnpWR1Y0ZENBOUlISmxjR3hoWTJWVVpYaDBLR2x1WkdWNExDQmpjM01wTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQmpjM05PYjJSbElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFZHVjRkRTV2WkdVb1kzTnpLVHRjYmlBZ0lDQjJZWElnWTJocGJHUk9iMlJsY3lBOUlITjBlV3hsTG1Ob2FXeGtUbTlrWlhNN1hHNWNiaUFnSUNCcFppQW9ZMmhwYkdST2IyUmxjMXRwYm1SbGVGMHBJSHRjYmlBZ0lDQWdJSE4wZVd4bExuSmxiVzkyWlVOb2FXeGtLR05vYVd4a1RtOWtaWE5iYVc1a1pYaGRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTJocGJHUk9iMlJsY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhOMGVXeGxMbWx1YzJWeWRFSmxabTl5WlNoamMzTk9iMlJsTENCamFHbHNaRTV2WkdWelcybHVaR1Y0WFNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wZVd4bExtRndjR1Z1WkVOb2FXeGtLR056YzA1dlpHVXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJoY0hCc2VWUnZWR0ZuS0hOMGVXeGxMQ0J2Y0hScGIyNXpMQ0J2WW1vcElIdGNiaUFnZG1GeUlHTnpjeUE5SUc5aWFpNWpjM003WEc0Z0lIWmhjaUJ0WldScFlTQTlJRzlpYWk1dFpXUnBZVHRjYmlBZ2RtRnlJSE52ZFhKalpVMWhjQ0E5SUc5aWFpNXpiM1Z5WTJWTllYQTdYRzVjYmlBZ2FXWWdLRzFsWkdsaEtTQjdYRzRnSUNBZ2MzUjViR1V1YzJWMFFYUjBjbWxpZFhSbEtDZHRaV1JwWVNjc0lHMWxaR2xoS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCemRIbHNaUzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9KMjFsWkdsaEp5azdYRzRnSUgxY2JseHVJQ0JwWmlBb2MyOTFjbU5sVFdGd0lDWW1JSFI1Y0dWdlppQmlkRzloSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJR056Y3lBclBTQmNJbHhjYmk4cUl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNYQ0l1WTI5dVkyRjBLR0owYjJFb2RXNWxjMk5oY0dVb1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtFcFRUMDR1YzNSeWFXNW5hV1o1S0hOdmRYSmpaVTFoY0NrcEtTa3NJRndpSUNvdlhDSXBPMXh1SUNCOUlDOHZJRVp2Y2lCdmJHUWdTVVZjYmx4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnSUNvdlhHNWNibHh1SUNCcFppQW9jM1I1YkdVdWMzUjViR1ZUYUdWbGRDa2dlMXh1SUNBZ0lITjBlV3hsTG5OMGVXeGxVMmhsWlhRdVkzTnpWR1Y0ZENBOUlHTnpjenRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IzYUdsc1pTQW9jM1I1YkdVdVptbHljM1JEYUdsc1pDa2dlMXh1SUNBZ0lDQWdjM1I1YkdVdWNtVnRiM1psUTJocGJHUW9jM1I1YkdVdVptbHljM1JEYUdsc1pDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUjViR1V1WVhCd1pXNWtRMmhwYkdRb1pHOWpkVzFsYm5RdVkzSmxZWFJsVkdWNGRFNXZaR1VvWTNOektTazdYRzRnSUgxY2JuMWNibHh1ZG1GeUlITnBibWRzWlhSdmJpQTlJRzUxYkd3N1hHNTJZWElnYzJsdVoyeGxkRzl1UTI5MWJuUmxjaUE5SURBN1hHNWNibVoxYm1OMGFXOXVJR0ZrWkZOMGVXeGxLRzlpYWl3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0IyWVhJZ2MzUjViR1U3WEc0Z0lIWmhjaUIxY0dSaGRHVTdYRzRnSUhaaGNpQnlaVzF2ZG1VN1hHNWNiaUFnYVdZZ0tHOXdkR2x2Ym5NdWMybHVaMnhsZEc5dUtTQjdYRzRnSUNBZ2RtRnlJSE4wZVd4bFNXNWtaWGdnUFNCemFXNW5iR1YwYjI1RGIzVnVkR1Z5S3lzN1hHNGdJQ0FnYzNSNWJHVWdQU0J6YVc1bmJHVjBiMjRnZkh3Z0tITnBibWRzWlhSdmJpQTlJR2x1YzJWeWRGTjBlV3hsUld4bGJXVnVkQ2h2Y0hScGIyNXpLU2s3WEc0Z0lDQWdkWEJrWVhSbElEMGdZWEJ3YkhsVWIxTnBibWRzWlhSdmJsUmhaeTVpYVc1a0tHNTFiR3dzSUhOMGVXeGxMQ0J6ZEhsc1pVbHVaR1Y0TENCbVlXeHpaU2s3WEc0Z0lDQWdjbVZ0YjNabElEMGdZWEJ3YkhsVWIxTnBibWRzWlhSdmJsUmhaeTVpYVc1a0tHNTFiR3dzSUhOMGVXeGxMQ0J6ZEhsc1pVbHVaR1Y0TENCMGNuVmxLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J6ZEhsc1pTQTlJR2x1YzJWeWRGTjBlV3hsUld4bGJXVnVkQ2h2Y0hScGIyNXpLVHRjYmlBZ0lDQjFjR1JoZEdVZ1BTQmhjSEJzZVZSdlZHRm5MbUpwYm1Rb2JuVnNiQ3dnYzNSNWJHVXNJRzl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdjbVZ0YjNabElEMGdablZ1WTNScGIyNGdjbVZ0YjNabEtDa2dlMXh1SUNBZ0lDQWdjbVZ0YjNabFUzUjViR1ZGYkdWdFpXNTBLSE4wZVd4bEtUdGNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdkWEJrWVhSbEtHOWlhaWs3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCMWNHUmhkR1ZUZEhsc1pTaHVaWGRQWW1vcElIdGNiaUFnSUNCcFppQW9ibVYzVDJKcUtTQjdYRzRnSUNBZ0lDQnBaaUFvYm1WM1QySnFMbU56Y3lBOVBUMGdiMkpxTG1OemN5QW1KaUJ1WlhkUFltb3ViV1ZrYVdFZ1BUMDlJRzlpYWk1dFpXUnBZU0FtSmlCdVpYZFBZbW91YzI5MWNtTmxUV0Z3SUQwOVBTQnZZbW91YzI5MWNtTmxUV0Z3S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RYQmtZWFJsS0c5aWFpQTlJRzVsZDA5aWFpazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGJXOTJaU2dwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2JHbHpkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlRzZ0x5OGdSbTl5WTJVZ2MybHVaMnhsTFhSaFp5QnpiMngxZEdsdmJpQnZiaUJKUlRZdE9Td2dkMmhwWTJnZ2FHRnpJR0VnYUdGeVpDQnNhVzFwZENCdmJpQjBhR1VnSXlCdlppQThjM1I1YkdVK1hHNGdJQzh2SUhSaFozTWdhWFFnZDJsc2JDQmhiR3h2ZHlCdmJpQmhJSEJoWjJWY2JseHVJQ0JwWmlBb0lXOXdkR2x2Ym5NdWMybHVaMnhsZEc5dUlDWW1JSFI1Y0dWdlppQnZjSFJwYjI1ekxuTnBibWRzWlhSdmJpQWhQVDBnSjJKdmIyeGxZVzRuS1NCN1hHNGdJQ0FnYjNCMGFXOXVjeTV6YVc1bmJHVjBiMjRnUFNCcGMwOXNaRWxGS0NrN1hHNGdJSDFjYmx4dUlDQnNhWE4wSUQwZ2JHbHpkQ0I4ZkNCYlhUdGNiaUFnZG1GeUlHeGhjM1JKWkdWdWRHbG1hV1Z5Y3lBOUlHMXZaSFZzWlhOVWIwUnZiU2hzYVhOMExDQnZjSFJwYjI1ektUdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJSFZ3WkdGMFpTaHVaWGRNYVhOMEtTQjdYRzRnSUNBZ2JtVjNUR2x6ZENBOUlHNWxkMHhwYzNRZ2ZId2dXMTA3WEc1Y2JpQWdJQ0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRzVsZDB4cGMzUXBJQ0U5UFNBblcyOWlhbVZqZENCQmNuSmhlVjBuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWVhOMFNXUmxiblJwWm1sbGNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQnBaR1Z1ZEdsbWFXVnlJRDBnYkdGemRFbGtaVzUwYVdacFpYSnpXMmxkTzF4dUlDQWdJQ0FnZG1GeUlHbHVaR1Y0SUQwZ1oyVjBTVzVrWlhoQ2VVbGtaVzUwYVdacFpYSW9hV1JsYm5ScFptbGxjaWs3WEc0Z0lDQWdJQ0J6ZEhsc1pYTkpia1J2YlZ0cGJtUmxlRjB1Y21WbVpYSmxibU5sY3kwdE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnVaWGRNWVhOMFNXUmxiblJwWm1sbGNuTWdQU0J0YjJSMWJHVnpWRzlFYjIwb2JtVjNUR2x6ZEN3Z2IzQjBhVzl1Y3lrN1hHNWNiaUFnSUNCbWIzSWdLSFpoY2lCZmFTQTlJREE3SUY5cElEd2diR0Z6ZEVsa1pXNTBhV1pwWlhKekxteGxibWQwYURzZ1gya3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlGOXBaR1Z1ZEdsbWFXVnlJRDBnYkdGemRFbGtaVzUwYVdacFpYSnpXMTlwWFR0Y2JseHVJQ0FnSUNBZ2RtRnlJRjlwYm1SbGVDQTlJR2RsZEVsdVpHVjRRbmxKWkdWdWRHbG1hV1Z5S0Y5cFpHVnVkR2xtYVdWeUtUdGNibHh1SUNBZ0lDQWdhV1lnS0hOMGVXeGxjMGx1Ukc5dFcxOXBibVJsZUYwdWNtVm1aWEpsYm1ObGN5QTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnpkSGxzWlhOSmJrUnZiVnRmYVc1a1pYaGRMblZ3WkdGMFpYSW9LVHRjYmx4dUlDQWdJQ0FnSUNCemRIbHNaWE5KYmtSdmJTNXpjR3hwWTJVb1gybHVaR1Y0TENBeEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCc1lYTjBTV1JsYm5ScFptbGxjbk1nUFNCdVpYZE1ZWE4wU1dSbGJuUnBabWxsY25NN1hHNGdJSDA3WEc1OU95SXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVkbUZ5SUY5ZllYTnphV2R1SUQwZ0tIUm9hWE1nSmlZZ2RHaHBjeTVmWDJGemMybG5iaWtnZkh3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lGOWZZWE56YVdkdUlEMGdUMkpxWldOMExtRnpjMmxuYmlCOGZDQm1kVzVqZEdsdmJpaDBLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhNc0lHa2dQU0F4TENCdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU0E4SUc0N0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjeUE5SUdGeVozVnRaVzUwYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhBZ2FXNGdjeWtnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHpMQ0J3S1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFczQmRJRDBnYzF0d1hUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCZlgyRnpjMmxuYmk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1ZlR0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNiblpoY2lCUWNtVnpaVzUwWlhKZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDFCeVpYTmxiblJsY2k5UWNtVnpaVzUwWlhKY0lpazdYRzUyWVhJZ2MzUmhibVJoY21SUGNIUnBiMjV6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTlwYm5SbGNtWmhZMlZ6TDNOMFlXNWtZWEprVDNCMGFXOXVjMXdpS1R0Y2JuSmxjWFZwY21Vb1hDSXVMM05zYVdSbGNpNXpZM056WENJcE8xeHVLR1oxYm1OMGFXOXVJR2x1YVhSUWJIVm5hVzRvSkNrZ2UxeHVJQ0FnSUNRdVptNHVZMjlzYjNKVGJHbGtaWElnUFNCbWRXNWpkR2x2YmlCcGJtbDBLRzFsZEdodlpDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JXVjBhRzlrY3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWFYUTZJR1oxYm1OMGFXOXVJQ2drYzJ4cFpHVnlMQ0J3WVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IzQjBhVzl1Y3lBOUlDUXVaWGgwWlc1a0tIdDlMQ0J6ZEdGdVpHRnlaRTl3ZEdsdmJuTmZNUzV6ZEdGdVpHRnlaRTl3ZEdsdmJuTXNJSEJoY21GdGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSE5zYVdSbGNpNWtZWFJoS0Nkd2NtVnpaVzUwWlhJbkxDQnVaWGNnVUhKbGMyVnVkR1Z5WHpFdVVISmxjMlZ1ZEdWeUtHOXdkR2x2Ym5Nc0lDUnpiR2xrWlhJcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtjMnhwWkdWeUxtUmhkR0VvSjI5d2RHbHZibk1uTENCZlgyRnpjMmxuYmloZlgyRnpjMmxuYmloN2ZTd2diM0IwYVc5dWN5a3NJQ1J6Ykdsa1pYSXVaR0YwWVNnbmNISmxjMlZ1ZEdWeUp5a3VaMlYwVDNCMGFXOXVjeWdwS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNSemJHbGtaWEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhibWRsT2lCbWRXNWpkR2x2YmlBb0pITnNhV1JsY2l3Z2RtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlhNZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQWtjMnhwWkdWeUxtUmhkR0VvSjNCeVpYTmxiblJsY2ljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSE5zYVdSbGNpNWtZWFJoS0Nkd2NtVnpaVzUwWlhJbktTNXpaWFJQY0hScGIyNXpLSFpoYkhWbGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSemJHbGtaWEl1WkdGMFlTZ25jSEpsYzJWdWRHVnlKeWt1ZFhCRVlYUmhWbWxsZHlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwVm1Gc2RXVTZJR1oxYm1OMGFXOXVJQ2drYzJ4cFpHVnlMQ0JtZFc1aktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSE5zYVdSbGNpNWtZWFJoS0Nkd2NtVnpaVzUwWlhJbktTNWxiV2wwZEdWeUxuTjFZbk5qY21saVpTZ25ibVYzUkdGMFlTY3NJR1oxYm1NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdablZ1WXlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2MyeHBaR1Z5TG1SaGRHRW9KM0J5WlhObGJuUmxjaWNwTG1WdGFYUjBaWEl1YzNWaWMyTnlhV0psS0NkdVpYZEVZWFJoSnl3Z1puVnVZeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdFpYUm9iMlFnUFQwOUlDZHpkSEpwYm1jbklDWW1JQ2h0WlhSb2IyUWdQVDA5SUNkamFHRnVaMlVuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzFsZEdodlpITmJiV1YwYUc5a1hTNWpZV3hzS0hSb2FYTXNJSFJvYVhNc0lHRnlaM1Z0Wlc1MGMxc3hYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnRaWFJvYjJRZ1BUMDlJQ2R6ZEhKcGJtY25JQ1ltSUNodFpYUm9iMlFnUFQwOUlDZG5aWFJXWVd4MVpTY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWFJvYjJSelcyMWxkR2h2WkYwdVkyRnNiQ2gwYUdsekxDQjBhR2x6TENCaGNtZDFiV1Z1ZEhOYk1WMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JXVjBhRzlrSUQwOVBTQW5iMkpxWldOMEp5QjhmQ0FoYldWMGFHOWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXVjBhRzlrY3k1cGJtbDBLSFJvYVhNc0lHMWxkR2h2WkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVmU2hxVVhWbGNua3BLVHRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dWRtRnlJRjlmWVhOemFXZHVJRDBnS0hSb2FYTWdKaVlnZEdocGN5NWZYMkZ6YzJsbmJpa2dmSHdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUY5ZllYTnphV2R1SUQwZ1QySnFaV04wTG1GemMybG5iaUI4ZkNCbWRXNWpkR2x2YmloMEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSE1zSUdrZ1BTQXhMQ0J1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJRzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2N5QTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEFnYVc0Z2N5a2dhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoekxDQndLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwVzNCZElEMGdjMXR3WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2REdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUJmWDJGemMybG5iaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVmVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JtVjRjRzl5ZEhNdVVISmxjMlZ1ZEdWeUlEMGdkbTlwWkNBd08xeHVkbUZ5SUUxdlpHVnNYekVnUFNCeVpYRjFhWEpsS0Z3aUxpNHZUVzlrWld3dlRXOWtaV3hjSWlrN1hHNTJZWElnVm1sbGQxOHhJRDBnY21WeGRXbHlaU2hjSWk0dUwxWnBaWGN2Vm1sbGQxd2lLVHRjYm5aaGNpQkZkbVZ1ZEVWdGFYUjBaWEpmTVNBOUlISmxjWFZwY21Vb1hDSXVMaTlGZG1WdWRFVnRhWFIwWlhJdlJYWmxiblJGYldsMGRHVnlYQ0lwTzF4dWRtRnlJSE4wWVc1a1lYSmtUM0IwYVc5dWMxOHhJRDBnY21WeGRXbHlaU2hjSWk0dUwybHVkR1Z5Wm1GalpYTXZjM1JoYm1SaGNtUlBjSFJwYjI1elhDSXBPMXh1ZG1GeUlGQnlaWE5sYm5SbGNpQTlJQzhxS2lCQVkyeGhjM01nS2k4Z0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQlFjbVZ6Wlc1MFpYSW9iM0IwYVc5dWN5d2daV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUjBaWElnUFNCdVpYY2dSWFpsYm5SRmJXbDBkR1Z5WHpFdVJYWmxiblJGYldsMGRHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViVzlrWld3Z1BTQjBhR2x6TG1OeVpXRjBaVTF2WkdWc0tHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpYY2dQU0IwYUdsekxtTnlaV0YwWlZacFpYY29kR2hwY3k1dGIyUmxiQzV6ZEdGMFpTd2daV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVltbHVaRk4xWW5OamNtbGlaU2dwTzF4dUlDQWdJSDFjYmlBZ0lDQlFjbVZ6Wlc1MFpYSXVjSEp2ZEc5MGVYQmxMblZ3UkdGMFlWWnBaWGNnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGxkeTUxY0VSaGRHRlRiR2xrWlhJb0tUdGNiaUFnSUNCOU8xeHVJQ0FnSUZCeVpYTmxiblJsY2k1d2NtOTBiM1I1Y0dVdWMyVjBUM0IwYVc5dWN5QTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGRQY0hScGIyNXpJRDBnWDE5aGMzTnBaMjRvWDE5aGMzTnBaMjRvZTMwc0lITjBZVzVrWVhKa1QzQjBhVzl1YzE4eExuTjBZVzVrWVhKa1QzQjBhVzl1Y3lrc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xdlpHVnNMbk5sZEVSaGRHRW9ibVYzVDNCMGFXOXVjeWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQlFjbVZ6Wlc1MFpYSXVjSEp2ZEc5MGVYQmxMbWRsZEU5d2RHbHZibk1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xdlpHVnNMbk4wWVhSbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVUhKbGMyVnVkR1Z5TG5CeWIzUnZkSGx3WlM1amNtVmhkR1ZOYjJSbGJDQTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXOWtaV3hmTVM1TmIyUmxiQ2h2Y0hScGIyNXpLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnlaWE5sYm5SbGNpNXdjbTkwYjNSNWNHVXVZM0psWVhSbFZtbGxkeUE5SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6TENCbGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWbWxsZDE4eExsWnBaWGNvYjNCMGFXOXVjeXdnWld4bGJXVnVkQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQlFjbVZ6Wlc1MFpYSXVjSEp2ZEc5MGVYQmxMbUpwYm1SVGRXSnpZM0pwWW1VZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMlYwVG1WM1JHRjBZU0E5SUhSb2FYTXVaMlYwVG1WM1JHRjBZUzVpYVc1a0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYm1ST1pYZFFiM05wZEdsdmJpQTlJSFJvYVhNdWMyVnVaRTVsZDFCdmMybDBhVzl1TG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVdSa1UzVmljMk55YVdKMGFXOXVjeWdwTzF4dUlDQWdJSDA3WEc0Z0lDQWdVSEpsYzJWdWRHVnlMbkJ5YjNSdmRIbHdaUzVoWkdSVGRXSnpZM0pwWW5ScGIyNXpJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xdlpHVnNMbVZ0YVhSMFpYSXVjM1ZpYzJOeWFXSmxLQ2R1WlhkRVlYUmhKeXdnZEdocGN5NW5aWFJPWlhkRVlYUmhLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJhV1YzTG1WdGFYUjBaWEl1YzNWaWMyTnlhV0psS0NkdVpYZFFiM05wZEdsdmJpY3NJSFJvYVhNdWMyVnVaRTVsZDFCdmMybDBhVzl1S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRkJ5WlhObGJuUmxjaTV3Y205MGIzUjVjR1V1WjJWMFRtVjNSR0YwWVNBOUlHWjFibU4wYVc5dUlDaHVaWGRFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGxkeTUxY0VSaGRHRW9ibVYzUkdGMFlTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkSFJsY2k1bGJXbDBLQ2R1WlhkRVlYUmhKeXdnYm1WM1JHRjBZU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQlFjbVZ6Wlc1MFpYSXVjSEp2ZEc5MGVYQmxMbk5sYm1ST1pYZFFiM05wZEdsdmJpQTlJR1oxYm1OMGFXOXVJQ2h1WlhkUWIzTnBkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYlc5a1pXeFRkR0YwWlNBOUlIUm9hWE11Ylc5a1pXd3VjM1JoZEdVN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkRVlYUmhJRDBnWDE5aGMzTnBaMjRvWDE5aGMzTnBaMjRvZTMwc0lHMXZaR1ZzVTNSaGRHVXBMQ0J1WlhkUWIzTnBkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5a1pXd3VjMlYwUkdGMFlTaHVaWGRFWVhSaEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUJRY21WelpXNTBaWEk3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVRY21WelpXNTBaWElnUFNCUWNtVnpaVzUwWlhJN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiblpoY2lCZlgyRnpjMmxuYmlBOUlDaDBhR2x6SUNZbUlIUm9hWE11WDE5aGMzTnBaMjRwSUh4OElHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmZYMkZ6YzJsbmJpQTlJRTlpYW1WamRDNWhjM05wWjI0Z2ZId2dablZ1WTNScGIyNG9kQ2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCekxDQnBJRDBnTVN3Z2JpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tnUENCdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE1nUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCd0lHbHVJSE1wSUdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29jeXdnY0NrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RGdHdYU0E5SUhOYmNGMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1gxOWhjM05wWjI0dVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYm4wN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzVsZUhCdmNuUnpMazF2WkdWc0lEMGdkbTlwWkNBd08xeHVkbUZ5SUVWMlpXNTBSVzFwZEhSbGNsOHhJRDBnY21WeGRXbHlaU2hjSWk0dUwwVjJaVzUwUlcxcGRIUmxjaTlGZG1WdWRFVnRhWFIwWlhKY0lpazdYRzUyWVhJZ1RXOWtaV3dnUFNBdktpb2dRR05zWVhOeklDb3ZJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVFc5a1pXd29iM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFIwWlhJZ1BTQnVaWGNnUlhabGJuUkZiV2wwZEdWeVh6RXVSWFpsYm5SRmJXbDBkR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVWdQU0IwYUdsekxtbHVhWFFvYjNCMGFXOXVjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lFMXZaR1ZzTG5CeWIzUnZkSGx3WlM1elpYUkVZWFJoSUQwZ1puVnVZM1JwYjI0Z0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhaaGJHbGtZWFJsUm5KdmJWUnZJRDBnZEdocGN5NTJZV3hwWkdGMFpVWnliMjFVYnlodmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkdsa1lYUmxUV2x1VFdGNFUzUmxjQ0E5SUhSb2FYTXVkbUZzYVdSaGRHVk5hVzVOWVhoVGRHVndLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsSUQwZ1gxOWhjM05wWjI0b1gxOWhjM05wWjI0b1gxOWhjM05wWjI0b2UzMHNJRzl3ZEdsdmJuTXBMQ0IyWVd4cFpHRjBaVVp5YjIxVWJ5a3NJSFpoYkdsa1lYUmxUV2x1VFdGNFUzUmxjQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEhSbGNpNWxiV2wwS0NkdVpYZEVZWFJoSnl3Z2RHaHBjeTV6ZEdGMFpTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCTmIyUmxiQzV3Y205MGIzUjVjR1V1YVc1cGRDQTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwUkdGMFlTaHZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSaGRHVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCTmIyUmxiQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZOYVc1TllYaFRkR1Z3SUQwZ1puVnVZM1JwYjI0Z0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUcxcGJpQTlJRzl3ZEdsdmJuTXViV2x1TENCdFlYZ2dQU0J2Y0hScGIyNXpMbTFoZUN3Z2MzUmxjQ0E5SUc5d2RHbHZibk11YzNSbGNEdGNiaUFnSUNBZ0lDQWdhV1lnS0hOMFpYQWdQQ0F4S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXpkR1Z3SUQwZ01UdGNiaUFnSUNBZ0lDQWdkbUZ5SUcxaGVGTjBaWEFnUFNCTllYUm9MbUZpY3lodFlYZ3BJQzhnTWp0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE4wWlhBZ1BpQnRZWGhUZEdWd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTV6ZEdWd0lEMGdiV0Y0VTNSbGNEdGNiaUFnSUNBZ0lDQWdhV1lnS0cxaGVDQThQU0J0YVc0Z0ppWWdiV0Y0SUR3Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1dGFXNGdQU0J0YVc0Z0xTQnpkR1Z3TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h0YVc0Z1BqMGdiV0Y0SUNZbUlHMWhlQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11YldsdUlEMGdiV2x1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXRZWGdnUFNCdGFXNGdLeUJ6ZEdWd08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNodFlYZ2dQQ0F3SUNZbUlHMWhlQ0E4SUcxcGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1dFlYZ2dQU0J0YVc0Z0t5QnpkR1Z3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXRhVzRnUFNCdGFXNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzl3ZEdsdmJuTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCTmIyUmxiQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZHY205dFZHOGdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdabkp2YlNBOUlHOXdkR2x2Ym5NdVpuSnZiU3dnZEc4Z1BTQnZjSFJwYjI1ekxuUnZMQ0J0WVhnZ1BTQnZjSFJwYjI1ekxtMWhlQ3dnYldsdUlEMGdiM0IwYVc5dWN5NXRhVzRzSUhSNWNHVWdQU0J2Y0hScGIyNXpMblI1Y0dVc0lITjBaWEFnUFNCdmNIUnBiMjV6TG5OMFpYQTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5UFNBbmMybHVaMnhsSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTUwYnlBOUlHMWhlRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9iV2x1SUQ0Z1puSnZiU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVpuSnZiU0E5SUcxcGJqdGNiaUFnSUNBZ0lDQWdhV1lnS0hSdklENGdiV0Y0S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NTBieUE5SUcxaGVEdGNiaUFnSUNBZ0lDQWdhV1lnS0cxaGVDQThJREFnSmlZZ2JXbHVJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG1aeWIyMGdQU0J0YVc0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMblJ2SUQwZ2JXbHVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQW5aRzkxWW14bEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1p5YjIwZ1BqMGdkRzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG1aeWIyMGdQU0IwYnlBdElITjBaWEE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUnZJRHc5SUcxcGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1MGJ5QTlJRzFwYmlBcklITjBaWEE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtWnliMjBnUFNCdGFXNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnliMjBnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iV2x1SUR3Z01DQW1KaUJ0WVhnZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVtY205dElEMGdiV2x1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHRZWGdnUENCdGFXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWRHOGdQU0J0YVc0Z0t5QnpkR1Z3TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmNIUnBiMjV6TzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFMXZaR1ZzTzF4dWZTZ3BLVHRjYm1WNGNHOXlkSE11VFc5a1pXd2dQU0JOYjJSbGJEdGNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1ZG1GeUlGOWZZWE56YVdkdUlEMGdLSFJvYVhNZ0ppWWdkR2hwY3k1ZlgyRnpjMmxuYmlrZ2ZId2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJRjlmWVhOemFXZHVJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpQjhmQ0JtZFc1amRHbHZiaWgwS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlITXNJR2tnUFNBeExDQnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNBOElHNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY3lBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnY3lrZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h6TENCd0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBXM0JkSUQwZ2MxdHdYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZER0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQmZYMkZ6YzJsbmJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dWZUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm1WNGNHOXlkSE11Vm1sbGR5QTlJSFp2YVdRZ01EdGNiblpoY2lCRmRtVnVkRVZ0YVhSMFpYSmZNU0E5SUhKbGNYVnBjbVVvWENJdUxpOUZkbVZ1ZEVWdGFYUjBaWEl2UlhabGJuUkZiV2wwZEdWeVhDSXBPMXh1ZG1GeUlGSnZiR3hsY25OZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDFKdmJHeGxjbk12VW05c2JHVnljMXdpS1R0Y2JuWmhjaUJVY21GamExOHhJRDBnY21WeGRXbHlaU2hjSWk0dlZISmhZMnN2VkhKaFkydGNJaWs3WEc1MllYSWdVMk5oYkdWZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDFOallXeGxMMU5qWVd4bFhDSXBPMXh1ZG1GeUlFSmhjbDh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZRbUZ5TDBKaGNsd2lLVHRjYm5aaGNpQldhV1YzSUQwZ0x5b3FJRUJqYkdGemN5QXFMeUFvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUZacFpYY29iM0IwYVc5dWN5d2daV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFIwWlhJZ1BTQnVaWGNnUlhabGJuUkZiV2wwZEdWeVh6RXVSWFpsYm5SRmJXbDBkR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkQ0E5SUdWc1pXMWxiblE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMnhwWkdWeUlEMGdkR2hwY3k1amNtVmhkR1ZUYkdsa1pYSW9iM0IwYVc5dWN5d2daV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUmhkR1VnUFNCMGFHbHpMbWx1YVhRb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y205c2JHVnljeUE5SUhSb2FYTXVZM0psWVhSbFVtOXNiR1Z5Y3loMGFHbHpMbk4wWVhSbEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aVlYSWdQU0IwYUdsekxtTnlaV0YwWlVKaGNpaDBhR2x6TG5OMFlYUmxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBjbUZqYXlBOUlIUm9hWE11WTNKbFlYUmxWSEpoWTJzb2RHaHBjeTV6ZEdGMFpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyTmhiR1VnUFNCMGFHbHpMbU55WldGMFpWTmpZV3hsS0hSb2FYTXVjM1JoZEdVcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1JHRjBZU2gwYUdsekxuTjBZWFJsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVpYVc1a1JYWmxiblJNYVhOMFpXNWxjbk1vS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnS2lEUW9OQ3cwWUhSaU5DNDBZRFJqOUdPSUU5d2RHbHZibk1nMExUUXZpQldhV1YzVTNSaGRHVmNiaUFnSUNCV2FXVjNMbkJ5YjNSdmRIbHdaUzVwYm1sMElEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITnBlbVVnUFNCMGFHbHpMbWRsZEZOc2FXUmxjbE5wZW1Vb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2Ym1WVGRHVndJRDBnZEdocGN5NW5aWFJQYm1WVGRHVndLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MyeHBaR1Z5SUQwZ2RHaHBjeTV6Ykdsa1pYSTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZYMkZ6YzJsbmJpaGZYMkZ6YzJsbmJpaDdmU3dnYjNCMGFXOXVjeWtzSUhzZ2MybDZaVG9nYzJsNlpTd2diMjVsVTNSbGNEb2diMjVsVTNSbGNDd2djMnhwWkdWeU9pQnpiR2xrWlhJZ2ZTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCV2FXVjNMbkJ5YjNSdmRIbHdaUzVqY21WaGRHVlRiR2xrWlhJZ1BTQm1kVzVqZEdsdmJpQW9iM0IwYVc5dWN5d2daV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2IzSnBaVzUwWVhScGIyNGdQU0J2Y0hScGIyNXpMbTl5YVdWdWRHRjBhVzl1TzF4dUlDQWdJQ0FnSUNCMllYSWdjMnhwWkdWeUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lDQWdJQ0FnSUhOc2FXUmxjaTVqYkdGemMwNWhiV1VnUFNCY0luTnNhV1JsY2lCemJHbGtaWEpmWENJZ0t5QnZjbWxsYm5SaGRHbHZianRjYmlBZ0lDQWdJQ0FnWld4bGJXVnVkQzVoY0hCbGJtUW9jMnhwWkdWeUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITnNhV1JsY2p0Y2JpQWdJQ0I5TzF4dUlDQWdJRlpwWlhjdWNISnZkRzkwZVhCbExtTnlaV0YwWlZSeVlXTnJJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlVjbUZqYTE4eExsUnlZV05yS0c5d2RHbHZibk1wTzF4dUlDQWdJSDA3WEc0Z0lDQWdWbWxsZHk1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsUW1GeUlEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCQ1lYSmZNUzVDWVhJb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JXYVdWM0xuQnliM1J2ZEhsd1pTNWpjbVZoZEdWU2IyeHNaWEp6SUQwZ1puVnVZM1JwYjI0Z0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJTYjJ4c1pYSnpYekV1VW05c2JHVnljeWh2Y0hScGIyNXpLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGWnBaWGN1Y0hKdmRHOTBlWEJsTG1OeVpXRjBaVk5qWVd4bElEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVFkyRnNaVjh4TGxOallXeGxLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2cwSjdRc2RDOTBMN1FzdEM3MFkvUmppRFJnZEdDMEw3UmdkR0MwTDdSajlDOTBMalF0U0JXYVdWM1hHNGdJQ0FnSUNvZzBKN1FzZEM5MEw3UXN0QzcwWS9SamlEUmdkQyswWUhSZ3RDKzBZL1F2ZEM0MExVZzBMTFJnZEMxMFlVZzBML1F2dEMwMExMUXVOQzAwTDdRc2x4dUlDQWdJQ29xTDF4dUlDQWdJRlpwWlhjdWNISnZkRzkwZVhCbExuVndSR0YwWVNBOUlHWjFibU4wYVc5dUlDaHVaWGRUZEdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RYQmtZWFJoVTNSaGRHVWdQU0JmWDJGemMybG5iaWhmWDJGemMybG5iaWg3ZlN3Z2RHaHBjeTV6ZEdGMFpTa3NJRzVsZDFOMFlYUmxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMnhzWlhKekxuVndSR0YwWVNoMWNHUmhkR0ZUZEdGMFpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVltRnlMblZ3UkdGMFlTaDFjR1JoZEdGVGRHRjBaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMk5oYkdVdWRYQkVZWFJoS0hWd1pHRjBZVk4wWVhSbEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGNtRmpheTUxY0VSaGRHRW9kWEJrWVhSaFUzUmhkR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbElEMGdYMTloYzNOcFoyNG9lMzBzSUhWd1pHRjBZVk4wWVhSbEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUM4dklOQ2MwTFhSZ3RDKzBMUWcwTC9RdGRHQTBMWFJnZEN4MEw3UmdOQzYwTGdnMFlIUXU5Q3cwTG5RdE5DMTBZRFFzQ3dnMExqUXZDRFJnOUMvMFlEUXNOQ3kwTHZSajlDMTBZSWcwSi9SZ05DMTBMZlF0ZEM5MFlMUXRkR0FYRzRnSUNBZ1ZtbGxkeTV3Y205MGIzUjVjR1V1ZFhCRVlYUmhVMnhwWkdWeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5zYVdSbGNpNXlaVzF2ZG1Vb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emJHbGtaWElnUFNCMGFHbHpMbU55WldGMFpWTnNhV1JsY2loMGFHbHpMbk4wWVhSbExDQjBhR2x6TG1Wc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbElEMGdkR2hwY3k1cGJtbDBLSFJvYVhNdWMzUmhkR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2Ykd4bGNuTWdQU0IwYUdsekxtTnlaV0YwWlZKdmJHeGxjbk1vZEdocGN5NXpkR0YwWlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJHVWdQU0IwYUdsekxtTnlaV0YwWlZOallXeGxLSFJvYVhNdWMzUmhkR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ5WVdOcklEMGdkR2hwY3k1amNtVmhkR1ZVY21GamF5aDBhR2x6TG5OMFlYUmxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWlZWElnUFNCMGFHbHpMbU55WldGMFpVSmhjaWgwYUdsekxuTjBZWFJsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0VSaGRHRW9kR2hwY3k1emRHRjBaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZbWx1WkVWMlpXNTBUR2x6ZEdWdVpYSnpLQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQldhV1YzTG5CeWIzUnZkSGx3WlM1blpYUlBibVZUZEdWd0lEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXBiaUE5SUc5d2RHbHZibk11YldsdUxDQnRZWGdnUFNCdmNIUnBiMjV6TG0xaGVDd2djM1JsY0NBOUlHOXdkR2x2Ym5NdWMzUmxjRHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlFMWhkR2d1WTJWcGJDZ29iV0Y0SUMwZ2JXbHVLU0F2SUhOMFpYQXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUlRiR2xrWlhKVGFYcGxLRzl3ZEdsdmJuTXBJQzhnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1ZtbGxkeTV3Y205MGIzUjVjR1V1WW1sdVpFVjJaVzUwVEdsemRHVnVaWEp6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVWSEpoWTJ0RGJHbGpheUE5SUhSb2FYTXViMjVVY21GamEwTnNhV05yTG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1VFkyRnNaVU5zYVdOcklEMGdkR2hwY3k1dmJsTmpZV3hsUTJ4cFkyc3VZbWx1WkNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeWN5Z3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ1ZtbGxkeTV3Y205MGIzUjVjR1V1WVdSa1JYWmxiblJNYVhOMFpXNWxjbk1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaWFXNWtUVzkxYzJWRWIzZHVJRDBnZEdocGN5NWtjbUZuVTNSaGNuUXVZbWx1WkNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpiR2xrWlhJdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmRHOTFZMmh6ZEdGeWRDY3NJR0pwYm1STmIzVnpaVVJ2ZDI0cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Oc2FXUmxjaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R0YjNWelpXUnZkMjRuTENCaWFXNWtUVzkxYzJWRWIzZHVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpiR2xrWlhJdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCMGFHbHpMbTl1VkhKaFkydERiR2xqYXlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJ4cFpHVnlMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM05qWVd4bFkyeHBZMnNuTENCMGFHbHpMbTl1VTJOaGJHVkRiR2xqYXlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JXYVdWM0xuQnliM1J2ZEhsd1pTNWtjbUZuVTNSaGNuUWdQU0JtZFc1amRHbHZiaUFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUmhjbWRsZENBOUlHVjJaVzUwTG5SaGNtZGxkRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WjJWMFZHRnlaMlYwVkhsd1pTaDBZWEpuWlhRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaSEpoWjE4eElEMGdkR2hwY3k1a2NtRm5MbUpwYm1Rb2RHaHBjeXdnZEdGeVoyVjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJvWVc1a2JHVlZjRjh4SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxiVzkyWlNjc0lHUnlZV2RmTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vYlc5MlpTY3NJR1J5WVdkZk1TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduYlc5MWMyVjFjQ2NzSUdoaGJtUnNaVlZ3WHpFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUdWdVpDY3NJR2hoYm1Sc1pWVndYekVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sYlc5MlpTY3NJR1J5WVdkZk1TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaHRiM1psSnl3Z1pISmhaMTh4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObGRYQW5MQ0JvWVc1a2JHVlZjRjh4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUdWdVpDY3NJR2hoYm1Sc1pWVndYekVwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JXYVdWM0xuQnliM1J2ZEhsd1pTNWtjbUZuSUQwZ1puVnVZM1JwYjI0Z0tIUmhjbWRsZEN3Z1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzl5YVdWdWRHRjBhVzl1SUQwZ2RHaHBjeTV6ZEdGMFpTNXZjbWxsYm5SaGRHbHZianRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXZkWE5sVm1Gc2RXVWdQU0F3TzF4dUlDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTOXliMnhzWlhJdkxuUmxjM1FvZEdGeVoyVjBMbU5zWVhOelRtRnRaU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2Y21sbGJuUmhkR2x2YmlBOVBUMGdKMmh2Y21sNmIyNTBZV3duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblF1ZEhsd1pTQTlQVDBnSjNSdmRXTm9iVzkyWlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlZaaGJIVmxJRDBnZEdocGN5NWpiMjUyWlhKMFVIaFViMVpoYkhWbEtHVjJaVzUwTG5SdmRXTm9aWE5iTUYwdVkyeHBaVzUwV0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVlpoYkhWbElEMGdkR2hwY3k1amIyNTJaWEowVUhoVWIxWmhiSFZsS0dWMlpXNTBMbU5zYVdWdWRGZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1YyWlc1MExuUjVjR1VnUFQwOUlDZDBiM1ZqYUcxdmRtVW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlZaaGJIVmxJRDBnZEdocGN5NWpiMjUyWlhKMFVIaFViMVpoYkhWbEtHVjJaVzUwTG5SdmRXTm9aWE5iTUYwdVkyeHBaVzUwV1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpWWmhiSFZsSUQwZ2RHaHBjeTVqYjI1MlpYSjBVSGhVYjFaaGJIVmxLR1YyWlc1MExtTnNhV1Z1ZEZrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVUc5emFYUnBiMjRvYlc5MWMyVldZV3gxWlN3Z2RHRnlaMlYwS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRlpwWlhjdWNISnZkRzkwZVhCbExtZGxkRlJoY21kbGRGUjVjR1VnUFNCbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjJ4c1pYSnpJRDBnZEdocGN5NXpiR2xrWlhJdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnbkxuTnNhV1JsY2w5ZmNtOXNiR1Z5SnlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5YjJ4c1pYSnpXekJkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtOXNiR1Z5YzFzd1hTNWpiMjUwWVdsdWN5aDBZWEpuWlhRcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBblpuSnZiU2M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSEp2Ykd4bGNuTmJNVjB1WTI5dWRHRnBibk1vZEdGeVoyVjBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDZDBieWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNkMWJtUmxabWx1WldRbk8xeHVJQ0FnSUgwN1hHNGdJQ0FnVm1sbGR5NXdjbTkwYjNSNWNHVXViMjVUWTJGc1pVTnNhV05ySUQwZ1puVnVZM1JwYjI0Z0tHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJR1YyWlc1MExtUmxkR0ZwYkM1MllXeDFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWUWIzTnBkR2x2YmloMllXeDFaU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQldhV1YzTG5CeWIzUnZkSGx3WlM1dmJsUnlZV05yUTJ4cFkyc2dQU0JtZFc1amRHbHZiaUFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOXlhV1Z1ZEdGMGFXOXVJRDBnZEdocGN5NXpkR0YwWlM1dmNtbGxiblJoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSaGNtZGxkQ0E5SUdWMlpXNTBMblJoY21kbGREdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOdmIzSmthVzVoZEdVZ1BTQXdPMXh1SUNBZ0lDQWdJQ0JwWmlBb0wzTmpZV3hsTHk1MFpYTjBLSFJoY21kbGRDNWpiR0Z6YzA1aGJXVXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCcFppQW9iM0pwWlc1MFlYUnBiMjRnUFQwOUlDZG9iM0pwZW05dWRHRnNKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl2Y21ScGJtRjBaU0E5SUdWMlpXNTBMbU5zYVdWdWRGZzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaR2x1WVhSbElEMGdaWFpsYm5RdVkyeHBaVzUwV1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0IwYUdsekxtTnZiblpsY25SUWVGUnZWbUZzZFdVb1kyOXZjbVJwYm1GMFpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVUc5emFYUnBiMjRvZG1Gc2RXVXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1ZtbGxkeTV3Y205MGIzUjVjR1V1ZFhCa1lYUmxVRzl6YVhScGIyNGdQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJSFJoY21kbGRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gyRWdQU0IwYUdsekxuTjBZWFJsTENCbWNtOXRJRDBnWDJFdVpuSnZiU3dnZEc4Z1BTQmZZUzUwYnl3Z2RIbHdaU0E5SUY5aExuUjVjR1VzSUhOMFpYQWdQU0JmWVM1emRHVndPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiblpsY25SV1lXeDFaVlJ2UTI5c2IzSW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjJZWElnWm5KdmJVUnBjM1JoYm1ObElEMGdUV0YwYUM1aFluTW9abkp2YlNBdElIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJ2UkdsemRHRnVZMlVnUFNCTllYUm9MbUZpY3loMGJ5QXRJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdselUybHVaMnhsSUQwZ2RIbHdaU0E5UFQwZ0ozTnBibWRzWlNjN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzFOcGJtZHNaU0FtSmlCbWNtOXRSR2x6ZEdGdVkyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRIUmxjaTVsYldsMEtDZHVaWGRRYjNOcGRHbHZiaWNzSUhzZ1puSnZiVG9nZG1Gc2RXVWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NGMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGMwWnliMjBnUFNBb1puSnZiVVJwYzNSaGJtTmxJRHdnZEc5RWFYTjBZVzVqWlNrZ1B5QW5abkp2YlNjZ09pQW5kRzhuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselJuSnZiU0E5UFQwZ0oyWnliMjBuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMGRHVnlMbVZ0YVhRb0oyNWxkMUJ2YzJsMGFXOXVKeXdnZXlCbWNtOXRPaUIyWVd4MVpTQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkSFJsY2k1bGJXbDBLQ2R1WlhkUWIzTnBkR2x2Ymljc0lIc2dkRzg2SUhaaGJIVmxJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJoY21kbGRITWdQU0IwYUdsekxtZGxkRlJoY21kbGRGUjVjR1VvZEdGeVoyVjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWVhKblpYUnpJRDA5UFNBblpuSnZiU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ1BpQjBieUF0SUhOMFpYQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnWm5KdmJUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUjBaWEl1WlcxcGRDZ25ibVYzVUc5emFYUnBiMjRuTENCN0lHWnliMjA2SUhaaGJIVmxJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUR3Z1puSnZiU0FySUhOMFpYQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnZEc4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMGRHVnlMbVZ0YVhRb0oyNWxkMUJ2YzJsMGFXOXVKeXdnZXlCMGJ6b2dkbUZzZFdVZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUZacFpYY3VjSEp2ZEc5MGVYQmxMbU52Ym5abGNuUlFlRlJ2Vm1Gc2RXVWdQU0JtZFc1amRHbHZiaUFvWTI5dmNtUnBibUYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDJFZ1BTQjBhR2x6TG5OMFlYUmxMQ0J0YVc0Z1BTQmZZUzV0YVc0c0lHMWhlQ0E5SUY5aExtMWhlQ3dnYzNSbGNDQTlJRjloTG5OMFpYQXNJRzl1WlZOMFpYQWdQU0JmWVM1dmJtVlRkR1Z3TENCemFYcGxJRDBnWDJFdWMybDZaU3dnYjNKcFpXNTBZWFJwYjI0Z1BTQmZZUzV2Y21sbGJuUmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5zYVdSbGNsQnZjeUE5SUhSb2FYTXVaMlYwVTJ4cFpHVnlVRzl6YVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITnNhV1JsY2tWdVpGQnZjeUE5SUhOc2FXUmxjbEJ2Y3lBcklITnBlbVU3WEc0Z0lDQWdJQ0FnSUhaaGNpQndlQ0E5SURBN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2Y21sbGJuUmhkR2x2YmlBOVBUMGdKMmh2Y21sNmIyNTBZV3duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3ZUNBOUlHTnZiM0prYVc1aGRHVWdMU0J6Ykdsa1pYSlFiM003WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndlQ0E5SUhOc2FXUmxja1Z1WkZCdmN5QXRJR052YjNKa2FXNWhkR1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSEI0SUQ0Z2MybDZaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdFlYZzdYRzRnSUNBZ0lDQWdJR2xtSUNod2VDQThJREFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXbHVPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCTllYUm9Mbkp2ZFc1a0tIQjRJQzhnYjI1bFUzUmxjQ2tnS2lCemRHVndJQ3NnYldsdU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaURRa3RHTDBZZlF0ZEdCMEx2Umo5QzEwTHdnMEwzUXZ0Q3kwWXZRdVNEUmh0Q3kwTFhSZ2lEUXNpRFF0OUN3MExMUXVOR0IwTGpRdk5DKzBZSFJndEM0SU5DKzBZSWcwTC9RdnRDNzBMN1F0dEMxMEwzUXVOR1BJTkN4MExYUXM5R0QwTDNRdXRDKzBMSmNiaUFnSUNBZ0tpRFFuOUMxMFlEUXRkQ3kwTDdRdE5DNDBMd2dkbUZzZFdVZzBMSWdNVFl0MFlEUXVOR0gwTDNSaTlDNUlOR0UwTDdSZ05DODBMRFJnbHh1SUNBZ0lDb3FMMXh1SUNBZ0lGWnBaWGN1Y0hKdmRHOTBlWEJsTG1OdmJuWmxjblJXWVd4MVpWUnZRMjlzYjNJZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5aElEMGdkR2hwY3k1emRHRjBaU3dnWTI5c2IzSWdQU0JmWVM1amIyeHZjaXdnWjNKaFpHbGxiblFnUFNCZllTNW5jbUZrYVdWdWREdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5aUlEMGdkR2hwY3k1emRHRjBaU3dnYldGNElEMGdYMkl1YldGNExDQnBjME52Ykc5eUlEMGdYMkl1YVhORGIyeHZjaXdnWTJoaGJtZGxRMjlzYjNJZ1BTQmZZaTVqYUdGdVoyVkRiMnh2Y2p0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkNBOUlIWmhiSFZsSUM4Z2JXRjRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkRiMnh2Y2lBOVBUMGdkSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQmhiR2wwY21FZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2R5VUdGc2FYUnlZU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyaGhibWRsUTI5c2IzSWdQVDA5SUdaaGJITmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGc2FYUnlZU0E5SUUxaGRHZ3VjbTkxYm1Rb2RtRnNJQ29nTWpVMUlDb2dNalUxSUNvZ01qVTFLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuY2xCaGJHbDBjbUVnUFNCTllYUm9Mbkp2ZFc1a0tIWmhiQ0FxSURJMU5TQXFJREkxTkNBcUlESTFOQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVd4cGRISmhJRDBnVFdGMGFDNXliM1Z1WkNoMllXd2dLaUF5TlRZZ0tpQXlOVFlnS2lBeU5UVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2R5VUdGc2FYUnlZU0E5SUUxaGRHZ3VjbTkxYm1Rb2RtRnNJQ29nTWpVMElDb2dNalUwSUNvZ01qVTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiM0p5WldOMFIzSmhaR2xsYm5RZ1BTQk5ZWFJvTG1GaWN5aG5jbEJoYkdsMGNtRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR052Y25KbFkzUWdQU0JOWVhSb0xtRmljeWh3WVd4cGRISmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WlhSRGIyeHZjaUE5SUdOdmNuSmxZM1F1ZEc5VGRISnBibWNvTVRZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmxkRWR5WVdScFpXNTBJRDBnWTI5eWNtVmpkRWR5WVdScFpXNTBMblJ2VTNSeWFXNW5LREUyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eUlEMGdYQ0lqWENJZ0t5QnpaWFJEYjJ4dmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkeVlXUnBaVzUwSUQwZ1hDSWpYQ0lnS3lCelpYUkhjbUZrYVdWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEhSbGNpNWxiV2wwS0NkdVpYZFFiM05wZEdsdmJpY3NJSHNnWTI5c2IzSTZJR052Ykc5eUlIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMGRHVnlMbVZ0YVhRb0oyNWxkMUJ2YzJsMGFXOXVKeXdnZXlCbmNtRmthV1Z1ZERvZ1ozSmhaR2xsYm5RZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lGWnBaWGN1Y0hKdmRHOTBlWEJsTG1kbGRGTnNhV1JsY2xCdmMybDBhVzl1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gyRWdQU0IwYUdsekxuTjBZWFJsTENCdmNtbGxiblJoZEdsdmJpQTlJRjloTG05eWFXVnVkR0YwYVc5dUxDQnpiR2xrWlhJZ1BTQmZZUzV6Ykdsa1pYSTdYRzRnSUNBZ0lDQWdJSFpoY2lCd2IzTnBkR2x2YmlBOUlEQTdYRzRnSUNBZ0lDQWdJR2xtSUNodmNtbGxiblJoZEdsdmJpQTlQVDBnSjJodmNtbDZiMjUwWVd3bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlITnNhV1JsY2k1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LUzVzWldaME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjRnUFNCemJHbGtaWEl1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDa3VkRzl3TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd2IzTnBkR2x2Ymp0Y2JpQWdJQ0I5TzF4dUlDQWdJRlpwWlhjdWNISnZkRzkwZVhCbExtZGxkRk5zYVdSbGNsTnBlbVVnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYjNKcFpXNTBZWFJwYjI0Z1BTQnZjSFJwYjI1ekxtOXlhV1Z1ZEdGMGFXOXVPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MybDZaU0E5SURBN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2Y21sbGJuUmhkR2x2YmlBOVBUMGdKMmh2Y21sNmIyNTBZV3duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbElEMGdkR2hwY3k1emJHbGtaWEl1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDa3VkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbElEMGdkR2hwY3k1emJHbGtaWEl1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDa3VhR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnphWHBsTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlGWnBaWGM3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVXYVdWM0lEMGdWbWxsZHp0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVTYjJ4c1pYSnpJRDBnZG05cFpDQXdPMXh1ZG1GeUlGSnZiR3hsY25NZ1BTQXZLaW9nUUdOc1lYTnpJQ292SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1VtOXNiR1Z5Y3lodmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMWNiaUFnSUNCU2IyeHNaWEp6TG5CeWIzUnZkSGx3WlM1amNtVmhkR1VnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzJ4cFpHVnlJRDBnYjNCMGFXOXVjeTV6Ykdsa1pYSXNJRzl5YVdWdWRHRjBhVzl1SUQwZ2IzQjBhVzl1Y3k1dmNtbGxiblJoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKdmJHeGxja1pwY25OMElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lDQWdJQ0FnSUhKdmJHeGxja1pwY25OMExtTnNZWE56VG1GdFpTQTlJRndpYzJ4cFpHVnlYMTl5YjJ4c1pYSWdjMnhwWkdWeVgxOXliMnhzWlhKZlptbHljM1FnYzJ4cFpHVnlYMTl5YjJ4c1pYSmZYQ0lnS3lCdmNtbGxiblJoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKdmJHeGxjbE5sWTI5dVpDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dUlDQWdJQ0FnSUNCeWIyeHNaWEpUWldOdmJtUXVZMnhoYzNOT1lXMWxJRDBnWENKemJHbGtaWEpmWDNKdmJHeGxjbDl6WldOdmJtUmNYRzRnSUNBZ0lDQnpiR2xrWlhKZlgzSnZiR3hsY2x4Y2JpQWdJQ0FnSUhOc2FXUmxjbDlmY205c2JHVnlYMXdpSUNzZ2IzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQWdJSE5zYVdSbGNpNWhjSEJsYm1Rb2NtOXNiR1Z5Um1seWMzUXBPMXh1SUNBZ0lDQWdJQ0J6Ykdsa1pYSXVZWEJ3Wlc1a0tISnZiR3hsY2xObFkyOXVaQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFZHOXZiSFJwY0NoeWIyeHNaWEpHYVhKemRDd2djbTlzYkdWeVUyVmpiMjVrTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YjNabFVtOXNiR1Z5YzBGMFZtRnNkV1VvYjNCMGFXOXVjeXdnY205c2JHVnlSbWx5YzNRc0lISnZiR3hsY2xObFkyOXVaQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzluWjJ4bFVtOXNiR1Z5Y3lodmNIUnBiMjV6TENCeWIyeHNaWEpUWldOdmJtUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWVVOdmJHOXlLRzl3ZEdsdmJuTXNJSEp2Ykd4bGNrWnBjbk4wTENCeWIyeHNaWEpUWldOdmJtUXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1VtOXNiR1Z5Y3k1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsVkc5dmJIUnBjQ0E5SUdaMWJtTjBhVzl1SUNoeWIyeHNaWEpHYVhKemRDd2djbTlzYkdWeVUyVmpiMjVrTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2Y21sbGJuUmhkR2x2YmlBOUlHOXdkR2x2Ym5NdWIzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQWdJSFpoY2lCbWFYTjBWRzl2YkhScGNDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dUlDQWdJQ0FnSUNCbWFYTjBWRzl2YkhScGNDNWpiR0Z6YzA1aGJXVWdQU0JjSW5Oc2FXUmxjbDlmZEc5dmJIUnBjRjltYVhKemRDQnpiR2xrWlhKZlgzUnZiMngwYVhBZ2MyeHBaR1Z5WDE5MGIyOXNkR2x3WDF3aUlDc2diM0pwWlc1MFlYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaV052Ym1SVWIyOXNkR2x3SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5azdYRzRnSUNBZ0lDQWdJSE5sWTI5dVpGUnZiMngwYVhBdVkyeGhjM05PWVcxbElEMGdYQ0p6Ykdsa1pYSmZYM1J2YjJ4MGFYQmZjMlZqYjI1a0lITnNhV1JsY2w5ZmRHOXZiSFJwY0NCemJHbGtaWEpmWDNSdmIyeDBhWEJmWENJZ0t5QnZjbWxsYm5SaGRHbHZianRjYmlBZ0lDQWdJQ0FnY205c2JHVnlSbWx5YzNRdVlYQndaVzVrS0dacGMzUlViMjlzZEdsd0tUdGNiaUFnSUNBZ0lDQWdjbTlzYkdWeVUyVmpiMjVrTG1Gd2NHVnVaQ2h6WldOdmJtUlViMjlzZEdsd0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR0ZQZFhSVWIyOXNkR2x3S0dacGMzUlViMjlzZEdsd0xDQnpaV052Ym1SVWIyOXNkR2x3TENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRkp2Ykd4bGNuTXVjSEp2ZEc5MGVYQmxMblZ3WkdGMFlVOTFkRlJ2YjJ4MGFYQWdQU0JtZFc1amRHbHZiaUFvWm1semRGUnZiMngwYVhBc0lITmxZMjl1WkZSdmIyeDBhWEFzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJ2SUQwZ2IzQjBhVzl1Y3k1MGJ5d2dabkp2YlNBOUlHOXdkR2x2Ym5NdVpuSnZiU3dnWTI5c2IzSWdQU0J2Y0hScGIyNXpMbU52Ykc5eUxDQndjbVZtYVhnZ1BTQnZjSFJwYjI1ekxuQnlaV1pwZUN3Z2FYTlFjbVZtYVhnZ1BTQnZjSFJwYjI1ekxtbHpVSEpsWm1sNExDQnBjMHhoWW1Wc0lEMGdiM0IwYVc5dWN5NXBjMHhoWW1Wc0xDQm5jbUZrYVdWdWRDQTlJRzl3ZEdsdmJuTXVaM0poWkdsbGJuUXNJR2x6UTI5c2IzSlBkWFFnUFNCdmNIUnBiMjV6TG1selEyOXNiM0pQZFhRc0lHRnNiRU52Ykc5eWN5QTlJRzl3ZEdsdmJuTXVZV3hzUTI5c2IzSnpMQ0JwYzBOb1lXNW5aVU52Ykc5eUlEMGdiM0IwYVc5dWN5NXBjME5vWVc1blpVTnZiRzl5TzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5NWVdKbGJDQTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6VUhKbFptbDRJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1semRGUnZiMngwYVhBdWFXNXVaWEpJVkUxTUlEMGdYQ0pjSWlBcklHWnliMjB1ZEc5TWIyTmhiR1ZUZEhKcGJtY29LU0FySUhCeVpXWnBlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WldOdmJtUlViMjlzZEdsd0xtbHVibVZ5U0ZSTlRDQTlJRndpWENJZ0t5QjBieTUwYjB4dlkyRnNaVk4wY21sdVp5Z3BJQ3NnY0hKbFptbDRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpVSEpsWm1sNElEMDlQU0JtWVd4elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYzNSVWIyOXNkR2x3TG1sdWJtVnlTRlJOVENBOUlHWnliMjB1ZEc5TWIyTmhiR1ZUZEhKcGJtY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WldOdmJtUlViMjlzZEdsd0xtbHVibVZ5U0ZSTlRDQTlJSFJ2TG5SdlRHOWpZV3hsVTNSeWFXNW5LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJTkNYMExEUXROR0QwTHpRdXRDd0lOR0IwTFRRdGRDNzBMRFJndEdNSU5DKzBMSFJnTkN3MFlMUXZkR0wwTGtnMExyUXZ0QzkwTExRdGRDNjBZTFF2dEdBSU5DNDBMY2dNVFl0MFlEUXVOR0gwTDNRdnRDejBMNGcwTElnMEw3UXNkR0wwWWZRdmRHTDBMa2cwTExRdU5DMExDRFF2ZEN3MEwvUmdOQzQwTHpRdGRHQUlDTm1abVlnMExKY2JpQWdJQ0FnSUNBZ2QyaHBkR1VzSU5DNElOQ3lJTkMwMExEUXU5R00wTDNRdGRDNTBZalF0ZEM4SU5HQjBMN1JqTkM0MFlEUXNOQzcwWUhSanlEUXROQyswTC9RdnRDNzBMM1JqOUdDMFl3ZzBML1F0ZEdBMExYUXN0QyswTFJjYmlBZ0lDQWdJQ0FnS2lvdlhHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkRGIyeHZjaUE5SUdGc2JFTnZiRzl5YzF0amIyeHZjbDA3WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGRIY21Ga2FXVnVkQ0E5SUdGc2JFTnZiRzl5YzF0bmNtRmthV1Z1ZEYwN1hHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvWTI5c2IzSXBYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb2JtVjNRMjlzYjNJcFhHNGdJQ0FnSUNBZ0lHbG1JQ2h1WlhkSGNtRmthV1Z1ZENBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGRIY21Ga2FXVnVkQ0E5SUdkeVlXUnBaVzUwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h1WlhkRGIyeHZjaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYZERiMnh2Y2lBOUlHTnZiRzl5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzBOb1lXNW5aVU52Ykc5eUlEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5EYjJ4dmNrOTFkQ0E5UFQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGMzUlViMjlzZEdsd0xtbHVibVZ5U0ZSTlRDQTlJRzVsZDBOdmJHOXlMblJ2VEc5allXeGxVM1J5YVc1bktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZqYjI1a1ZHOXZiSFJwY0M1cGJtNWxja2hVVFV3Z1BTQnVaWGRIY21Ga2FXVnVkQzUwYjB4dlkyRnNaVk4wY21sdVp5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYzNSVWIyOXNkR2x3TG5OMGVXeGxMbUpoWTJ0bmNtOTFibVJEYjJ4dmNpQTlJRndpWENJZ0t5QmpiMnh2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXTnZibVJVYjI5c2RHbHdMbk4wZVd4bExtSmhZMnRuY205MWJtUkRiMnh2Y2lBOUlGd2lYQ0lnS3lCbmNtRmthV1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFYTjBWRzl2YkhScGNDNWpiR0Z6YzB4cGMzUXVZV1JrS0NkemJHbGtaWEpmWDNSdmIyeDBhWEJmWW1jbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV052Ym1SVWIyOXNkR2x3TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM05zYVdSbGNsOWZkRzl2YkhScGNGOWlaeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMHhoWW1Wc0lEMDlQU0JtWVd4elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHpkRlJ2YjJ4MGFYQXVZMnhoYzNOTWFYTjBMbUZrWkNnbmMyeHBaR1Z5WDE5MGIyOXNkR2x3WDJScGMzQnNZWGt0Ym05dVpTY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVmpiMjVrVkc5dmJIUnBjQzVqYkdGemMweHBjM1F1WVdSa0tDZHpiR2xrWlhKZlgzUnZiMngwYVhCZlpHbHpjR3hoZVMxdWIyNWxKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJRkp2Ykd4bGNuTXVjSEp2ZEc5MGVYQmxMblZ3WkdGMFlVTnZiRzl5SUQwZ1puVnVZM1JwYjI0Z0tHOXdkR2x2Ym5Nc0lISnZiR3hsY2tacGNuTjBMQ0J5YjJ4c1pYSlRaV052Ym1RcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOdmJHOXlJRDBnYjNCMGFXOXVjeTVqYjJ4dmNpd2dhWE5IY21Ga2FXVnVkQ0E5SUc5d2RHbHZibk11YVhOSGNtRmthV1Z1ZEN3Z1ozSmhaR2xsYm5RZ1BTQnZjSFJwYjI1ekxtZHlZV1JwWlc1MExDQnBjME5vWVc1blpVTnZiRzl5SUQwZ2IzQjBhVzl1Y3k1cGMwTm9ZVzVuWlVOdmJHOXlMQ0JuY21Ga2FXVnVkRVJsWnlBOUlHOXdkR2x2Ym5NdVozSmhaR2xsYm5SRVpXYzdYRzRnSUNBZ0lDQWdJR2xtSUNocGMwTm9ZVzVuWlVOdmJHOXlJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOSGNtRmthV1Z1ZENBOVBUMGdkSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiR3hsY2tacGNuTjBMbk4wZVd4bExtSmhZMnRuY205MWJtUWdQU0JjSW14cGJtVmhjaTFuY21Ga2FXVnVkQ2hjSWlBcklHZHlZV1JwWlc1MFJHVm5JQ3NnWENKa1pXY3NJRndpSUNzZ1kyOXNiM0lnS3lCY0lpd2dYQ0lnS3lCbmNtRmthV1Z1ZENBcklGd2lLVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKdmJHeGxjbE5sWTI5dVpDNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a0lEMGdYQ0pzYVc1bFlYSXRaM0poWkdsbGJuUW9YQ0lnS3lCbmNtRmthV1Z1ZEVSbFp5QXJJRndpWkdWbkxDQmNJaUFySUdOdmJHOXlJQ3NnWENJc0lGd2lJQ3NnWjNKaFpHbGxiblFnS3lCY0lpbGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2Ykd4bGNrWnBjbk4wTG5OMGVXeGxMbUpoWTJ0bmNtOTFibVFnUFNCamIyeHZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjJ4c1pYSlRaV052Ym1RdWMzUjViR1V1WW1GamEyZHliM1Z1WkNBOUlHTnZiRzl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ0lDQlNiMnhzWlhKekxuQnliM1J2ZEhsd1pTNXRiM1psVW05c2JHVnljMEYwVm1Gc2RXVWdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeXdnY205c2JHVnlSbWx5YzNRc0lISnZiR3hsY2xObFkyOXVaQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkRzhnUFNCdmNIUnBiMjV6TG5SdkxDQm1jbTl0SUQwZ2IzQjBhVzl1Y3k1bWNtOXRMQ0J2Y21sbGJuUmhkR2x2YmlBOUlHOXdkR2x2Ym5NdWIzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQWdJSFpoY2lCd2VGUnZJRDBnZEdocGN5NWpiMjUyWlhKMFZtRnNkV1ZVYjFCNEtIUnZMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQjRSbkp2YlNBOUlIUm9hWE11WTI5dWRtVnlkRlpoYkhWbFZHOVFlQ2htY205dExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCdmMybDBhVzl1Vkc4Z1BTQjBhR2x6TG1OdmJuWmxjblJRZUZSdlVISnZZMlZ1ZENod2VGUnZMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQnZjMmwwYVc5dVJuSnZiU0E5SUhSb2FYTXVZMjl1ZG1WeWRGQjRWRzlRY205alpXNTBLSEI0Um5KdmJTd2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJR2xtSUNodmNtbGxiblJoZEdsdmJpQTlQVDBnSjJodmNtbDZiMjUwWVd3bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeWIyeHNaWEpHYVhKemRDNXpkSGxzWlM1c1pXWjBJRDBnY0c5emFYUnBiMjVHY205dElDc2dYQ0lsWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5YjJ4c1pYSlRaV052Ym1RdWMzUjViR1V1YkdWbWRDQTlJSEJ2YzJsMGFXOXVWRzhnS3lCY0lpVmNJanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISnZiR3hsY2tacGNuTjBMbk4wZVd4bExtSnZkSFJ2YlNBOUlIQnZjMmwwYVc5dVJuSnZiU0FySUZ3aUpWd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtOXNiR1Z5VTJWamIyNWtMbk4wZVd4bExtSnZkSFJ2YlNBOUlIQnZjMmwwYVc5dVZHOGdLeUJjSWlWY0lqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ1VtOXNiR1Z5Y3k1d2NtOTBiM1I1Y0dVdWRYQkVZWFJoSUQwZ1puVnVZM1JwYjI0Z0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhOc2FXUmxjaUE5SUc5d2RHbHZibk11YzJ4cFpHVnlPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtOXNiR1Z5Um1seWMzUWdQU0J6Ykdsa1pYSXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuTnNhV1JsY2w5ZmNtOXNiR1Z5WDJacGNuTjBKeWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQnliMnhzWlhKVFpXTnZibVFnUFNCemJHbGtaWEl1Y1hWbGNubFRaV3hsWTNSdmNpZ25Mbk5zYVdSbGNsOWZjbTlzYkdWeVgzTmxZMjl1WkNjcE8xeHVJQ0FnSUNBZ0lDQjJZWElnWm1semRGUnZiMngwYVhBZ1BTQnpiR2xrWlhJdWNYVmxjbmxUWld4bFkzUnZjaWduTG5Oc2FXUmxjbDlmZEc5dmJIUnBjRjltYVhKemRDY3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MyVmpiMjVrVkc5dmJIUnBjQ0E5SUhOc2FXUmxjaTV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjMnhwWkdWeVgxOTBiMjlzZEdsd1gzTmxZMjl1WkNjcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRtVlNiMnhzWlhKelFYUldZV3gxWlNodmNIUnBiMjV6TENCeWIyeHNaWEpHYVhKemRDd2djbTlzYkdWeVUyVmpiMjVrS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjJkbmJHVlNiMnhzWlhKektHOXdkR2x2Ym5Nc0lISnZiR3hsY2xObFkyOXVaQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSaFEyOXNiM0lvYjNCMGFXOXVjeXdnY205c2JHVnlSbWx5YzNRc0lISnZiR3hsY2xObFkyOXVaQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSaFQzVjBWRzl2YkhScGNDaG1hWE4wVkc5dmJIUnBjQ3dnYzJWamIyNWtWRzl2YkhScGNDd2diM0IwYVc5dWN5azdYRzRnSUNBZ2ZUdGNiaUFnSUNCU2IyeHNaWEp6TG5CeWIzUnZkSGx3WlM1amIyNTJaWEowVm1Gc2RXVlViMUI0SUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0YVc0Z1BTQnZjSFJwYjI1ekxtMXBiaXdnYldGNElEMGdiM0IwYVc5dWN5NXRZWGdzSUhOMFpYQWdQU0J2Y0hScGIyNXpMbk4wWlhBc0lITnBlbVVnUFNCdmNIUnBiMjV6TG5OcGVtVXNJRzl1WlZOMFpYQWdQU0J2Y0hScGIyNXpMbTl1WlZOMFpYQTdYRzRnSUNBZ0lDQWdJR2xtSUNoMllXeDFaU0E5UFQwZ2JXRjRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOcGVtVTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5KdmRXNWtLQ2gyWVd4MVpTQXRJRzFwYmlrZ0x5QnpkR1Z3S1NBcUlHOXVaVk4wWlhBN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTYjJ4c1pYSnpMbkJ5YjNSdmRIbHdaUzVqYjI1MlpYSjBVSGhVYjFCeWIyTmxiblFnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5wZW1VZ1BTQnZjSFJwYjI1ekxuTnBlbVU3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvZG1Gc2RXVWdLaUF4TURBcElDOGdjMmw2WlR0Y2JpQWdJQ0I5TzF4dUlDQWdJRkp2Ykd4bGNuTXVjSEp2ZEc5MGVYQmxMblJ2WjJkc1pWSnZiR3hsY25NZ1BTQm1kVzVqZEdsdmJpQW9iM0IwYVc5dWN5d2daV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RIbHdaU0E5SUc5d2RHbHZibk11ZEhsd1pUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkemFXNW5iR1VuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5ibTl1WlNjN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5ZbXh2WTJzbk8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVW05c2JHVnljenRjYm4wb0tTazdYRzVsZUhCdmNuUnpMbEp2Ykd4bGNuTWdQU0JTYjJ4c1pYSnpPMXh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWxlSEJ2Y25SekxsUnlZV05ySUQwZ2RtOXBaQ0F3TzF4dWRtRnlJRlJ5WVdOcklEMGdMeW9xSUVCamJHRnpjeUFxTHlBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlGUnlZV05yS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVW9iM0IwYVc5dWN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUZSeVlXTnJMbkJ5YjNSdmRIbHdaUzVqY21WaGRHVWdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjMnhwWkdWeUlEMGdiM0IwYVc5dWN5NXpiR2xrWlhJc0lHOXlhV1Z1ZEdGMGFXOXVJRDBnYjNCMGFXOXVjeTV2Y21sbGJuUmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJ5WVdOcklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lDQWdJQ0FnSUhSeVlXTnJMbU5zWVhOelRtRnRaU0E5SUZ3aWMyeHBaR1Z5WDE5MGNtRmpheUJ6Ykdsa1pYSmZYM1J5WVdOclgxd2lJQ3NnYjNKcFpXNTBZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lITnNhV1JsY2k1aGNIQmxibVFvZEhKaFkyc3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlU5MWRFVnNaVzFsYm5Rb2RISmhZMnNzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDA3WEc0Z0lDQWdWSEpoWTJzdWNISnZkRzkwZVhCbExtTnlaV0YwWlU5MWRFVnNaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpQW9kSEpoWTJzc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5eWFXVnVkR0YwYVc5dUlEMGdiM0IwYVc5dWN5NXZjbWxsYm5SaGRHbHZianRjYmlBZ0lDQWdJQ0FnZG1GeUlITjBZWEowVm1Gc2RXVWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGthWFluS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1WkZaaGJIVmxJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlrN1hHNGdJQ0FnSUNBZ0lITjBZWEowVm1Gc2RXVXVZMnhoYzNOT1lXMWxJRDBnWENKemJHbGtaWEpmWDI5MWRDQnpiR2xrWlhKZlgyOTFkQzF6ZEdGeWRDQnpiR2xrWlhKZlgyOTFkQzF6ZEdGeWRGOWNJaUFySUc5eWFXVnVkR0YwYVc5dU8xeHVJQ0FnSUNBZ0lDQmxibVJXWVd4MVpTNWpiR0Z6YzA1aGJXVWdQU0JjSW5Oc2FXUmxjbDlmYjNWMElITnNhV1JsY2w5ZmIzVjBMV1Z1WkNCemJHbGtaWEpmWDI5MWRDMWxibVJmWENJZ0t5QnZjbWxsYm5SaGRHbHZianRjYmlBZ0lDQWdJQ0FnZEhKaFkyc3VZWEJ3Wlc1a0tITjBZWEowVm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0IwY21GamF5NWhjSEJsYm1Rb1pXNWtWbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWEowUlc1a1ZISmhZMnRQZFhRb2MzUmhjblJXWVd4MVpTd2daVzVrVm1Gc2RXVXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1ZISmhZMnN1Y0hKdmRHOTBlWEJsTG5ObGRGTjBZWEowUlc1a1ZISmhZMnRQZFhRZ1BTQm1kVzVqZEdsdmJpQW9iM1YwVTNSaGNuUXNJRzkxZEVWdVpDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JXbHVJRDBnYjNCMGFXOXVjeTV0YVc0c0lHMWhlQ0E5SUc5d2RHbHZibk11YldGNExDQm1jbTl0SUQwZ2IzQjBhVzl1Y3k1bWNtOXRMQ0IwYnlBOUlHOXdkR2x2Ym5NdWRHOHNJRzFwYmsxaGVDQTlJRzl3ZEdsdmJuTXViV2x1VFdGNExDQm1jbTl0Vkc4Z1BTQnZjSFJwYjI1ekxtWnliMjFVYnl3Z2FYTlVjbUZqYTFCeVpXWnBlQ0E5SUc5d2RHbHZibk11YVhOVWNtRmphMUJ5WldacGVEdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSeVlXTnJVSEpsWm1sNElEMGdiM0IwYVc5dWN5NTBjbUZqYTFCeVpXWnBlRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpWSEpoWTJ0UWNtVm1hWGdnUFQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GamExQnlaV1pwZUNBOUlDY25PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHRhVzVOWVhnZ1BUMDlJSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5MWRGTjBZWEowTG1sdWJtVnlTRlJOVENBOUlGd2lYQ0lnS3lCdGFXNHVkRzlNYjJOaGJHVlRkSEpwYm1jb0tTQXJJSFJ5WVdOclVISmxabWw0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdiM1YwUlc1a0xtbHVibVZ5U0ZSTlRDQTlJRndpWENJZ0t5QnRZWGd1ZEc5TWIyTmhiR1ZUZEhKcGJtY29LU0FySUhSeVlXTnJVSEpsWm1sNE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNobWNtOXRWRzhnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzkxZEZOMFlYSjBMbWx1Ym1WeVNGUk5UQ0E5SUZ3aVhDSWdLeUJtY205dExuUnZURzlqWVd4bFUzUnlhVzVuS0NrZ0t5QjBjbUZqYTFCeVpXWnBlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTFkRVZ1WkM1cGJtNWxja2hVVFV3Z1BTQmNJbHdpSUNzZ2RHOHVkRzlNYjJOaGJHVlRkSEpwYm1jb0tTQXJJSFJ5WVdOclVISmxabWw0TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JVY21GamF5NXdjbTkwYjNSNWNHVXVkWEJFWVhSaElEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITnNhV1JsY2lBOUlHOXdkR2x2Ym5NdWMyeHBaR1Z5TzF4dUlDQWdJQ0FnSUNCMllYSWdiM1YwVTNSaGNuUWdQU0J6Ykdsa1pYSXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuTnNhV1JsY2w5ZmIzVjBMWE4wWVhKMEp5azdYRzRnSUNBZ0lDQWdJSFpoY2lCdmRYUkZibVFnUFNCemJHbGtaWEl1Y1hWbGNubFRaV3hsWTNSdmNpZ25Mbk5zYVdSbGNsOWZiM1YwTFdWdVpDY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhKMFJXNWtWSEpoWTJ0UGRYUW9iM1YwVTNSaGNuUXNJRzkxZEVWdVpDd2diM0IwYVc5dWN5azdYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVkhKaFkyczdYRzU5S0NrcE8xeHVaWGh3YjNKMGN5NVVjbUZqYXlBOUlGUnlZV05yTzF4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzVsZUhCdmNuUnpMbE5qWVd4bElEMGdkbTlwWkNBd08xeHVkbUZ5SUZOallXeGxJRDBnTHlvcUlFQmpiR0Z6Y3lBcUx5QW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR1oxYm1OMGFXOXVJRk5qWVd4bEtHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1VvYjNCMGFXOXVjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lGTmpZV3hsTG5CeWIzUnZkSGx3WlM1amNtVmhkR1VnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzJ4cFpHVnlJRDBnYjNCMGFXOXVjeTV6Ykdsa1pYSXNJRzl5YVdWdWRHRjBhVzl1SUQwZ2IzQjBhVzl1Y3k1dmNtbGxiblJoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUhOallXeGxJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlrN1hHNGdJQ0FnSUNBZ0lITmpZV3hsTG1Oc1lYTnpUbUZ0WlNBOUlGd2ljMnhwWkdWeVgxOXpZMkZzWlNCemJHbGtaWEpmWDNOallXeGxYMXdpSUNzZ2IzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQWdJSE5zYVdSbGNpNWhjSEJsYm1Rb2MyTmhiR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSnpLSE5qWVd4bEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUlRZMkZzWlUxaGNtdGxjaWh2Y0hScGIyNXpMQ0J6WTJGc1pTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyaGxZMnRUWTJGc1pTaHZjSFJwYjI1ekxDQnpZMkZzWlNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JUWTJGc1pTNXdjbTkwYjNSNWNHVXVkWEJFWVhSaElEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITnNhV1JsY2lBOUlHOXdkR2x2Ym5NdWMyeHBaR1Z5TzF4dUlDQWdJQ0FnSUNCMllYSWdjMk5oYkdVZ1BTQnpiR2xrWlhJdWNYVmxjbmxUWld4bFkzUnZjaWduTG5Oc2FXUmxjbDlmYzJOaGJHVW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWphR1ZqYTFOallXeGxLRzl3ZEdsdmJuTXNJSE5qWVd4bEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR0ZUWTJGc1pVMWhjbXRsY2lodmNIUnBiMjV6S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRk5qWVd4bExuQnliM1J2ZEhsd1pTNTFjR1JoZEdGVFkyRnNaVTFoY210bGNpQTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpZMkZzWlZCeVpXWnBlQ0E5SUc5d2RHbHZibk11YzJOaGJHVlFjbVZtYVhnc0lHbHpVMk5oYkdWUWNtVm1hWGdnUFNCdmNIUnBiMjV6TG1selUyTmhiR1ZRY21WbWFYZ3NJRzl1YkhsRWFYWnBjMmx2Ym5NZ1BTQnZjSFJwYjI1ekxtOXViSGxFYVhacGMybHZibk1zSUhOc2FXUmxjaUE5SUc5d2RHbHZibk11YzJ4cFpHVnlMQ0JqYjJ4dmNpQTlJRzl3ZEdsdmJuTXVZMjlzYjNJN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6WTJGc1pVMWhjbXRsY25NZ1BTQnpiR2xrWlhJdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnbkxuTnNhV1JsY2w5ZmMyTmhiR1V0ZG1Gc2RXVW5LVHRjYmlBZ0lDQWdJQ0FnYzJOaGJHVk5ZWEpyWlhKekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tITmpZV3hsVFdGeWEyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOVFkyRnNaVkJ5WldacGVDQTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFRXRnlhMlZ5TG5ObGRFRjBkSEpwWW5WMFpTZ25aR0YwWVMxMFpYaDBKeXdnWENKY0lpQXJJSE5qWVd4bFVISmxabWw0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOallXeGxUV0Z5YTJWeUxuTmxkRUYwZEhKcFluVjBaU2duWkdGMFlTMTBaWGgwSnl3Z0p5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXViSGxFYVhacGMybHZibk1nUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyRnNaVTFoY210bGNpNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRkR1Y0ZENjc0lDY25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pVMWhjbXRsY2k1amJHRnpjMHhwYzNRdVlXUmtLQ2R6Ykdsa1pYSmZYM05qWVd4bExYWmhiSFZsWDJaekxUQW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFRXRnlhMlZ5TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM05zYVdSbGNsOWZjMk5oYkdVdGRtRnNkV1ZmWm5NdGJtOXliV0ZzSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RdWMzUjViR1V1YzJWMFVISnZjR1Z5ZEhrb0p5MHRjMk5oYkdVdFkyOXNiM0luTENCY0lpQmNJaUFySUdOdmJHOXlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGTmpZV3hsTG5CeWIzUnZkSGx3WlM1amFHVmphMU5qWVd4bElEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXNJSE5qWVd4bEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGMxTmpZV3hsSUQwZ2IzQjBhVzl1Y3k1cGMxTmpZV3hsTzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5UWTJGc1pTQTlQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmpZV3hsTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0FuYm05dVpTYzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpVMk5oYkdVZ1BUMDlJSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOallXeGxMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5KenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc0Z0lDQWdVMk5oYkdVdWNISnZkRzkwZVhCbExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhKeklEMGdablZ1WTNScGIyNGdLSE5qWVd4bEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNVRZMkZzWlVOc2FXTnJJRDBnZEdocGN5NXZibE5qWVd4bFEyeHBZMnN1WW1sdVpDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2MyTmhiR1V1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0IwYUdsekxtOXVVMk5oYkdWRGJHbGpheWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQlRZMkZzWlM1d2NtOTBiM1I1Y0dVdVlXUmtVMk5oYkdWTllYSnJaWElnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3l3Z2MyTmhiR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFwYmlBOUlHOXdkR2x2Ym5NdWJXbHVMQ0J0WVhnZ1BTQnZjSFJwYjI1ekxtMWhlQ3dnYzNSbGNDQTlJRzl3ZEdsdmJuTXVjM1JsY0N3Z2MybDZaU0E5SUc5d2RHbHZibk11YzJsNlpTd2diMjVsVTNSbGNDQTlJRzl3ZEdsdmJuTXViMjVsVTNSbGNEdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVl5QTlJSFJvYVhNdVoyVjBTVzVqY21WdFpXNTBLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NIaEpibU1nUFNBb2FXNWpJQzhnYzNSbGNDa2dLaUJ2Ym1WVGRHVndPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1puSmhaMjFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRWIyTjFiV1Z1ZEVaeVlXZHRaVzUwS0NrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3ZUVOMWNuSmxiblFnUFNBd08xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmpkWEp5Wlc1MElEMGdiV2x1T3lCamRYSnlaVzUwSUR3Z2JXRjRPeUJqZFhKeVpXNTBJQ3M5SUdsdVl5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEI0UTNWeWNtVnVkQ0ErSUhOcGVtVWdMU0ExTUNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxVMk5oYkdWTllYSnJaWElvWm5KaFoyMWxiblFzSUdOMWNuSmxiblFzSUhCNFEzVnljbVZ1ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3ZUVOMWNuSmxiblFnS3owZ2NIaEpibU03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVlRZMkZzWlUxaGNtdGxjaWhtY21GbmJXVnVkQ3dnYldGNExDQnphWHBsTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2MyTmhiR1V1WVhCd1pXNWtLR1p5WVdkdFpXNTBLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGTmpZV3hsTG5CeWIzUnZkSGx3WlM1blpYUkpibU55WlcxbGJuUWdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjMmw2WlNBOUlHOXdkR2x2Ym5NdWMybDZaU3dnYjI1bFUzUmxjQ0E5SUc5d2RHbHZibk11YjI1bFUzUmxjQ3dnYzNSbGNDQTlJRzl3ZEdsdmJuTXVjM1JsY0R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdUV0YwYUM1alpXbHNLSE5wZW1VZ0x5QnZibVZUZEdWd0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVl5QTlJRTFoZEdndVkyVnBiQ2gyWVd4MVpTQXZJRFVwSUNvZ2MzUmxjRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1WXp0Y2JpQWdJQ0I5TzF4dUlDQWdJRk5qWVd4bExuQnliM1J2ZEhsd1pTNWpjbVZoZEdWVFkyRnNaVTFoY210bGNpQTlJR1oxYm1OMGFXOXVJQ2htY21GbmJXVnVkQ3dnZG1Gc2RXVXNJSEJ2YzJsMGFXOXVMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZjbWxsYm5SaGRHbHZiaUE5SUc5d2RHbHZibk11YjNKcFpXNTBZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6WTJGc1pVMWhjbXRsY2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNOd1lXNG5LVHRjYmlBZ0lDQWdJQ0FnYzJOaGJHVk5ZWEpyWlhJdVkyeGhjM05PWVcxbElEMGdYQ0p6Ykdsa1pYSmZYM05qWVd4bExYWmhiSFZsSUhOc2FXUmxjbDlmYzJOaGJHVXRkbUZzZFdWZlhDSWdLeUJ2Y21sbGJuUmhkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ1puSmhaMjFsYm5RdVlYQndaVzVrS0hOallXeGxUV0Z5YTJWeUtUdGNiaUFnSUNBZ0lDQWdjMk5oYkdWTllYSnJaWEl1YVc1dVpYSklWRTFNSUQwZ2RtRnNkV1V1ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHRlRZMkZzWlUxaGNtdGxjaWh2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOW1abk5sZENBOUlIUm9hWE11WTI5dWRtVnlkRkI0Vkc5UVpYSmpaVzUwS0hCdmMybDBhVzl1TENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl5YVdWdWRHRjBhVzl1SUQwOVBTQW5hRzl5YVhwdmJuUmhiQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFRXRnlhMlZ5TG5OMGVXeGxMbXhsWm5RZ1BTQnZabVp6WlhRZ0t5QmNJaVZjSWp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFRXRnlhMlZ5TG5OMGVXeGxMbUp2ZEhSdmJTQTlJRzltWm5ObGRDQXJJRndpSlZ3aU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCVFkyRnNaUzV3Y205MGIzUjVjR1V1WTI5dWRtVnlkRkI0Vkc5UVpYSmpaVzUwSUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6YVhwbElEMGdiM0IwYVc5dWN5NXphWHBsTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0haaGJIVmxJQ29nTVRBd0tTQXZJSE5wZW1VN1hHNGdJQ0FnZlR0Y2JpQWdJQ0F2THlEUW10Q3cwWUhSZ3RDKzBMelF2ZEdMMExrZzBLM1FzdEMxMEwzUmdpRFF0TkM3MFk4ZzBML1F0ZEdBMExYUXROQ3cwWWZRdUNEUXQ5QzkwTERSaDlDMTBMM1F1TkdQSU5DeUlOQ1MwTGpRdEZ4dUlDQWdJRk5qWVd4bExuQnliM1J2ZEhsd1pTNXZibE5qWVd4bFEyeHBZMnNnUFNCbWRXNWpkR2x2YmlBb1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJoY21kbGRDQTlJR1YyWlc1MExuUmhjbWRsZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0VvZEdGeVoyVjBJR2x1YzNSaGJtTmxiMllnU0ZSTlRFVnNaVzFsYm5RcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUmhjbWRsZEM1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb0ozTnNhV1JsY2w5ZmMyTmhiR1V0ZG1Gc2RXVW5LU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdUblZ0WW1WeUtIUmhjbWRsZEM1cGJtNWxja2hVVFV3cE8xeHVJQ0FnSUNBZ0lDQjJZWElnYzJOaGJHVkZkbVZ1ZENBOUlHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnbmMyTmhiR1ZqYkdsamF5Y3NJSHNnWW5WaVlteGxjem9nZEhKMVpTd2daR1YwWVdsc09pQjdJR1YyWlc1ME9pQmxkbVZ1ZEN3Z2RtRnNkV1U2SUhaaGJIVmxJSDBnZlNrN1hHNGdJQ0FnSUNBZ0lIUmhjbWRsZEM1a2FYTndZWFJqYUVWMlpXNTBLSE5qWVd4bFJYWmxiblFwTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlGTmpZV3hsTzF4dWZTZ3BLVHRjYm1WNGNHOXlkSE11VTJOaGJHVWdQU0JUWTJGc1pUdGNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1Q1lYSWdQU0IyYjJsa0lEQTdYRzUyWVhJZ1FtRnlJRDBnTHlvcUlFQmpiR0Z6Y3lBcUx5QW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR1oxYm1OMGFXOXVJRUpoY2lodmNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxLRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMWNiaUFnSUNCQ1lYSXVjSEp2ZEc5MGVYQmxMbU55WldGMFpTQTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpiR2xrWlhJZ1BTQnZjSFJwYjI1ekxuTnNhV1JsY2l3Z2IzSnBaVzUwWVhScGIyNGdQU0J2Y0hScGIyNXpMbTl5YVdWdWRHRjBhVzl1TzF4dUlDQWdJQ0FnSUNCMllYSWdZbUZ5SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5azdYRzRnSUNBZ0lDQWdJR0poY2k1amJHRnpjMDVoYldVZ1BTQmNJbk5zYVdSbGNsOWZZbUZ5SUhOc2FXUmxjbDlmWW1GeVgxd2lJQ3NnYjNKcFpXNTBZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lITnNhV1JsY2k1aGNIQmxibVFvWW1GeUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR0ZEYjJ4dmNpaHZjSFJwYjI1ekxDQmlZWElwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFlVSmhjaWh2Y0hScGIyNXpMQ0JpWVhJcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnUW1GeUxuQnliM1J2ZEhsd1pTNTFjRVJoZEdFZ1BTQm1kVzVqZEdsdmJpQW9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MyeHBaR1Z5SUQwZ2IzQjBhVzl1Y3k1emJHbGtaWEk3WEc0Z0lDQWdJQ0FnSUhaaGNpQmlZWElnUFNCemJHbGtaWEl1Y1hWbGNubFRaV3hsWTNSdmNpZ25Mbk5zYVdSbGNsOWZZbUZ5SnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmhRMjlzYjNJb2IzQjBhVzl1Y3l3Z1ltRnlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdGQ1lYSW9iM0IwYVc5dWN5d2dZbUZ5S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRUpoY2k1d2NtOTBiM1I1Y0dVdWRYQmtZWFJoUTI5c2IzSWdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeXdnWW1GeUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCamIyeHZjaUE5SUc5d2RHbHZibk11WTI5c2IzSXNJR2x6UjNKaFpHbGxiblFnUFNCdmNIUnBiMjV6TG1selIzSmhaR2xsYm5Rc0lHZHlZV1JwWlc1MElEMGdiM0IwYVc5dWN5NW5jbUZrYVdWdWRDd2daM0poWkdsbGJuUkVaV2NnUFNCdmNIUnBiMjV6TG1keVlXUnBaVzUwUkdWbkxDQnBjME5vWVc1blpVTnZiRzl5SUQwZ2IzQjBhVzl1Y3k1cGMwTm9ZVzVuWlVOdmJHOXlPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkRhR0Z1WjJWRGIyeHZjaUE5UFQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselIzSmhaR2xsYm5RZ1BUMDlJSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWEl1YzNSNWJHVXVZbUZqYTJkeWIzVnVaQ0E5SUZ3aWJHbHVaV0Z5TFdkeVlXUnBaVzUwS0Z3aUlDc2daM0poWkdsbGJuUkVaV2NnS3lCY0ltUmxaeXdnWENJZ0t5QmpiMnh2Y2lBcklGd2lMQ0JjSWlBcklHZHlZV1JwWlc1MElDc2dYQ0lwWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYSXVjM1I1YkdVdVltRmphMmR5YjNWdVpDQTlJR052Ykc5eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JDWVhJdWNISnZkRzkwZVhCbExtZGxkRkp2Ykd4bGNsQnZjMmwwYVc5dWN5QTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpiR2xrWlhJZ1BTQnZjSFJwYjI1ekxuTnNhV1JsY2p0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEp2Ykd4bGNuTWdQU0J6Ykdsa1pYSXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25Mbk5zYVdSbGNsOWZjbTlzYkdWeUp5azdYRzRnSUNBZ0lDQWdJSFpoY2lCeWIyeHNaWEp6VUc5emFYUnBiMjV6SUQwZ1czUm9hWE11WTJGc1kzVnNZWFJsVUc5emFYUnBiMjRvY205c2JHVnljMXN3WFN3Z2IzQjBhVzl1Y3lrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTmhiR04xYkdGMFpWQnZjMmwwYVc5dUtISnZiR3hsY25OYk1WMHNJRzl3ZEdsdmJuTXBYVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEp2Ykd4bGNuTlFiM05wZEdsdmJuTXVjMjl5ZENobWRXNWpkR2x2YmlBb1lTd2dZaWtnZXlCeVpYUjFjbTRnWVNBdElHSTdJSDBwTzF4dUlDQWdJSDA3WEc0Z0lDQWdRbUZ5TG5CeWIzUnZkSGx3WlM1allXeGpkV3hoZEdWUWIzTnBkR2x2YmlBOUlHWjFibU4wYVc5dUlDaGxiR1Z0Wlc1MExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdmNtbGxiblJoZEdsdmJpQTlJRzl3ZEdsdmJuTXViM0pwWlc1MFlYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhaaGNpQnphV1JsSUQwZ2IzSnBaVzUwWVhScGIyNGdQVDA5SUNkb2IzSnBlbTl1ZEdGc0p5QS9JQ2RzWldaMEp5QTZJQ2QwYjNBbk8xeHVJQ0FnSUNBZ0lDQjJZWElnZDJsa2RHZ2dQU0JPZFcxaVpYSXVjR0Z5YzJWSmJuUW9aMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGxiR1Z0Wlc1MEtTNTNhV1IwYUN3Z01UQXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWRDNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1Z0emFXUmxYU0FySUhkcFpIUm9JQzhnTWp0Y2JpQWdJQ0I5TzF4dUlDQWdJRUpoY2k1d2NtOTBiM1I1Y0dVdVkyOXVkbVZ5ZEZCNFZHOVFjbTlqWlc1MElEMGdablZ1WTNScGIyNGdLSFpoYkhWbExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemFYcGxJRDBnYjNCMGFXOXVjeTV6YVhwbE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tIWmhiSFZsSUNvZ01UQXdLU0F2SUhOcGVtVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCQ1lYSXVjSEp2ZEc5MGVYQmxMblZ3WkdGMFlVSmhjaUE5SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6TENCaVlYSXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUjVjR1VnUFNCdmNIUnBiMjV6TG5SNWNHVXNJRzl5YVdWdWRHRjBhVzl1SUQwZ2IzQjBhVzl1Y3k1dmNtbGxiblJoZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUdselNHOXlhWHB2Ym5SaGJDQTlJRzl5YVdWdWRHRjBhVzl1SUQwOVBTQW5hRzl5YVhwdmJuUmhiQ2M3WEc0Z0lDQWdJQ0FnSUhaaGNpQnphV1JsSUQwZ2FYTkliM0pwZW05dWRHRnNJRDhnSjJ4bFpuUW5JRG9nSjNSdmNDYzdYRzRnSUNBZ0lDQWdJSFpoY2lCa2FYSmxZM1JwYjI0Z1BTQnBjMGh2Y21sNmIyNTBZV3dnUHlBbmQybGtkR2duSURvZ0oyaGxhV2RvZENjN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjJ4c1pYSlFiM01nUFNCMGFHbHpMbWRsZEZKdmJHeGxjbEJ2YzJsMGFXOXVjeWh2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHpVMmx1WjJ4bElEMGdkSGx3WlNBOVBUMGdKM05wYm1kc1pTYzdYRzRnSUNBZ0lDQWdJSFpoY2lCemJHbGtaWEpRYjNNZ1BTQjBhR2x6TG1kbGRFNWxkMU5zYVdSbGNsQnZjeWh2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpVMmx1WjJ4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5JYjNKcGVtOXVkR0ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJ2SUQwZ2RHaHBjeTVqYjI1MlpYSjBVSGhVYjFCeWIyTmxiblFvVFdGMGFDNWhZbk1vY205c2JHVnlVRzl6V3pGZElDMGdjMnhwWkdWeVVHOXpLU3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GeUxuTjBlV3hsVzNOcFpHVmRJRDBnSnpBbEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWEl1YzNSNWJHVmJaR2x5WldOMGFXOXVYU0E5SUhSdklDc2dYQ0lsWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabkp2YlNBOUlIUm9hWE11WTI5dWRtVnlkRkI0Vkc5UWNtOWpaVzUwS0UxaGRHZ3VZV0p6S0hKdmJHeGxjbEJ2YzFzeFhTQXRJSE5zYVdSbGNsQnZjeWtzSUc5d2RHbHZibk1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBieUE5SURFd01DQXRJR1p5YjIwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnlMbk4wZVd4bFczTnBaR1ZkSUQwZ1puSnZiU0FySUZ3aUpWd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poY2k1emRIbHNaVnRrYVhKbFkzUnBiMjVkSUQwZ2RHOGdLeUJjSWlWY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWNtOXRJRDBnZEdocGN5NWpiMjUyWlhKMFVIaFViMUJ5YjJObGJuUW9UV0YwYUM1aFluTW9jbTlzYkdWeVVHOXpXekJkSUMwZ2MyeHBaR1Z5VUc5ektTd2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkRzhnUFNCMGFHbHpMbU52Ym5abGNuUlFlRlJ2VUhKdlkyVnVkQ2hOWVhSb0xtRmljeWh5YjJ4c1pYSlFiM05iTVYwZ0xTQnliMnhzWlhKUWIzTmJNRjBwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0poY2k1emRIbHNaVnR6YVdSbFhTQTlJR1p5YjIwZ0t5QmNJaVZjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0poY2k1emRIbHNaVnRrYVhKbFkzUnBiMjVkSUQwZ2RHOGdLeUJjSWlWY0lqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ1FtRnlMbkJ5YjNSdmRIbHdaUzVuWlhST1pYZFRiR2xrWlhKUWIzTWdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdiM0pwWlc1MFlYUnBiMjRnUFNCdmNIUnBiMjV6TG05eWFXVnVkR0YwYVc5dUxDQnpiR2xrWlhJZ1BTQnZjSFJwYjI1ekxuTnNhV1JsY2p0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJ2YzJsMGFXOXVJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl5YVdWdWRHRjBhVzl1SUQwOVBTQW5hRzl5YVhwdmJuUmhiQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVJRDBnYzJ4cFpHVnlMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncExteGxablE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM05wZEdsdmJpQTlJSE5zYVdSbGNpNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1M1MGIzQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ2YzJsMGFXOXVPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUVKaGNqdGNibjBvS1NrN1hHNWxlSEJ2Y25SekxrSmhjaUE5SUVKaGNqdGNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1aGJHeERiMnh2Y25NZ1BTQjJiMmxrSURBN1hHNTJZWElnWVd4c1EyOXNiM0p6SUQwZ2UxeHVJQ0FnSUNjalpqQm1PR1ptSnpvZ0oyRnNhV05sWW14MVpTY3NYRzRnSUNBZ0p5Tm1ZV1ZpWkRjbk9pQW5ZVzUwYVhGMVpYZG9hWFJsSnl4Y2JpQWdJQ0FuSXpBd1ptWm1aaWM2SUNkaGNYVmhKeXhjYmlBZ0lDQW5JemRtWm1aa05DYzZJQ2RoY1hWaGJXRnlhVzVsSnl4Y2JpQWdJQ0FuSTJZd1ptWm1aaWM2SUNkaGVuVnlaU2NzWEc0Z0lDQWdKeU5tTldZMVpHTW5PaUFuWW1WcFoyVW5MRnh1SUNBZ0lDY2pabVpsTkdNMEp6b2dKMkpwYzNGMVpTY3NYRzRnSUNBZ0p5TXdNREF3TURBbk9pQW5ZbXhoWTJzbkxGeHVJQ0FnSUNjalptWmxZbU5rSnpvZ0oySnNZVzVqYUdWa1lXeHRiMjVrSnl4Y2JpQWdJQ0FuSXpBd01EQm1aaWM2SUNkaWJIVmxKeXhjYmlBZ0lDQW5JemhoTW1KbE1pYzZJQ2RpYkhWbGRtbHZiR1YwSnl4Y2JpQWdJQ0FuSTJFMU1tRXlZU2M2SUNkaWNtOTNiaWNzWEc0Z0lDQWdKeU5rWldJNE9EY25PaUFuWW5WeWJIbDNiMjlrSnl4Y2JpQWdJQ0FuSXpWbU9XVmhNQ2M2SUNkallXUmxkR0pzZFdVbkxGeHVJQ0FnSUNjak4yWm1aakF3SnpvZ0oyTm9ZWEowY21WMWMyVW5MRnh1SUNBZ0lDY2paREkyT1RGbEp6b2dKMk5vYjJOdmJHRjBaU2NzWEc0Z0lDQWdKeU5tWmpkbU5UQW5PaUFuWTI5eVlXd25MRnh1SUNBZ0lDY2pOalE1TldWa0p6b2dKMk52Y201bWJHOTNaWEppYkhWbEp5eGNiaUFnSUNBbkkyWm1aamhrWXljNklDZGpiM0p1YzJsc2F5Y3NYRzRnSUNBZ0p5TmtZekUwTTJNbk9pQW5ZM0pwYlhOdmJpY3NYRzRnSUNBZ0p5TXdNREF3T0dJbk9pQW5aR0Z5YTJKc2RXVW5MRnh1SUNBZ0lDY2pNREE0WWpoaUp6b2dKMlJoY210amVXRnVKeXhjYmlBZ0lDQW5JMkk0T0RZd1lpYzZJQ2RrWVhKcloyOXNaR1Z1Y205a0p5eGNiaUFnSUNBbkkyRTVZVGxoT1NjNklDZGtZWEpyWjNKaGVTY3NYRzRnSUNBZ0p5TXdNRFkwTURBbk9pQW5aR0Z5YTJkeVpXVnVKeXhjYmlBZ0lDQW5JMkprWWpjMllpYzZJQ2RrWVhKcmEyaGhhMmtuTEZ4dUlDQWdJQ2NqT0dJd01EaGlKem9nSjJSaGNtdHRZV2RsYm5SaEp5eGNiaUFnSUNBbkl6VTFObUl5WmljNklDZGtZWEpyYjJ4cGRtVm5jbVZsYmljc1hHNGdJQ0FnSnlObVpqaGpNREFuT2lBblpHRnlhMjl5WVc1blpTY3NYRzRnSUNBZ0p5TTVPVE15WTJNbk9pQW5aR0Z5YTI5eVkyaHBaQ2NzWEc0Z0lDQWdKeU00WWpBd01EQW5PaUFuWkdGeWEzSmxaQ2NzWEc0Z0lDQWdKeU5sT1RrMk4yRW5PaUFuWkdGeWEzTmhiRzF2Ymljc1hHNGdJQ0FnSnlNNFptSmpPR1luT2lBblpHRnlhM05sWVdkeVpXVnVKeXhjYmlBZ0lDQW5JelE0TTJRNFlpYzZJQ2RrWVhKcmMyeGhkR1ZpYkhWbEp5eGNiaUFnSUNBbkl6VmtaR1ppWlNjNklDZGhjWFZoYldGeWFXNWxKeXhjYmlBZ0lDQW5JekU1T0RBd01DYzZJQ2ZRbDlDMTBMdlF0ZEM5MFl2UXVTY3NYRzRnSUNBZ0p5TXlaalJtTkdZbk9pQW5aR0Z5YTNOc1lYUmxaM0poZVNjc1hHNGdJQ0FnSnlNd01HTmxaREVuT2lBblpHRnlhM1IxY25GMWIybHpaU2NzWEc0Z0lDQWdKeU01TkRBd1pETW5PaUFuWkdGeWEzWnBiMnhsZENjc1hHNGdJQ0FnSnlObVpqRTBPVE1uT2lBblpHVmxjSEJwYm1zbkxGeHVJQ0FnSUNjak1EQmlabVptSnpvZ0oyUmxaWEJ6YTNsaWJIVmxKeXhjYmlBZ0lDQW5Jelk1TmprMk9TYzZJQ2RrYVcxbmNtRjVKeXhjYmlBZ0lDQW5JekZsT1RCbVppYzZJQ2RrYjJSblpYSmliSFZsSnl4Y2JpQWdJQ0FuSTJJeU1qSXlNaWM2SUNkbWFYSmxZbkpwWTJzbkxGeHVJQ0FnSUNjalptWm1ZV1l3SnpvZ0oyWnNiM0poYkhkb2FYUmxKeXhjYmlBZ0lDQW5Jekl5T0dJeU1pYzZJQ2RtYjNKbGMzUm5jbVZsYmljc1hHNGdJQ0FnSnlObVpqQXdabVluT2lBblpuVmphSE5wWVNjc1hHNGdJQ0FnSnlOa1kyUmpaR01uT2lBbloyRnBibk5pYjNKdkp5eGNiaUFnSUNBbkkyWTRaamhtWmljNklDZG5hRzl6ZEhkb2FYUmxKeXhjYmlBZ0lDQW5JMlJoWVRVeU1DYzZJQ2RuYjJ4a1pXNXliMlFuTEZ4dUlDQWdJQ2NqWm1aa056QXdKem9nSjJkdmJHUW5MRnh1SUNBZ0lDY2pPREE0TURnd0p6b2dKMmR5WVhrbkxGeHVJQ0FnSUNjak1EQTRNREF3SnpvZ0o5Q1gwTFhRdTlDMTBMM1JpOUM1Snl4Y2JpQWdJQ0FuSTJGa1ptWXlaaWM2SUNkbmNtVmxibmxsYkd4dmR5Y3NYRzRnSUNBZ0p5Tm1NR1ptWmpBbk9pQW5hRzl1Wlhsa1pYY25MRnh1SUNBZ0lDY2pabVkyT1dJMEp6b2dKMmh2ZEhCcGJtc25MRnh1SUNBZ0lDY2pZMlExWXpWakp6b2dKMmx1WkdsaGJuSmxaQ2NzWEc0Z0lDQWdKeU0wWWpBd09ESW5PaUFuYVc1a2FXZHZKeXhjYmlBZ0lDQW5JMlptWm1abU1DYzZJQ2RwZG05eWVTY3NYRzRnSUNBZ0p5Tm1NR1UyT0dNbk9pQW5hMmhoYTJrbkxGeHVJQ0FnSUNjalptWm1NR1kxSnpvZ0oyeGhkbVZ1WkdWeVlteDFjMmduTEZ4dUlDQWdJQ2NqWlRabE5tWmhKem9nSjJ4aGRtVnVaR1Z5Snl4Y2JpQWdJQ0FuSXpkalptTXdNQ2M2SUNkc1lYZHVaM0psWlc0bkxGeHVJQ0FnSUNjalptWm1ZV05rSnpvZ0oyeGxiVzl1WTJocFptWnZiaWNzWEc0Z0lDQWdKeU5oWkdRNFpUWW5PaUFuYkdsbmFIUmliSFZsSnl4Y2JpQWdJQ0FuSTJZd09EQTRNQ2M2SUNkc2FXZG9kR052Y21Gc0p5eGNiaUFnSUNBbkkyVXdabVptWmljNklDZHNhV2RvZEdONVlXNG5MRnh1SUNBZ0lDY2pabUZtWVdReUp6b2dKMnhwWjJoMFoyOXNaR1Z1Y205a2VXVnNiRzkzSnl4Y2JpQWdJQ0FuSTJRelpETmtNeWM2SUNkc2FXZG9kR2R5WVhrbkxGeHVJQ0FnSUNjak9UQmxaVGt3SnpvZ0oyeHBaMmgwWjNKbFpXNG5MRnh1SUNBZ0lDY2pabVppTm1NeEp6b2dKMnhwWjJoMGNHbHVheWNzWEc0Z0lDQWdKeU5tWm1Fd04yRW5PaUFuYkdsbmFIUnpZV3h0YjI0bkxGeHVJQ0FnSUNjak1qQmlNbUZoSnpvZ0oyeHBaMmgwYzJWaFozSmxaVzRuTEZ4dUlDQWdJQ2NqT0RkalpXWmhKem9nSjJ4cFoyaDBjMnQ1WW14MVpTY3NYRzRnSUNBZ0p5TTNOemc0T1Rrbk9pQW5iR2xuYUhSemJHRjBaV2R5WVhrbkxGeHVJQ0FnSUNjallqQmpOR1JsSnpvZ0oyeHBaMmgwYzNSbFpXeGliSFZsSnl4Y2JpQWdJQ0FuSTJabVptWmxNQ2M2SUNkc2FXZG9kSGxsYkd4dmR5Y3NYRzRnSUNBZ0p5TXdNR1ptTURBbk9pQW5iR2x0WlNjc1hHNGdJQ0FnSnlNek1tTmtNekluT2lBbmJHbHRaV2R5WldWdUp5eGNiaUFnSUNBbkkyWmhaakJsTmljNklDZHNhVzVsYmljc1hHNGdJQ0FnSnlNNE1EQXdNREFuT2lBbmJXRnliMjl1Snl4Y2JpQWdJQ0FuSXpZMlkyUmhZU2M2SUNkdFpXUnBkVzFoY1hWaGJXRnlhVzVsSnl4Y2JpQWdJQ0FuSXpBd01EQmpaQ2M2SUNkdFpXUnBkVzFpYkhWbEp5eGNiaUFnSUNBbkkySmhOVFZrTXljNklDZHRaV1JwZFcxdmNtTm9hV1FuTEZ4dUlDQWdJQ2NqT1RNM01HUmlKem9nSjIxbFpHbDFiWEIxY25Cc1pTY3NYRzRnSUNBZ0p5TXpZMkl6TnpFbk9pQW5iV1ZrYVhWdGMyVmhaM0psWlc0bkxGeHVJQ0FnSUNjak4ySTJPR1ZsSnpvZ0oyMWxaR2wxYlhOc1lYUmxZbXgxWlNjc1hHNGdJQ0FnSnlNd01HWmhPV0VuT2lBbmJXVmthWFZ0YzNCeWFXNW5aM0psWlc0bkxGeHVJQ0FnSUNjak5EaGtNV05qSnpvZ0oyMWxaR2wxYlhSMWNuRjFiMmx6WlNjc1hHNGdJQ0FnSnlOak56RTFPRFVuT2lBbmJXVmthWFZ0ZG1sdmJHVjBjbVZrSnl4Y2JpQWdJQ0FuSXpFNU1UazNNQ2M2SUNkdGFXUnVhV2RvZEdKc2RXVW5MRnh1SUNBZ0lDY2paalZtWm1aaEp6b2dKMjFwYm5SamNtVmhiU2NzWEc0Z0lDQWdKeU5tWm1VMFpURW5PaUFuYldsemRIbHliM05sSnl4Y2JpQWdJQ0FuSTJabVpUUmlOU2M2SUNkdGIyTmpZWE5wYmljc1hHNGdJQ0FnSnlObVptUmxZV1FuT2lBbmJtRjJZV3B2ZDJocGRHVW5MRnh1SUNBZ0lDY2pNREF3TURnd0p6b2dKMjVoZG5rbkxGeHVJQ0FnSUNjalptUm1OV1UySnpvZ0oyOXNaR3hoWTJVbkxGeHVJQ0FnSUNjak9EQTRNREF3SnpvZ0oyOXNhWFpsSnl4Y2JpQWdJQ0FuSXpaaU9HVXlNeWM2SUNkdmJHbDJaV1J5WVdJbkxGeHVJQ0FnSUNjalptWmhOVEF3SnpvZ0oyOXlZVzVuWlNjc1hHNGdJQ0FnSnlObVpqUTFNREFuT2lBbmIzSmhibWRsY21Wa0p5eGNiaUFnSUNBbkkyUmhOekJrTmljNklDZHZjbU5vYVdRbkxGeHVJQ0FnSUNjalpXVmxPR0ZoSnpvZ0ozQmhiR1ZuYjJ4a1pXNXliMlFuTEZ4dUlDQWdJQ2NqT1RobVlqazRKem9nSjNCaGJHVm5jbVZsYmljc1hHNGdJQ0FnSnlOaFptVmxaV1VuT2lBbmNHRnNaWFIxY25GMWIybHpaU2NzWEc0Z0lDQWdKeU5rWWpjd09UTW5PaUFuY0dGc1pYWnBiMnhsZEhKbFpDY3NYRzRnSUNBZ0p5Tm1abVZtWkRVbk9pQW5jR0Z3WVhsaGQyaHBjQ2NzWEc0Z0lDQWdKeU5tWm1SaFlqa25PaUFuY0dWaFkyaHdkV1ptSnl4Y2JpQWdJQ0FuSTJOa09EVXpaaWM2SUNkd1pYSjFKeXhjYmlBZ0lDQW5JMlptWXpCallpYzZJQ2R3YVc1ckp5eGNiaUFnSUNBbkkyUmtZVEJrWkNjNklDZHdiSFZ0Snl4Y2JpQWdJQ0FuSTJJd1pUQmxOaWM2SUNkd2IzZGtaWEppYkhWbEp5eGNiaUFnSUNBbkl6Z3dNREE0TUNjNklDZHdkWEp3YkdVbkxGeHVJQ0FnSUNjak5qWXpNems1SnpvZ0ozSmxZbVZqWTJGd2RYSndiR1VuTEZ4dUlDQWdJQ2NqWm1Zd01EQXdKem9nSjlDYTBZRFFzTkdCMEwzUmk5QzVKeXhjYmlBZ0lDQW5JMkpqT0dZNFppYzZJQ2R5YjNONVluSnZkMjRuTEZ4dUlDQWdJQ2NqTkRFMk9XVXhKem9nSjNKdmVXRnNZbXgxWlNjc1hHNGdJQ0FnSnlNNFlqUTFNVE1uT2lBbmMyRmtaR3hsWW5KdmQyNG5MRnh1SUNBZ0lDY2pabUU0TURjeUp6b2dKM05oYkcxdmJpY3NYRzRnSUNBZ0p5Tm1OR0UwTmpBbk9pQW5jMkZ1WkhsaWNtOTNiaWNzWEc0Z0lDQWdKeU15WlRoaU5UY25PaUFuYzJWaFozSmxaVzRuTEZ4dUlDQWdJQ2NqWm1abU5XVmxKem9nSjNObFlYTm9aV3hzSnl4Y2JpQWdJQ0FuSTJFd05USXlaQ2M2SUNkemFXVnVibUVuTEZ4dUlDQWdJQ2NqWXpCak1HTXdKem9nSjNOcGJIWmxjaWNzWEc0Z0lDQWdKeU00TjJObFpXSW5PaUFuYzJ0NVlteDFaU2NzWEc0Z0lDQWdKeU0yWVRWaFkyUW5PaUFuYzJ4aGRHVmliSFZsSnl4Y2JpQWdJQ0FuSXpjd09EQTVNQ2M2SUNkemJHRjBaV2R5WVhrbkxGeHVJQ0FnSUNjalptWm1ZV1poSnpvZ0ozTnViM2NuTEZ4dUlDQWdJQ2NqTURCbVpqZG1Kem9nSjNOd2NtbHVaMmR5WldWdUp5eGNiaUFnSUNBbkl6UTJPREppTkNjNklDZHpkR1ZsYkdKc2RXVW5MRnh1SUNBZ0lDY2paREppTkRoakp6b2dKM1JoYmljc1hHNGdJQ0FnSnlNd01EZ3dPREFuT2lBbmRHVmhiQ2NzWEc0Z0lDQWdKeU5rT0dKbVpEZ25PaUFuZEdocGMzUnNaU2NzWEc0Z0lDQWdKeU5tWmpZek5EY25PaUFuZEc5dFlYUnZKeXhjYmlBZ0lDQW5JelF3WlRCa01DYzZJQ2QwZFhKeGRXOXBjMlVuTEZ4dUlDQWdJQ2NqWldVNE1tVmxKem9nSjNacGIyeGxkQ2NzWEc0Z0lDQWdKeU5tTldSbFlqTW5PaUFuZDJobFlYUW5MRnh1SUNBZ0lDY2pabVptWm1abUp6b2dKOUNSMExYUXU5R0wwTGtuTEZ4dUlDQWdJQ2NqWmpWbU5XWTFKem9nSjNkb2FYUmxjMjF2YTJVbkxGeHVJQ0FnSUNjalptWm1aakF3SnpvZ0o5Q1cwTFhRdTlHQzBZdlF1U2NzWEc0Z0lDQWdKeU01WVdOa016SW5PaUFuMEsvUXNkQzcwTDdSaDlDOTBMNHQwTGZRdGRDNzBMWFF2ZEdMMExrbkxGeHVJQ0FnSUNjalpUVTRNREF3SnpvZ0o5Q2MwTDdSZ05DNjBMN1FzdEM5MFl2UXVTY3NYRzRnSUNBZ0p5TmpZekF3TURBbk9pQW4wSkhRdnRHQjBZTFF2dEM5MFlIUXV0QzQwTGt0MExyUmdOQ3cwWUhRdmRHTDBMa25MRnh1SUNBZ0lDY2pNek13TURBd0p6b2dKOUNhMEw3UmdOQzQwWWZRdmRDMTBMTFJpOUM1Snl4Y2JpQWdJQ0FuSXpkbU9EQXdNQ2M2SUNmUW50QzcwTGpRc3RDNjBMN1FzdEdMMExrbkxGeHVJQ0FnSUNjak9Ua3dNREF3SnpvZ0o5Q2gwTERRdmRDejBZRFF1TkdQSnl4Y2JpQWdJQ0FuSTJJeU9EQXdNQ2M2SUNmUW90QzEwTHpRdmRDK0xkQzMwTDdRdTlDKzBZTFF2dEM1Snl4Y2JpQWdJQ0FuSXpSak9EQXdNQ2M2SUNmUW5kQzEwTGJRdmRDK0xkQyswTHZRdU5DeTBMclF2dEN5MFl2UXVTY3NYRzRnSUNBZ0p5TTJOakF3TURBbk9pQW4wSnJRdnRHQTBMalJoOUM5MExYUXN0QytMZEM4MExEUXU5QzQwTDNRdnRDeTBZdlF1U2NzWEc0Z0lDQWdKeU0yWXpZd01EQW5PaUFuMEo3UXU5QzQwTExRdXRDKzBMTFJpOUM1Snl4Y2JpQWdJQ0FuSXpaaE5UVmpNeWM2SUNmUW45R0QwWURRdjlHRDBZRFF2ZEMrTGRHQjBMalF2ZEM0MExrbkxGeHVJQ0FnSUNjak5qZGpPR1kySnpvZ0o5Q3YwWURRdXRDK0xkQ3owTDdRdTlHRDBMSFF2dEM1Snl4Y2JpQWdJQ0FuSXpRNU1tWTFZeWM2SUNmUWs5QzcwWVBRc2RDKzBMclF1TkM1TGRHRTBMalF2dEM3MExYUmd0QyswTExSaTlDNUp5eGNiaUFnSUNBbkl6VmpaREZsWXljNklDZlFrOUMrMEx2Umc5Q3gwTDdRdVNjc1hHNGdJQ0FnSnlNeE0yWm1OREluT2lBbjBLL1JnTkM2MEw0dDBMZlF0ZEM3MExYUXZkR0wwTGtuTEZ4dUlDQWdJQ2NqTVdSaE5ESTJKem9nSjlDZjBMRFJnZEdDMExYUXU5R00wTDNRdmkzUXQ5QzEwTHZRdGRDOTBZdlF1U2NzWEc0Z0lDQWdKeU15Wm1SaVl6QW5PaUFuMEpIUXVOR0EwWTdRdDlDKzBMTFJpOUM1Snl4Y2JpQWdJQ0FuSXpNNE5qYzBPQ2M2SUNmUW90QzEwTHpRdmRDK0xkQzMwTFhRdTlDMTBMM1JpOUM1Snl4Y2JpQWdJQ0FuSXpVNVlUbGpNU2M2SUNmUW90QzEwTHpRdmRDK0xkQ3owTDdRdTlHRDBMSFF2dEM1Snl4Y2JpQWdJQ0FuSXpFME5qWTJOaWM2SUNmUW90QzEwTHpRdmRDK0xkQ3gwTGpSZ05HTzBMZlF2dEN5MFl2UXVTY3NYRzRnSUNBZ0p5TmpPREE1T1RNbk9pQW4wS1RRdU5DKzBMdlF0ZEdDMEw3UXN0QytMZEM2MFlEUXNOR0IwTDNSaTlDNUp5eGNiaUFnSUNBbkkyWmhNR0ptT0NjNklDZlFwTkdEMExyUmdkQzQwWThuTEZ4dUlDQWdJQ2NqTVRrd01UTXlKem9nSjlDaTBMWFF2TkM5MEw0dDBZVFF1TkMrMEx2UXRkR0MwTDdRc3RHTDBMa25MRnh1SUNBZ0lDY2pNekl3TWpZeUp6b2dKOUNpMExYUXZOQzkwTDR0MFlUUXVOQyswTHZRdGRHQzBMN1FzdEdMMExrbkxGeHVJQ0FnSUNjak5HSXdNemszSnpvZ0o5Q1kwTDNRdE5DNDBMUFF2aWNzWEc0Z0lDQWdKeU5oWmpBNE5qRW5PaUFuMEtEUXZ0QzMwTDdRc3RDdzBZTFF2aTNRdTlDNDBMdlF2dEN5MFl2UXVTY3NYRzRnSUNBZ0p5TmxNVEJoWXpZbk9pQW4wSnpRc05DNzBMalF2ZEMrMExMUmk5QzVKeXhjYmlBZ0lDQW5JemsyTURjeVpTYzZJQ2ZRa2RHRDBZRFFzOUdEMEwzUXROR0IwTHJRdU5DNUp5eGNiaUFnSUNBbkl6WTBNRFJqWVNjNklDZlFuOUdEMFlEUXY5R0QwWURRdmRDK0xkR0IwTGpRdmRDNDBMa25MRnh1SUNBZ0lDY2pOMlF3Tldaakp6b2dKOUNrMExqUXZ0QzcwTFhSZ3RDKzBMTFJpOUM1Snl4Y2JpQWdJQ0FuSXpNeU1ESTJOU2M2SUNmUW90QzEwTHpRdmRHTDBMa2cwTGpRdmRDMDBMalFzOUMrSnl4Y2JpQWdJQ0FuSXpBbk9pQW5JekF3TUNjc1hHNGdJQ0FnWENKdmNtRnVaMlZjSWpvZ1hDTFFudEdBMExEUXZkQzIwTFhRc3RHTDBMbGNJaXhjYmlBZ0lDQmNJbkIxY25Cc1pWd2lPaUJjSXRDazBMalF2dEM3MExYUmd0QyswTExSaTlDNVhDSXNYRzRnSUNBZ1hDSWpOR0psTnpSa1hDSTZJRndpMEp6UXNOQzcwTERSaGRDNDBZTFF2dEN5MFl2UXVWd2lMRnh1SUNBZ0lGd2lJelkxTXpRMk5sd2lPaUJjSXRDZjBZUFJnTkMvMFlQUmdOQzkwWXZRdVZ3aUxGeHVJQ0FnSUZ3aUl6TXlPV0V6TTF3aU9pQmNJdENYMExYUXU5QzEwTDNSaTlDNVhDSXNYRzRnSUNBZ1hDSWpNVGswWkRGaFhDSTZJRndpMEtMUXRkQzgwTDNRdmkzUXQ5QzEwTHZRdGRDOTBZdlF1VndpTEZ4dUlDQWdJRndpSTJaa01ESm1abHdpT2lCY0l0Q2cwTDdRdDlDKzBMTFJpOUM1WENJc1hHNGdJQ0FnWENJallqRXhZbUl6WENJNklGd2kwS1RRdU5DKzBMdlF0ZEdDMEw3UXN0QytMZEN4MExEUXV0QzcwTERRdHRDdzBMM1F2ZEdMMExsY0lpeGNiaUFnSUNCY0lpTmxNMkkxWlRaY0lqb2dYQ0xRb2RDeTBMWFJndEM3MEw0dDBZRFF2dEMzMEw3UXN0R0wwTGxjSWl4Y2JuMDdYRzVsZUhCdmNuUnpMbUZzYkVOdmJHOXljeUE5SUdGc2JFTnZiRzl5Y3p0Y2JpSXNJblpoY2lCaGNHa2dQU0J5WlhGMWFYSmxLRndpSVM0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5emRIbHNaUzFzYjJGa1pYSXZaR2x6ZEM5eWRXNTBhVzFsTDJsdWFtVmpkRk4wZVd4bGMwbHVkRzlUZEhsc1pWUmhaeTVxYzF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiMjUwWlc1MElEMGdjbVZ4ZFdseVpTaGNJaUVoTGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDIxcGJta3RZM056TFdWNGRISmhZM1F0Y0d4MVoybHVMMlJwYzNRdmJHOWhaR1Z5TG1weklTNHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpjM010Ykc5aFpHVnlMMlJwYzNRdlkycHpMbXB6SVM0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5d2IzTjBZM056TFd4dllXUmxjaTl6Y21NdmFXNWtaWGd1YW5NL1AzSmxaaTB0TlMweklTNHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OXpZWE56TFd4dllXUmxjaTlrYVhOMEwyTnFjeTVxY3lFdUwzTnNhV1JsY2k1elkzTnpYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpXNTBJRDBnWTI5dWRHVnVkQzVmWDJWelRXOWtkV3hsSUQ4Z1kyOXVkR1Z1ZEM1a1pXWmhkV3gwSURvZ1kyOXVkR1Z1ZER0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyNTBaVzUwSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWlc1MElEMGdXMXR0YjJSMWJHVXVhV1FzSUdOdmJuUmxiblFzSUNjblhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiblpoY2lCdmNIUnBiMjV6SUQwZ2UzMDdYRzVjYm05d2RHbHZibk11YVc1elpYSjBJRDBnWENKb1pXRmtYQ0k3WEc1dmNIUnBiMjV6TG5OcGJtZHNaWFJ2YmlBOUlHWmhiSE5sTzF4dVhHNTJZWElnZFhCa1lYUmxJRDBnWVhCcEtHTnZiblJsYm5Rc0lHOXdkR2x2Ym5NcE8xeHVYRzVjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamIyNTBaVzUwTG14dlkyRnNjeUI4ZkNCN2ZUc2lYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjkiLCJpbXBvcnQgeyBQYWdpbmF0aW9uIH0gZnJvbSAnLi9QYWdpbmF0aW9uJztcblxuY29uc3QgJHdyYXBwZXJzID0gJCgnLmpzLXBhZ2luYXRpb24nKTtcblxuJHdyYXBwZXJzLmVhY2goKF8sIGVsZW1lbnQpID0+IHtcbiAgbmV3IFBhZ2luYXRpb24oJChlbGVtZW50KSk7XG59KTtcbiIsIi8qXG4gKiBwYWdpbmF0aW9uLmpzIDIuMS40XG4gKiBBIGpRdWVyeSBwbHVnaW4gdG8gcHJvdmlkZSBzaW1wbGUgeWV0IGZ1bGx5IGN1c3RvbWlzYWJsZSBwYWdpbmF0aW9uLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N1cGVyUmF5dGluL3BhZ2luYXRpb25qc1xuICpcbiAqIEhvbWVwYWdlOiBodHRwOi8vcGFnaW5hdGlvbi5qcy5vcmdcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMTAwLCBzdXBlclJheXRpblxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG5cbihmdW5jdGlvbihnbG9iYWwsICQpIHtcblxuICBpZiAodHlwZW9mICQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3dFcnJvcignUGFnaW5hdGlvbiByZXF1aXJlcyBqUXVlcnkuJyk7XG4gIH1cblxuICB2YXIgcGx1Z2luTmFtZSA9ICdwYWdpbmF0aW9uJztcblxuICB2YXIgcGx1Z2luSG9va01ldGhvZCA9ICdhZGRIb29rJztcblxuICB2YXIgZXZlbnRQcmVmaXggPSAnX19wYWdpbmF0aW9uLSc7XG5cbiAgLy8gQ29uZmxpY3QsIHVzZSBiYWNrdXBcbiAgaWYgKCQuZm4ucGFnaW5hdGlvbikge1xuICAgIHBsdWdpbk5hbWUgPSAncGFnaW5hdGlvbjInO1xuICB9XG5cbiAgJC5mbltwbHVnaW5OYW1lXSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXIgPSAkKHRoaXMpO1xuXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSAkLmV4dGVuZCh7fSwgJC5mbltwbHVnaW5OYW1lXS5kZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICB2YXIgcGFnaW5hdGlvbiA9IHtcblxuICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyBDYWNoZSBhdHRyaWJ1dGVzIG9mIGN1cnJlbnQgaW5zdGFuY2VcbiAgICAgICAgaWYgKCFjb250YWluZXIuZGF0YSgncGFnaW5hdGlvbicpKSB7XG4gICAgICAgICAgY29udGFpbmVyLmRhdGEoJ3BhZ2luYXRpb24nLCB7fSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5jYWxsSG9vaygnYmVmb3JlSW5pdCcpID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFBhZ2luYXRpb24gaGFzIGJlZW4gaW5pdGlhbGl6ZWQsIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGNvbnRhaW5lci5kYXRhKCdwYWdpbmF0aW9uJykuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAkKCcucGFnaW5hdGlvbmpzJywgY29udGFpbmVyKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZXRoZXIgdG8gZGlzYWJsZSBQYWdpbmF0aW9uIGF0IHRoZSBpbml0aWFsaXphdGlvblxuICAgICAgICBzZWxmLmRpc2FibGVkID0gISFhdHRyaWJ1dGVzLmRpc2FibGVkO1xuXG4gICAgICAgIC8vIE1vZGVsIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICB2YXIgbW9kZWwgPSBzZWxmLm1vZGVsID0ge1xuICAgICAgICAgIHBhZ2VSYW5nZTogYXR0cmlidXRlcy5wYWdlUmFuZ2UsXG4gICAgICAgICAgcGFnZVNpemU6IGF0dHJpYnV0ZXMucGFnZVNpemVcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBkYXRhU291cmNlYHMgdHlwZSBpcyB1bmtub3duLCBwYXJzZSBpdCB0byBmaW5kIHRydWUgZGF0YVxuICAgICAgICBzZWxmLnBhcnNlRGF0YVNvdXJjZShhdHRyaWJ1dGVzLmRhdGFTb3VyY2UsIGZ1bmN0aW9uKGRhdGFTb3VyY2UpIHtcblxuICAgICAgICAgIC8vIEN1cnJlbnRseSBpbiBhc3luY2hyb25vdXMgbW9kZVxuICAgICAgICAgIHNlbGYuaXNBc3luYyA9IEhlbHBlcnMuaXNTdHJpbmcoZGF0YVNvdXJjZSk7XG4gICAgICAgICAgaWYgKEhlbHBlcnMuaXNBcnJheShkYXRhU291cmNlKSkge1xuICAgICAgICAgICAgbW9kZWwudG90YWxOdW1iZXIgPSBhdHRyaWJ1dGVzLnRvdGFsTnVtYmVyID0gZGF0YVNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ3VycmVudGx5IGluIGFzeW5jaHJvbm91cyBtb2RlIGFuZCBhIHRvdGFsTnVtYmVyTG9jYXRvciBpcyBzcGVjaWZpZWRcbiAgICAgICAgICBzZWxmLmlzRHluYW1pY1RvdGFsTnVtYmVyID0gc2VsZi5pc0FzeW5jICYmIGF0dHJpYnV0ZXMudG90YWxOdW1iZXJMb2NhdG9yO1xuXG4gICAgICAgICAgdmFyIGVsID0gc2VsZi5yZW5kZXIodHJ1ZSk7XG5cbiAgICAgICAgICAvLyBBZGQgZXh0cmEgY2xhc3NOYW1lIHRvIHRoZSBwYWdpbmF0aW9uIGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgZWwuYWRkQ2xhc3MoYXR0cmlidXRlcy5jbGFzc05hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vZGVsLmVsID0gZWw7XG5cbiAgICAgICAgICAvLyBBcHBlbmQvcHJlcGVuZCBwYWdpbmF0aW9uIGVsZW1lbnQgdG8gdGhlIGNvbnRhaW5lclxuICAgICAgICAgIGNvbnRhaW5lclthdHRyaWJ1dGVzLnBvc2l0aW9uID09PSAnYm90dG9tJyA/ICdhcHBlbmQnIDogJ3ByZXBlbmQnXShlbCk7XG5cbiAgICAgICAgICAvLyBCaW5kIGV2ZW50c1xuICAgICAgICAgIHNlbGYub2JzZXJ2ZXIoKTtcblxuICAgICAgICAgIC8vIFBhZ2luYXRpb24gaXMgY3VycmVudGx5IGluaXRpYWxpemVkXG4gICAgICAgICAgY29udGFpbmVyLmRhdGEoJ3BhZ2luYXRpb24nKS5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgICAvLyBXaWxsIGJlIGludm9rZWQgYWZ0ZXIgaW5pdGlhbGl6ZWRcbiAgICAgICAgICBzZWxmLmNhbGxIb29rKCdhZnRlckluaXQnLCBlbCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgcmVuZGVyOiBmdW5jdGlvbihpc0Jvb3QpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgbW9kZWwgPSBzZWxmLm1vZGVsO1xuICAgICAgICB2YXIgZWwgPSBtb2RlbC5lbCB8fCAkKCc8ZGl2IGNsYXNzPVwicGFnaW5hdGlvbmpzXCI+PC9kaXY+Jyk7XG4gICAgICAgIHZhciBpc0ZvcmNlZCA9IGlzQm9vdCAhPT0gdHJ1ZTtcblxuICAgICAgICBzZWxmLmNhbGxIb29rKCdiZWZvcmVSZW5kZXInLCBpc0ZvcmNlZCk7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRQYWdlID0gbW9kZWwucGFnZU51bWJlciB8fCBhdHRyaWJ1dGVzLnBhZ2VOdW1iZXI7XG4gICAgICAgIHZhciBwYWdlUmFuZ2UgPSBhdHRyaWJ1dGVzLnBhZ2VSYW5nZSB8fCAwO1xuICAgICAgICB2YXIgdG90YWxQYWdlID0gc2VsZi5nZXRUb3RhbFBhZ2UoKTtcblxuICAgICAgICB2YXIgcmFuZ2VTdGFydCA9IGN1cnJlbnRQYWdlIC0gcGFnZVJhbmdlO1xuICAgICAgICB2YXIgcmFuZ2VFbmQgPSBjdXJyZW50UGFnZSArIHBhZ2VSYW5nZTtcblxuICAgICAgICBpZiAocmFuZ2VFbmQgPiB0b3RhbFBhZ2UpIHtcbiAgICAgICAgICByYW5nZUVuZCA9IHRvdGFsUGFnZTtcbiAgICAgICAgICByYW5nZVN0YXJ0ID0gdG90YWxQYWdlIC0gcGFnZVJhbmdlICogMjtcbiAgICAgICAgICByYW5nZVN0YXJ0ID0gcmFuZ2VTdGFydCA8IDEgPyAxIDogcmFuZ2VTdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYW5nZVN0YXJ0IDw9IDEpIHtcbiAgICAgICAgICByYW5nZVN0YXJ0ID0gMTtcbiAgICAgICAgICByYW5nZUVuZCA9IE1hdGgubWluKHBhZ2VSYW5nZSAqIDIgKyAxLCB0b3RhbFBhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwuaHRtbChzZWxmLmdlbmVyYXRlSFRNTCh7XG4gICAgICAgICAgY3VycmVudFBhZ2U6IGN1cnJlbnRQYWdlLFxuICAgICAgICAgIHBhZ2VSYW5nZTogcGFnZVJhbmdlLFxuICAgICAgICAgIHJhbmdlU3RhcnQ6IHJhbmdlU3RhcnQsXG4gICAgICAgICAgcmFuZ2VFbmQ6IHJhbmdlRW5kXG4gICAgICAgIH0pKTtcblxuICAgICAgICAvLyBUaGVyZSBpcyBvbmx5IG9uZSBwYWdlXG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmhpZGVXaGVuTGVzc1RoYW5PbmVQYWdlKSB7XG4gICAgICAgICAgZWxbdG90YWxQYWdlIDw9IDEgPyAnaGlkZScgOiAnc2hvdyddKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmNhbGxIb29rKCdhZnRlclJlbmRlcicsIGlzRm9yY2VkKTtcblxuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9LFxuXG4gICAgICAvLyBHZW5lcmF0ZSBIVE1MIG9mIHRoZSBwYWdlc1xuICAgICAgZ2VuZXJhdGVQYWdlTnVtYmVyc0hUTUw6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY3VycmVudFBhZ2UgPSBhcmdzLmN1cnJlbnRQYWdlO1xuICAgICAgICB2YXIgdG90YWxQYWdlID0gc2VsZi5nZXRUb3RhbFBhZ2UoKTtcbiAgICAgICAgdmFyIHJhbmdlU3RhcnQgPSBhcmdzLnJhbmdlU3RhcnQ7XG4gICAgICAgIHZhciByYW5nZUVuZCA9IGFyZ3MucmFuZ2VFbmQ7XG4gICAgICAgIHZhciBodG1sID0gJyc7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIHZhciBwYWdlTGluayA9IGF0dHJpYnV0ZXMucGFnZUxpbms7XG4gICAgICAgIHZhciBlbGxpcHNpc1RleHQgPSBhdHRyaWJ1dGVzLmVsbGlwc2lzVGV4dDtcblxuICAgICAgICB2YXIgY2xhc3NQcmVmaXggPSBhdHRyaWJ1dGVzLmNsYXNzUHJlZml4O1xuICAgICAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gYXR0cmlidXRlcy5hY3RpdmVDbGFzc05hbWU7XG4gICAgICAgIHZhciBkaXNhYmxlQ2xhc3NOYW1lID0gYXR0cmlidXRlcy5kaXNhYmxlQ2xhc3NOYW1lO1xuXG4gICAgICAgIC8vIERpc2FibGUgcGFnZSByYW5nZSwgZGlzcGxheSBhbGwgdGhlIHBhZ2VzXG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLnBhZ2VSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGZvciAoaSA9IDE7IGkgPD0gdG90YWxQYWdlOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09IGN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICAgIGh0bWwgKz0gJzxsaSBjbGFzcz1cIicgKyBjbGFzc1ByZWZpeCArICctcGFnZSBKLXBhZ2luYXRpb25qcy1wYWdlICcgKyBhY3RpdmVDbGFzc05hbWUgKyAnXCIgZGF0YS1udW09XCInICsgaSArICdcIj48YT4nICsgaSArICc8XFwvYT48XFwvbGk+JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGh0bWwgKz0gJzxsaSBjbGFzcz1cIicgKyBjbGFzc1ByZWZpeCArICctcGFnZSBKLXBhZ2luYXRpb25qcy1wYWdlXCIgZGF0YS1udW09XCInICsgaSArICdcIj48YSBocmVmPVwiJyArIHBhZ2VMaW5rICsgJ1wiPicgKyBpICsgJzxcXC9hPjxcXC9saT4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYW5nZVN0YXJ0IDw9IDMpIHtcbiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcmFuZ2VTdGFydDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA9PSBjdXJyZW50UGFnZSkge1xuICAgICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLXBhZ2UgSi1wYWdpbmF0aW9uanMtcGFnZSAnICsgYWN0aXZlQ2xhc3NOYW1lICsgJ1wiIGRhdGEtbnVtPVwiJyArIGkgKyAnXCI+PGE+JyArIGkgKyAnPFxcL2E+PFxcL2xpPic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLXBhZ2UgSi1wYWdpbmF0aW9uanMtcGFnZVwiIGRhdGEtbnVtPVwiJyArIGkgKyAnXCI+PGEgaHJlZj1cIicgKyBwYWdlTGluayArICdcIj4nICsgaSArICc8XFwvYT48XFwvbGk+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuc2hvd0ZpcnN0T25FbGxpcHNpc1Nob3cpIHtcbiAgICAgICAgICAgIGh0bWwgKz0gJzxsaSBjbGFzcz1cIicgKyBjbGFzc1ByZWZpeCArICctcGFnZSAnICsgY2xhc3NQcmVmaXggKyAnLWZpcnN0IEotcGFnaW5hdGlvbmpzLXBhZ2VcIiBkYXRhLW51bT1cIjFcIj48YSBocmVmPVwiJyArIHBhZ2VMaW5rICsgJ1wiPjE8XFwvYT48XFwvbGk+JztcbiAgICAgICAgICB9XG4gICAgICAgICAgaHRtbCArPSAnPGxpIGNsYXNzPVwiJyArIGNsYXNzUHJlZml4ICsgJy1lbGxpcHNpcyAnICsgZGlzYWJsZUNsYXNzTmFtZSArICdcIj48YT4nICsgZWxsaXBzaXNUZXh0ICsgJzxcXC9hPjxcXC9saT4nO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gcmFuZ2VTdGFydDsgaSA8PSByYW5nZUVuZDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgPT0gY3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgIGh0bWwgKz0gJzxsaSBjbGFzcz1cIicgKyBjbGFzc1ByZWZpeCArICctcGFnZSBKLXBhZ2luYXRpb25qcy1wYWdlICcgKyBhY3RpdmVDbGFzc05hbWUgKyAnXCIgZGF0YS1udW09XCInICsgaSArICdcIj48YT4nICsgaSArICc8XFwvYT48XFwvbGk+JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHRtbCArPSAnPGxpIGNsYXNzPVwiJyArIGNsYXNzUHJlZml4ICsgJy1wYWdlIEotcGFnaW5hdGlvbmpzLXBhZ2VcIiBkYXRhLW51bT1cIicgKyBpICsgJ1wiPjxhIGhyZWY9XCInICsgcGFnZUxpbmsgKyAnXCI+JyArIGkgKyAnPFxcL2E+PFxcL2xpPic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJhbmdlRW5kID49IHRvdGFsUGFnZSAtIDIpIHtcbiAgICAgICAgICBmb3IgKGkgPSByYW5nZUVuZCArIDE7IGkgPD0gdG90YWxQYWdlOyBpKyspIHtcbiAgICAgICAgICAgIGh0bWwgKz0gJzxsaSBjbGFzcz1cIicgKyBjbGFzc1ByZWZpeCArICctcGFnZSBKLXBhZ2luYXRpb25qcy1wYWdlXCIgZGF0YS1udW09XCInICsgaSArICdcIj48YSBocmVmPVwiJyArIHBhZ2VMaW5rICsgJ1wiPicgKyBpICsgJzxcXC9hPjxcXC9saT4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLWVsbGlwc2lzICcgKyBkaXNhYmxlQ2xhc3NOYW1lICsgJ1wiPjxhPicgKyBlbGxpcHNpc1RleHQgKyAnPFxcL2E+PFxcL2xpPic7XG5cbiAgICAgICAgICBpZiAoYXR0cmlidXRlcy5zaG93TGFzdE9uRWxsaXBzaXNTaG93KSB7XG4gICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLXBhZ2UgJyArIGNsYXNzUHJlZml4ICsgJy1sYXN0IEotcGFnaW5hdGlvbmpzLXBhZ2VcIiBkYXRhLW51bT1cIicgKyB0b3RhbFBhZ2UgKyAnXCI+PGEgaHJlZj1cIicgKyBwYWdlTGluayArICdcIj4nICsgdG90YWxQYWdlICsgJzxcXC9hPjxcXC9saT4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBodG1sO1xuICAgICAgfSxcblxuICAgICAgLy8gR2VuZXJhdGUgSFRNTCBjb250ZW50IGZyb20gdGhlIHRlbXBsYXRlXG4gICAgICBnZW5lcmF0ZUhUTUw6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY3VycmVudFBhZ2UgPSBhcmdzLmN1cnJlbnRQYWdlO1xuICAgICAgICB2YXIgdG90YWxQYWdlID0gc2VsZi5nZXRUb3RhbFBhZ2UoKTtcblxuICAgICAgICB2YXIgdG90YWxOdW1iZXIgPSBzZWxmLmdldFRvdGFsTnVtYmVyKCk7XG5cbiAgICAgICAgdmFyIHNob3dQcmV2aW91cyA9IGF0dHJpYnV0ZXMuc2hvd1ByZXZpb3VzO1xuICAgICAgICB2YXIgc2hvd05leHQgPSBhdHRyaWJ1dGVzLnNob3dOZXh0O1xuICAgICAgICB2YXIgc2hvd1BhZ2VOdW1iZXJzID0gYXR0cmlidXRlcy5zaG93UGFnZU51bWJlcnM7XG4gICAgICAgIHZhciBzaG93TmF2aWdhdG9yID0gYXR0cmlidXRlcy5zaG93TmF2aWdhdG9yO1xuICAgICAgICB2YXIgc2hvd0dvSW5wdXQgPSBhdHRyaWJ1dGVzLnNob3dHb0lucHV0O1xuICAgICAgICB2YXIgc2hvd0dvQnV0dG9uID0gYXR0cmlidXRlcy5zaG93R29CdXR0b247XG5cbiAgICAgICAgdmFyIHBhZ2VMaW5rID0gYXR0cmlidXRlcy5wYWdlTGluaztcbiAgICAgICAgdmFyIHByZXZUZXh0ID0gYXR0cmlidXRlcy5wcmV2VGV4dDtcbiAgICAgICAgdmFyIG5leHRUZXh0ID0gYXR0cmlidXRlcy5uZXh0VGV4dDtcbiAgICAgICAgdmFyIGdvQnV0dG9uVGV4dCA9IGF0dHJpYnV0ZXMuZ29CdXR0b25UZXh0O1xuXG4gICAgICAgIHZhciBjbGFzc1ByZWZpeCA9IGF0dHJpYnV0ZXMuY2xhc3NQcmVmaXg7XG4gICAgICAgIHZhciBkaXNhYmxlQ2xhc3NOYW1lID0gYXR0cmlidXRlcy5kaXNhYmxlQ2xhc3NOYW1lO1xuICAgICAgICB2YXIgdWxDbGFzc05hbWUgPSBhdHRyaWJ1dGVzLnVsQ2xhc3NOYW1lO1xuXG4gICAgICAgIHZhciBodG1sID0gJyc7XG4gICAgICAgIHZhciBnb0lucHV0ID0gJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiSi1wYWdpbmF0aW9uanMtZ28tcGFnZW51bWJlclwiPic7XG4gICAgICAgIHZhciBnb0J1dHRvbiA9ICc8aW5wdXQgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiSi1wYWdpbmF0aW9uanMtZ28tYnV0dG9uXCIgdmFsdWU9XCInICsgZ29CdXR0b25UZXh0ICsgJ1wiPic7XG4gICAgICAgIHZhciBmb3JtYXR0ZWRTdHJpbmc7XG5cbiAgICAgICAgdmFyIGZvcm1hdE5hdmlnYXRvciA9ICQuaXNGdW5jdGlvbihhdHRyaWJ1dGVzLmZvcm1hdE5hdmlnYXRvcikgPyBhdHRyaWJ1dGVzLmZvcm1hdE5hdmlnYXRvcihjdXJyZW50UGFnZSwgdG90YWxQYWdlLCB0b3RhbE51bWJlcikgOiBhdHRyaWJ1dGVzLmZvcm1hdE5hdmlnYXRvcjtcbiAgICAgICAgdmFyIGZvcm1hdEdvSW5wdXQgPSAkLmlzRnVuY3Rpb24oYXR0cmlidXRlcy5mb3JtYXRHb0lucHV0KSA/IGF0dHJpYnV0ZXMuZm9ybWF0R29JbnB1dChnb0lucHV0LCBjdXJyZW50UGFnZSwgdG90YWxQYWdlLCB0b3RhbE51bWJlcikgOiBhdHRyaWJ1dGVzLmZvcm1hdEdvSW5wdXQ7XG4gICAgICAgIHZhciBmb3JtYXRHb0J1dHRvbiA9ICQuaXNGdW5jdGlvbihhdHRyaWJ1dGVzLmZvcm1hdEdvQnV0dG9uKSA/IGF0dHJpYnV0ZXMuZm9ybWF0R29CdXR0b24oZ29CdXR0b24sIGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2UsIHRvdGFsTnVtYmVyKSA6IGF0dHJpYnV0ZXMuZm9ybWF0R29CdXR0b247XG5cbiAgICAgICAgdmFyIGF1dG9IaWRlUHJldmlvdXMgPSAkLmlzRnVuY3Rpb24oYXR0cmlidXRlcy5hdXRvSGlkZVByZXZpb3VzKSA/IGF0dHJpYnV0ZXMuYXV0b0hpZGVQcmV2aW91cygpIDogYXR0cmlidXRlcy5hdXRvSGlkZVByZXZpb3VzO1xuICAgICAgICB2YXIgYXV0b0hpZGVOZXh0ID0gJC5pc0Z1bmN0aW9uKGF0dHJpYnV0ZXMuYXV0b0hpZGVOZXh0KSA/IGF0dHJpYnV0ZXMuYXV0b0hpZGVOZXh0KCkgOiBhdHRyaWJ1dGVzLmF1dG9IaWRlTmV4dDtcblxuICAgICAgICB2YXIgaGVhZGVyID0gJC5pc0Z1bmN0aW9uKGF0dHJpYnV0ZXMuaGVhZGVyKSA/IGF0dHJpYnV0ZXMuaGVhZGVyKGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2UsIHRvdGFsTnVtYmVyKSA6IGF0dHJpYnV0ZXMuaGVhZGVyO1xuICAgICAgICB2YXIgZm9vdGVyID0gJC5pc0Z1bmN0aW9uKGF0dHJpYnV0ZXMuZm9vdGVyKSA/IGF0dHJpYnV0ZXMuZm9vdGVyKGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2UsIHRvdGFsTnVtYmVyKSA6IGF0dHJpYnV0ZXMuZm9vdGVyO1xuXG4gICAgICAgIC8vIFdoZXRoZXIgdG8gZGlzcGxheSBoZWFkZXJcbiAgICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHNlbGYucmVwbGFjZVZhcmlhYmxlcyhoZWFkZXIsIHtcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZSxcbiAgICAgICAgICAgIHRvdGFsUGFnZTogdG90YWxQYWdlLFxuICAgICAgICAgICAgdG90YWxOdW1iZXI6IHRvdGFsTnVtYmVyXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaHRtbCArPSBmb3JtYXR0ZWRTdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvd1ByZXZpb3VzIHx8IHNob3dQYWdlTnVtYmVycyB8fCBzaG93TmV4dCkge1xuICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJwYWdpbmF0aW9uanMtcGFnZXNcIj4nO1xuXG4gICAgICAgICAgaWYgKHVsQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBodG1sICs9ICc8dWwgY2xhc3M9XCInICsgdWxDbGFzc05hbWUgKyAnXCI+JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHRtbCArPSAnPHVsPic7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gV2hldGhlciB0byBkaXNwbGF5IHRoZSBQcmV2aW91cyBidXR0b25cbiAgICAgICAgICBpZiAoc2hvd1ByZXZpb3VzKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFBhZ2UgPD0gMSkge1xuICAgICAgICAgICAgICBpZiAoIWF1dG9IaWRlUHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLXByZXYgJyArIGRpc2FibGVDbGFzc05hbWUgKyAnXCI+PGE+JyArIHByZXZUZXh0ICsgJzxcXC9hPjxcXC9saT4nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLXByZXYgSi1wYWdpbmF0aW9uanMtcHJldmlvdXNcIiBkYXRhLW51bT1cIicgKyAoY3VycmVudFBhZ2UgLSAxKSArICdcIiB0aXRsZT1cIlByZXZpb3VzIHBhZ2VcIj48YSBocmVmPVwiJyArIHBhZ2VMaW5rICsgJ1wiPicgKyBwcmV2VGV4dCArICc8XFwvYT48XFwvbGk+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlIHBhZ2VzXG4gICAgICAgICAgaWYgKHNob3dQYWdlTnVtYmVycykge1xuICAgICAgICAgICAgaHRtbCArPSBzZWxmLmdlbmVyYXRlUGFnZU51bWJlcnNIVE1MKGFyZ3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgTmV4dCBidXR0b25cbiAgICAgICAgICBpZiAoc2hvd05leHQpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA+PSB0b3RhbFBhZ2UpIHtcbiAgICAgICAgICAgICAgaWYgKCFhdXRvSGlkZU5leHQpIHtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLW5leHQgJyArIGRpc2FibGVDbGFzc05hbWUgKyAnXCI+PGE+JyArIG5leHRUZXh0ICsgJzxcXC9hPjxcXC9saT4nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBodG1sICs9ICc8bGkgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLW5leHQgSi1wYWdpbmF0aW9uanMtbmV4dFwiIGRhdGEtbnVtPVwiJyArIChjdXJyZW50UGFnZSArIDEpICsgJ1wiIHRpdGxlPVwiTmV4dCBwYWdlXCI+PGEgaHJlZj1cIicgKyBwYWdlTGluayArICdcIj4nICsgbmV4dFRleHQgKyAnPFxcL2E+PFxcL2xpPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGh0bWwgKz0gJzxcXC91bD48XFwvZGl2Pic7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlIG5hdmlnYXRvclxuICAgICAgICBpZiAoc2hvd05hdmlnYXRvcikge1xuICAgICAgICAgIGlmIChmb3JtYXROYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHNlbGYucmVwbGFjZVZhcmlhYmxlcyhmb3JtYXROYXZpZ2F0b3IsIHtcbiAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IGN1cnJlbnRQYWdlLFxuICAgICAgICAgICAgICB0b3RhbFBhZ2U6IHRvdGFsUGFnZSxcbiAgICAgICAgICAgICAgdG90YWxOdW1iZXI6IHRvdGFsTnVtYmVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLW5hdiBKLXBhZ2luYXRpb25qcy1uYXZcIj4nICsgZm9ybWF0dGVkU3RyaW5nICsgJzxcXC9kaXY+JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlIEdvIGlucHV0XG4gICAgICAgIGlmIChzaG93R29JbnB1dCkge1xuICAgICAgICAgIGlmIChmb3JtYXRHb0lucHV0KSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSBzZWxmLnJlcGxhY2VWYXJpYWJsZXMoZm9ybWF0R29JbnB1dCwge1xuICAgICAgICAgICAgICBjdXJyZW50UGFnZTogY3VycmVudFBhZ2UsXG4gICAgICAgICAgICAgIHRvdGFsUGFnZTogdG90YWxQYWdlLFxuICAgICAgICAgICAgICB0b3RhbE51bWJlcjogdG90YWxOdW1iZXIsXG4gICAgICAgICAgICAgIGlucHV0OiBnb0lucHV0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCInICsgY2xhc3NQcmVmaXggKyAnLWdvLWlucHV0XCI+JyArIGZvcm1hdHRlZFN0cmluZyArICc8L2Rpdj4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgR28gYnV0dG9uXG4gICAgICAgIGlmIChzaG93R29CdXR0b24pIHtcbiAgICAgICAgICBpZiAoZm9ybWF0R29CdXR0b24pIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHNlbGYucmVwbGFjZVZhcmlhYmxlcyhmb3JtYXRHb0J1dHRvbiwge1xuICAgICAgICAgICAgICBjdXJyZW50UGFnZTogY3VycmVudFBhZ2UsXG4gICAgICAgICAgICAgIHRvdGFsUGFnZTogdG90YWxQYWdlLFxuICAgICAgICAgICAgICB0b3RhbE51bWJlcjogdG90YWxOdW1iZXIsXG4gICAgICAgICAgICAgIGJ1dHRvbjogZ29CdXR0b25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFzcz1cIicgKyBjbGFzc1ByZWZpeCArICctZ28tYnV0dG9uXCI+JyArIGZvcm1hdHRlZFN0cmluZyArICc8L2Rpdj4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZXRoZXIgdG8gZGlzcGxheSBmb290ZXJcbiAgICAgICAgaWYgKGZvb3Rlcikge1xuICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHNlbGYucmVwbGFjZVZhcmlhYmxlcyhmb290ZXIsIHtcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZSxcbiAgICAgICAgICAgIHRvdGFsUGFnZTogdG90YWxQYWdlLFxuICAgICAgICAgICAgdG90YWxOdW1iZXI6IHRvdGFsTnVtYmVyXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaHRtbCArPSBmb3JtYXR0ZWRTdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEZpbmQgdG90YWxOdW1iZXIgZnJvbSB0aGUgcmVtb3RlIHJlc3BvbnNlXG4gICAgICAvLyBPbmx5IGF2YWlsYWJsZSBpbiBhc3luY2hyb25vdXMgbW9kZVxuICAgICAgZmluZFRvdGFsTnVtYmVyRnJvbVJlbW90ZVJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYubW9kZWwudG90YWxOdW1iZXIgPSBhdHRyaWJ1dGVzLnRvdGFsTnVtYmVyTG9jYXRvcihyZXNwb25zZSk7XG4gICAgICB9LFxuXG4gICAgICAvLyBHbyB0byB0aGUgc3BlY2lmaWVkIHBhZ2VcbiAgICAgIGdvOiBmdW5jdGlvbihudW1iZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIG1vZGVsID0gc2VsZi5tb2RlbDtcblxuICAgICAgICBpZiAoc2VsZi5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBwYWdlTnVtYmVyID0gbnVtYmVyO1xuICAgICAgICBwYWdlTnVtYmVyID0gcGFyc2VJbnQocGFnZU51bWJlcik7XG5cbiAgICAgICAgLy8gUGFnZSBudW1iZXIgaXMgb3V0IG9mIGJvdW5kc1xuICAgICAgICBpZiAoIXBhZ2VOdW1iZXIgfHwgcGFnZU51bWJlciA8IDEpIHJldHVybjtcblxuICAgICAgICB2YXIgcGFnZVNpemUgPSBhdHRyaWJ1dGVzLnBhZ2VTaXplO1xuICAgICAgICB2YXIgdG90YWxOdW1iZXIgPSBzZWxmLmdldFRvdGFsTnVtYmVyKCk7XG4gICAgICAgIHZhciB0b3RhbFBhZ2UgPSBzZWxmLmdldFRvdGFsUGFnZSgpO1xuXG4gICAgICAgIC8vIFBhZ2UgbnVtYmVyIGlzIG91dCBvZiBib3VuZHNcbiAgICAgICAgaWYgKHRvdGFsTnVtYmVyID4gMCkge1xuICAgICAgICAgIGlmIChwYWdlTnVtYmVyID4gdG90YWxQYWdlKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQaWNrIGRhdGEgZnJhZ21lbnQgaW4gc3luY2hyb25vdXMgbW9kZVxuICAgICAgICBpZiAoIXNlbGYuaXNBc3luYykge1xuICAgICAgICAgIHJlbmRlcihzZWxmLmdldERhdGFGcmFnbWVudChwYWdlTnVtYmVyKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvc3REYXRhID0ge307XG4gICAgICAgIHZhciBhbGlhcyA9IGF0dHJpYnV0ZXMuYWxpYXMgfHwge307XG4gICAgICAgIHBvc3REYXRhW2FsaWFzLnBhZ2VTaXplID8gYWxpYXMucGFnZVNpemUgOiAncGFnZVNpemUnXSA9IHBhZ2VTaXplO1xuICAgICAgICBwb3N0RGF0YVthbGlhcy5wYWdlTnVtYmVyID8gYWxpYXMucGFnZU51bWJlciA6ICdwYWdlTnVtYmVyJ10gPSBwYWdlTnVtYmVyO1xuXG4gICAgICAgIHZhciBhamF4UGFyYW1zID0gJC5pc0Z1bmN0aW9uKGF0dHJpYnV0ZXMuYWpheCkgPyBhdHRyaWJ1dGVzLmFqYXgoKSA6IGF0dHJpYnV0ZXMuYWpheDtcbiAgICAgICAgdmFyIGZvcm1hdEFqYXhQYXJhbXMgPSB7XG4gICAgICAgICAgdHlwZTogJ2dldCcsXG4gICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgIGFzeW5jOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgZm9ybWF0QWpheFBhcmFtcywgYWpheFBhcmFtcyk7XG4gICAgICAgICQuZXh0ZW5kKGZvcm1hdEFqYXhQYXJhbXMuZGF0YSwgcG9zdERhdGEpO1xuXG4gICAgICAgIGZvcm1hdEFqYXhQYXJhbXMudXJsID0gYXR0cmlidXRlcy5kYXRhU291cmNlO1xuICAgICAgICBmb3JtYXRBamF4UGFyYW1zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChzZWxmLmlzRHluYW1pY1RvdGFsTnVtYmVyKSB7XG4gICAgICAgICAgICBzZWxmLmZpbmRUb3RhbE51bWJlckZyb21SZW1vdGVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYubW9kZWwudG90YWxOdW1iZXIgPSBhdHRyaWJ1dGVzLnRvdGFsTnVtYmVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBmaW5hbERhdGEgPSBzZWxmLmZpbHRlckRhdGFCeUxvY2F0b3IocmVzcG9uc2UpO1xuICAgICAgICAgIHJlbmRlcihmaW5hbERhdGEpO1xuICAgICAgICB9O1xuICAgICAgICBmb3JtYXRBamF4UGFyYW1zLmVycm9yID0gZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgYXR0cmlidXRlcy5mb3JtYXRBamF4RXJyb3IgJiYgYXR0cmlidXRlcy5mb3JtYXRBamF4RXJyb3IoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKTtcbiAgICAgICAgICBzZWxmLmVuYWJsZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuZGlzYWJsZSgpO1xuXG4gICAgICAgICQuYWpheChmb3JtYXRBamF4UGFyYW1zKTtcblxuICAgICAgICBmdW5jdGlvbiByZW5kZXIoZGF0YSkge1xuICAgICAgICAgIC8vIFdpbGwgYmUgaW52b2tlZCBiZWZvcmUgcGFnaW5nXG4gICAgICAgICAgaWYgKHNlbGYuY2FsbEhvb2soJ2JlZm9yZVBhZ2luZycsIHBhZ2VOdW1iZXIpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgLy8gUGFnaW5hdGlvbiBkaXJlY3Rpb25cbiAgICAgICAgICBtb2RlbC5kaXJlY3Rpb24gPSB0eXBlb2YgbW9kZWwucGFnZU51bWJlciA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogKHBhZ2VOdW1iZXIgPiBtb2RlbC5wYWdlTnVtYmVyID8gMSA6IC0xKTtcblxuICAgICAgICAgIG1vZGVsLnBhZ2VOdW1iZXIgPSBwYWdlTnVtYmVyO1xuXG4gICAgICAgICAgc2VsZi5yZW5kZXIoKTtcblxuICAgICAgICAgIGlmIChzZWxmLmRpc2FibGVkICYmIHNlbGYuaXNBc3luYykge1xuICAgICAgICAgICAgLy8gZW5hYmxlIHBhZ2luYXRpb25cbiAgICAgICAgICAgIHNlbGYuZW5hYmxlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gY2FjaGUgbW9kZWwgZGF0YVxuICAgICAgICAgIGNvbnRhaW5lci5kYXRhKCdwYWdpbmF0aW9uJykubW9kZWwgPSBtb2RlbDtcblxuICAgICAgICAgIC8vIGZvcm1hdCByZXN1bHQgZGF0YSBiZWZvcmUgY2FsbGJhY2sgaW52b2tlZFxuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmZvcm1hdFJlc3VsdCkge1xuICAgICAgICAgICAgdmFyIGNsb25lRGF0YSA9ICQuZXh0ZW5kKHRydWUsIFtdLCBkYXRhKTtcbiAgICAgICAgICAgIGlmICghSGVscGVycy5pc0FycmF5KGRhdGEgPSBhdHRyaWJ1dGVzLmZvcm1hdFJlc3VsdChjbG9uZURhdGEpKSkge1xuICAgICAgICAgICAgICBkYXRhID0gY2xvbmVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRhaW5lci5kYXRhKCdwYWdpbmF0aW9uJykuY3VycmVudFBhZ2VEYXRhID0gZGF0YTtcblxuICAgICAgICAgIC8vIGludm9rZSBjYWxsYmFja1xuICAgICAgICAgIHNlbGYuZG9DYWxsYmFjayhkYXRhLCBjYWxsYmFjayk7XG5cbiAgICAgICAgICBzZWxmLmNhbGxIb29rKCdhZnRlclBhZ2luZycsIHBhZ2VOdW1iZXIpO1xuXG4gICAgICAgICAgLy8gcGFnZU51bWJlciBub3cgaXMgdGhlIGZpcnN0IHBhZ2VcbiAgICAgICAgICBpZiAocGFnZU51bWJlciA9PSAxKSB7XG4gICAgICAgICAgICBzZWxmLmNhbGxIb29rKCdhZnRlcklzRmlyc3RQYWdlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcGFnZU51bWJlciBub3cgaXMgdGhlIGxhc3QgcGFnZVxuICAgICAgICAgIGlmIChwYWdlTnVtYmVyID09IHNlbGYuZ2V0VG90YWxQYWdlKCkpIHtcbiAgICAgICAgICAgIHNlbGYuY2FsbEhvb2soJ2FmdGVySXNMYXN0UGFnZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgZG9DYWxsYmFjazogZnVuY3Rpb24oZGF0YSwgY3VzdG9tQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgbW9kZWwgPSBzZWxmLm1vZGVsO1xuXG4gICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY3VzdG9tQ2FsbGJhY2spKSB7XG4gICAgICAgICAgY3VzdG9tQ2FsbGJhY2soZGF0YSwgbW9kZWwpO1xuICAgICAgICB9IGVsc2UgaWYgKCQuaXNGdW5jdGlvbihhdHRyaWJ1dGVzLmNhbGxiYWNrKSkge1xuICAgICAgICAgIGF0dHJpYnV0ZXMuY2FsbGJhY2soZGF0YSwgbW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQmVmb3JlIGRlc3Ryb3lcbiAgICAgICAgaWYgKHRoaXMuY2FsbEhvb2soJ2JlZm9yZURlc3Ryb3knKSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgICB0aGlzLm1vZGVsLmVsLnJlbW92ZSgpO1xuICAgICAgICBjb250YWluZXIub2ZmKCk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHN0eWxlIGVsZW1lbnRcbiAgICAgICAgJCgnI3BhZ2luYXRpb25qcy1zdHlsZScpLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIEFmdGVyIGRlc3Ryb3llZFxuICAgICAgICB0aGlzLmNhbGxIb29rKCdhZnRlckRlc3Ryb3knKTtcbiAgICAgIH0sXG5cbiAgICAgIHByZXZpb3VzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdvKHRoaXMubW9kZWwucGFnZU51bWJlciAtIDEsIGNhbGxiYWNrKTtcbiAgICAgIH0sXG5cbiAgICAgIG5leHQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZ28odGhpcy5tb2RlbC5wYWdlTnVtYmVyICsgMSwgY2FsbGJhY2spO1xuICAgICAgfSxcblxuICAgICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNlbGYuaXNBc3luYyA/ICdhc3luYycgOiAnc3luYyc7XG5cbiAgICAgICAgLy8gQmVmb3JlIGRpc2FibGVkXG4gICAgICAgIGlmIChzZWxmLmNhbGxIb29rKCdiZWZvcmVEaXNhYmxlJywgc291cmNlKSA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgICAgICBzZWxmLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5tb2RlbC5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gQWZ0ZXIgZGlzYWJsZWRcbiAgICAgICAgc2VsZi5jYWxsSG9vaygnYWZ0ZXJEaXNhYmxlJywgc291cmNlKTtcbiAgICAgIH0sXG5cbiAgICAgIGVuYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNlbGYuaXNBc3luYyA/ICdhc3luYycgOiAnc3luYyc7XG5cbiAgICAgICAgLy8gQmVmb3JlIGVuYWJsZWRcbiAgICAgICAgaWYgKHNlbGYuY2FsbEhvb2soJ2JlZm9yZUVuYWJsZScsIHNvdXJjZSkgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgc2VsZi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBzZWxmLm1vZGVsLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQWZ0ZXIgZW5hYmxlZFxuICAgICAgICBzZWxmLmNhbGxIb29rKCdhZnRlckVuYWJsZScsIHNvdXJjZSk7XG4gICAgICB9LFxuXG4gICAgICByZWZyZXNoOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdvKHRoaXMubW9kZWwucGFnZU51bWJlciwgY2FsbGJhY2spO1xuICAgICAgfSxcblxuICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiAoc2VsZi5tb2RlbC5lbC5pcygnOnZpc2libGUnKSkgcmV0dXJuO1xuXG4gICAgICAgIHNlbGYubW9kZWwuZWwuc2hvdygpO1xuICAgICAgfSxcblxuICAgICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiAoIXNlbGYubW9kZWwuZWwuaXMoJzp2aXNpYmxlJykpIHJldHVybjtcblxuICAgICAgICBzZWxmLm1vZGVsLmVsLmhpZGUoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIFBhcnNlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGVcbiAgICAgIHJlcGxhY2VWYXJpYWJsZXM6IGZ1bmN0aW9uKHRlbXBsYXRlLCB2YXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZztcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFyaWFibGVzKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdmFyaWFibGVzW2tleV07XG4gICAgICAgICAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJzwlPVxcXFxzKicgKyBrZXkgKyAnXFxcXHMqJT4nLCAnaW1nJyk7XG5cbiAgICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSAoZm9ybWF0dGVkU3RyaW5nIHx8IHRlbXBsYXRlKS5yZXBsYWNlKHJlZ2V4cCwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0cmluZztcbiAgICAgIH0sXG5cbiAgICAgIC8vIEdldCBkYXRhIGZyYWdtZW50XG4gICAgICBnZXREYXRhRnJhZ21lbnQ6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgICB2YXIgcGFnZVNpemUgPSBhdHRyaWJ1dGVzLnBhZ2VTaXplO1xuICAgICAgICB2YXIgZGF0YVNvdXJjZSA9IGF0dHJpYnV0ZXMuZGF0YVNvdXJjZTtcbiAgICAgICAgdmFyIHRvdGFsTnVtYmVyID0gdGhpcy5nZXRUb3RhbE51bWJlcigpO1xuXG4gICAgICAgIHZhciBzdGFydCA9IHBhZ2VTaXplICogKG51bWJlciAtIDEpICsgMTtcbiAgICAgICAgdmFyIGVuZCA9IE1hdGgubWluKG51bWJlciAqIHBhZ2VTaXplLCB0b3RhbE51bWJlcik7XG5cbiAgICAgICAgcmV0dXJuIGRhdGFTb3VyY2Uuc2xpY2Uoc3RhcnQgLSAxLCBlbmQpO1xuICAgICAgfSxcblxuICAgICAgLy8gR2V0IHRvdGFsIG51bWJlclxuICAgICAgZ2V0VG90YWxOdW1iZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50b3RhbE51bWJlciB8fCBhdHRyaWJ1dGVzLnRvdGFsTnVtYmVyIHx8IDA7XG4gICAgICB9LFxuXG4gICAgICAvLyBHZXQgdG90YWwgcGFnZVxuICAgICAgZ2V0VG90YWxQYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmdldFRvdGFsTnVtYmVyKCkgLyBhdHRyaWJ1dGVzLnBhZ2VTaXplKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEdldCBsb2NhdG9yXG4gICAgICBnZXRMb2NhdG9yOiBmdW5jdGlvbihsb2NhdG9yKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJlc3VsdCA9IGxvY2F0b3I7XG4gICAgICAgIH0gZWxzZSBpZiAoJC5pc0Z1bmN0aW9uKGxvY2F0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbG9jYXRvcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93RXJyb3IoJ1wibG9jYXRvclwiIGlzIGluY29ycmVjdC4gKFN0cmluZyB8IEZ1bmN0aW9uKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEZpbHRlciBkYXRhIGJ5IFwibG9jYXRvclwiXG4gICAgICBmaWx0ZXJEYXRhQnlMb2NhdG9yOiBmdW5jdGlvbihkYXRhU291cmNlKSB7XG4gICAgICAgIHZhciBsb2NhdG9yID0gdGhpcy5nZXRMb2NhdG9yKGF0dHJpYnV0ZXMubG9jYXRvcik7XG4gICAgICAgIHZhciBmaWx0ZXJlZERhdGE7XG5cbiAgICAgICAgLy8gRGF0YXNvdXJjZSBpcyBhbiBPYmplY3QsIHVzZSBcImxvY2F0b3JcIiB0byBsb2NhdGUgdGhlIHRydWUgZGF0YVxuICAgICAgICBpZiAoSGVscGVycy5pc09iamVjdChkYXRhU291cmNlKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAkLmVhY2gobG9jYXRvci5zcGxpdCgnLicpLCBmdW5jdGlvbihpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSAoZmlsdGVyZWREYXRhID8gZmlsdGVyZWREYXRhIDogZGF0YVNvdXJjZSlbaXRlbV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWZpbHRlcmVkRGF0YSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcignZGF0YVNvdXJjZS4nICsgbG9jYXRvciArICcgaXMgdW5kZWZpbmVkLicpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIUhlbHBlcnMuaXNBcnJheShmaWx0ZXJlZERhdGEpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKCdkYXRhU291cmNlLicgKyBsb2NhdG9yICsgJyBtdXN0IGJlIGFuIEFycmF5LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZERhdGEgfHwgZGF0YVNvdXJjZTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIFBhcnNlIGRhdGFTb3VyY2VcbiAgICAgIHBhcnNlRGF0YVNvdXJjZTogZnVuY3Rpb24oZGF0YVNvdXJjZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGlmIChIZWxwZXJzLmlzT2JqZWN0KGRhdGFTb3VyY2UpKSB7XG4gICAgICAgICAgY2FsbGJhY2soYXR0cmlidXRlcy5kYXRhU291cmNlID0gc2VsZi5maWx0ZXJEYXRhQnlMb2NhdG9yKGRhdGFTb3VyY2UpKTtcbiAgICAgICAgfSBlbHNlIGlmIChIZWxwZXJzLmlzQXJyYXkoZGF0YVNvdXJjZSkpIHtcbiAgICAgICAgICBjYWxsYmFjayhhdHRyaWJ1dGVzLmRhdGFTb3VyY2UgPSBkYXRhU291cmNlKTtcbiAgICAgICAgfSBlbHNlIGlmICgkLmlzRnVuY3Rpb24oZGF0YVNvdXJjZSkpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzLmRhdGFTb3VyY2UoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKCFIZWxwZXJzLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgdGhyb3dFcnJvcignVGhlIHBhcmFtZXRlciBvZiBcImRvbmVcIiBGdW5jdGlvbiBzaG91bGQgYmUgYW4gQXJyYXkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnBhcnNlRGF0YVNvdXJjZS5jYWxsKHNlbGYsIGRhdGEsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YVNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoL15odHRwcz98ZmlsZTovLnRlc3QoZGF0YVNvdXJjZSkpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuYWpheERhdGFUeXBlID0gJ2pzb25wJztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FsbGJhY2soZGF0YVNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcignVW5leHBlY3RlZCB0eXBlIG9mIFwiZGF0YVNvdXJjZVwiLicpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBjYWxsSG9vazogZnVuY3Rpb24oaG9vaykge1xuICAgICAgICB2YXIgcGFnaW5hdGlvbkRhdGEgPSBjb250YWluZXIuZGF0YSgncGFnaW5hdGlvbicpO1xuICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyk7XG4gICAgICAgIGFyZ3Muc2hpZnQoKTtcblxuICAgICAgICBpZiAoYXR0cmlidXRlc1tob29rXSAmJiAkLmlzRnVuY3Rpb24oYXR0cmlidXRlc1tob29rXSkpIHtcbiAgICAgICAgICBpZiAoYXR0cmlidXRlc1tob29rXS5hcHBseShnbG9iYWwsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2luYXRpb25EYXRhLmhvb2tzICYmIHBhZ2luYXRpb25EYXRhLmhvb2tzW2hvb2tdKSB7XG4gICAgICAgICAgJC5lYWNoKHBhZ2luYXRpb25EYXRhLmhvb2tzW2hvb2tdLCBmdW5jdGlvbihpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgaWYgKGl0ZW0uYXBwbHkoZ2xvYmFsLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0ICE9PSBmYWxzZTtcbiAgICAgIH0sXG5cbiAgICAgIG9ic2VydmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZWwgPSBzZWxmLm1vZGVsLmVsO1xuXG4gICAgICAgIC8vIEdvIHRvIHNwZWNpZmllZCBwYWdlIG51bWJlclxuICAgICAgICBjb250YWluZXIub24oZXZlbnRQcmVmaXggKyAnZ28nLCBmdW5jdGlvbihldmVudCwgcGFnZU51bWJlciwgZG9uZSkge1xuICAgICAgICAgIHBhZ2VOdW1iZXIgPSBwYXJzZUludCgkLnRyaW0ocGFnZU51bWJlcikpO1xuXG4gICAgICAgICAgaWYgKCFwYWdlTnVtYmVyKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoISQuaXNOdW1lcmljKHBhZ2VOdW1iZXIpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKCdcInBhZ2VOdW1iZXJcIiBpcyBpbmNvcnJlY3QuIChOdW1iZXIpJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5nbyhwYWdlTnVtYmVyLCBkb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUGFnZSBudW1iZXIgYnV0dG9uIGNsaWNrXG4gICAgICAgIGVsLmRlbGVnYXRlKCcuSi1wYWdpbmF0aW9uanMtcGFnZScsICdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgIHZhciBwYWdlTnVtYmVyID0gJC50cmltKGN1cnJlbnQuYXR0cignZGF0YS1udW0nKSk7XG5cbiAgICAgICAgICBpZiAoIXBhZ2VOdW1iZXIgfHwgY3VycmVudC5oYXNDbGFzcyhhdHRyaWJ1dGVzLmRpc2FibGVDbGFzc05hbWUpIHx8IGN1cnJlbnQuaGFzQ2xhc3MoYXR0cmlidXRlcy5hY3RpdmVDbGFzc05hbWUpKSByZXR1cm47XG5cbiAgICAgICAgICAvLyBCZWZvcmUgcGFnZSBidXR0b24gY2xpY2tlZFxuICAgICAgICAgIGlmIChzZWxmLmNhbGxIb29rKCdiZWZvcmVQYWdlT25DbGljaycsIGV2ZW50LCBwYWdlTnVtYmVyKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIHNlbGYuZ28ocGFnZU51bWJlcik7XG5cbiAgICAgICAgICAvLyBBZnRlciBwYWdlIGJ1dHRvbiBjbGlja2VkXG4gICAgICAgICAgc2VsZi5jYWxsSG9vaygnYWZ0ZXJQYWdlT25DbGljaycsIGV2ZW50LCBwYWdlTnVtYmVyKTtcblxuICAgICAgICAgIGlmICghYXR0cmlidXRlcy5wYWdlTGluaykgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQcmV2aW91cyBidXR0b24gY2xpY2tcbiAgICAgICAgZWwuZGVsZWdhdGUoJy5KLXBhZ2luYXRpb25qcy1wcmV2aW91cycsICdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgIHZhciBwYWdlTnVtYmVyID0gJC50cmltKGN1cnJlbnQuYXR0cignZGF0YS1udW0nKSk7XG5cbiAgICAgICAgICBpZiAoIXBhZ2VOdW1iZXIgfHwgY3VycmVudC5oYXNDbGFzcyhhdHRyaWJ1dGVzLmRpc2FibGVDbGFzc05hbWUpKSByZXR1cm47XG5cbiAgICAgICAgICAvLyBCZWZvcmUgcHJldmlvdXMgY2xpY2tlZFxuICAgICAgICAgIGlmIChzZWxmLmNhbGxIb29rKCdiZWZvcmVQcmV2aW91c09uQ2xpY2snLCBldmVudCwgcGFnZU51bWJlcikgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICBzZWxmLmdvKHBhZ2VOdW1iZXIpO1xuXG4gICAgICAgICAgLy8gQWZ0ZXIgcHJldmlvdXMgY2xpY2tlZFxuICAgICAgICAgIHNlbGYuY2FsbEhvb2soJ2FmdGVyUHJldmlvdXNPbkNsaWNrJywgZXZlbnQsIHBhZ2VOdW1iZXIpO1xuXG4gICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzLnBhZ2VMaW5rKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE5leHQgYnV0dG9uIGNsaWNrXG4gICAgICAgIGVsLmRlbGVnYXRlKCcuSi1wYWdpbmF0aW9uanMtbmV4dCcsICdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgIHZhciBwYWdlTnVtYmVyID0gJC50cmltKGN1cnJlbnQuYXR0cignZGF0YS1udW0nKSk7XG5cbiAgICAgICAgICBpZiAoIXBhZ2VOdW1iZXIgfHwgY3VycmVudC5oYXNDbGFzcyhhdHRyaWJ1dGVzLmRpc2FibGVDbGFzc05hbWUpKSByZXR1cm47XG5cbiAgICAgICAgICAvLyBCZWZvcmUgbmV4dCBjbGlja2VkXG4gICAgICAgICAgaWYgKHNlbGYuY2FsbEhvb2soJ2JlZm9yZU5leHRPbkNsaWNrJywgZXZlbnQsIHBhZ2VOdW1iZXIpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgc2VsZi5nbyhwYWdlTnVtYmVyKTtcblxuICAgICAgICAgIC8vIEFmdGVyIG5leHQgY2xpY2tlZFxuICAgICAgICAgIHNlbGYuY2FsbEhvb2soJ2FmdGVyTmV4dE9uQ2xpY2snLCBldmVudCwgcGFnZU51bWJlcik7XG5cbiAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXMucGFnZUxpbmspIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gR28gYnV0dG9uIGNsaWNrXG4gICAgICAgIGVsLmRlbGVnYXRlKCcuSi1wYWdpbmF0aW9uanMtZ28tYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICB2YXIgcGFnZU51bWJlciA9ICQoJy5KLXBhZ2luYXRpb25qcy1nby1wYWdlbnVtYmVyJywgZWwpLnZhbCgpO1xuXG4gICAgICAgICAgLy8gQmVmb3JlIEdvIGJ1dHRvbiBjbGlja2VkXG4gICAgICAgICAgaWYgKHNlbGYuY2FsbEhvb2soJ2JlZm9yZUdvQnV0dG9uT25DbGljaycsIGV2ZW50LCBwYWdlTnVtYmVyKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIGNvbnRhaW5lci50cmlnZ2VyKGV2ZW50UHJlZml4ICsgJ2dvJywgcGFnZU51bWJlcik7XG5cbiAgICAgICAgICAvLyBBZnRlciBHbyBidXR0b24gY2xpY2tlZFxuICAgICAgICAgIHNlbGYuY2FsbEhvb2soJ2FmdGVyR29CdXR0b25PbkNsaWNrJywgZXZlbnQsIHBhZ2VOdW1iZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBnbyBpbnB1dCBlbnRlclxuICAgICAgICBlbC5kZWxlZ2F0ZSgnLkotcGFnaW5hdGlvbmpzLWdvLXBhZ2VudW1iZXInLCAna2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMTMpIHtcbiAgICAgICAgICAgIHZhciBwYWdlTnVtYmVyID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS52YWwoKTtcblxuICAgICAgICAgICAgLy8gQmVmb3JlIEdvIGlucHV0IGVudGVyXG4gICAgICAgICAgICBpZiAoc2VsZi5jYWxsSG9vaygnYmVmb3JlR29JbnB1dE9uRW50ZXInLCBldmVudCwgcGFnZU51bWJlcikgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci50cmlnZ2VyKGV2ZW50UHJlZml4ICsgJ2dvJywgcGFnZU51bWJlcik7XG5cbiAgICAgICAgICAgIC8vIFJlZ2FpbnMgZm9jdXNcbiAgICAgICAgICAgICQoJy5KLXBhZ2luYXRpb25qcy1nby1wYWdlbnVtYmVyJywgZWwpLmZvY3VzKCk7XG5cbiAgICAgICAgICAgIC8vIEFmdGVyIEdvIGlucHV0IGVudGVyXG4gICAgICAgICAgICBzZWxmLmNhbGxIb29rKCdhZnRlckdvSW5wdXRPbkVudGVyJywgZXZlbnQsIHBhZ2VOdW1iZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUHJldmlvdXMgcGFnZVxuICAgICAgICBjb250YWluZXIub24oZXZlbnRQcmVmaXggKyAncHJldmlvdXMnLCBmdW5jdGlvbihldmVudCwgZG9uZSkge1xuICAgICAgICAgIHNlbGYucHJldmlvdXMoZG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE5leHQgcGFnZVxuICAgICAgICBjb250YWluZXIub24oZXZlbnRQcmVmaXggKyAnbmV4dCcsIGZ1bmN0aW9uKGV2ZW50LCBkb25lKSB7XG4gICAgICAgICAgc2VsZi5uZXh0KGRvbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBEaXNhYmxlXG4gICAgICAgIGNvbnRhaW5lci5vbihldmVudFByZWZpeCArICdkaXNhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5kaXNhYmxlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEVuYWJsZVxuICAgICAgICBjb250YWluZXIub24oZXZlbnRQcmVmaXggKyAnZW5hYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5lbmFibGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUmVmcmVzaFxuICAgICAgICBjb250YWluZXIub24oZXZlbnRQcmVmaXggKyAncmVmcmVzaCcsIGZ1bmN0aW9uKGV2ZW50LCBkb25lKSB7XG4gICAgICAgICAgc2VsZi5yZWZyZXNoKGRvbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTaG93XG4gICAgICAgIGNvbnRhaW5lci5vbihldmVudFByZWZpeCArICdzaG93JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5zaG93KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhpZGVcbiAgICAgICAgY29udGFpbmVyLm9uKGV2ZW50UHJlZml4ICsgJ2hpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGVzdHJveVxuICAgICAgICBjb250YWluZXIub24oZXZlbnRQcmVmaXggKyAnZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuZGVzdHJveSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXaGV0aGVyIHRvIGxvYWQgdGhlIGRlZmF1bHQgcGFnZVxuICAgICAgICB2YXIgdmFsaWRUb3RhbFBhZ2UgPSBNYXRoLm1heChzZWxmLmdldFRvdGFsUGFnZSgpLCAxKVxuICAgICAgICB2YXIgZGVmYXVsdFBhZ2VOdW1iZXIgPSBhdHRyaWJ1dGVzLnBhZ2VOdW1iZXI7XG4gICAgICAgIC8vIERlZmF1bHQgcGFnZU51bWJlciBzaG91bGQgYmUgMSB3aGVuIHRvdGFsTnVtYmVyIGlzIGR5bmFtaWNcbiAgICAgICAgaWYgKHNlbGYuaXNEeW5hbWljVG90YWxOdW1iZXIpIHtcbiAgICAgICAgICBkZWZhdWx0UGFnZU51bWJlciA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMudHJpZ2dlclBhZ2luZ09uSW5pdCkge1xuICAgICAgICAgIGNvbnRhaW5lci50cmlnZ2VyKGV2ZW50UHJlZml4ICsgJ2dvJywgTWF0aC5taW4oZGVmYXVsdFBhZ2VOdW1iZXIsIHZhbGlkVG90YWxQYWdlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUGFnaW5hdGlvbiBoYXMgYmVlbiBpbml0aWFsaXplZFxuICAgIGlmIChjb250YWluZXIuZGF0YSgncGFnaW5hdGlvbicpICYmIGNvbnRhaW5lci5kYXRhKCdwYWdpbmF0aW9uJykuaW5pdGlhbGl6ZWQgPT09IHRydWUpIHtcbiAgICAgIC8vIEhhbmRsZSBldmVudHNcbiAgICAgIGlmICgkLmlzTnVtZXJpYyhvcHRpb25zKSkge1xuICAgICAgICAvLyBlZzogY29udGFpbmVyLnBhZ2luYXRpb24oNSlcbiAgICAgICAgY29udGFpbmVyLnRyaWdnZXIuY2FsbCh0aGlzLCBldmVudFByZWZpeCArICdnbycsIG9wdGlvbnMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKTtcbiAgICAgICAgYXJnc1swXSA9IGV2ZW50UHJlZml4ICsgYXJnc1swXTtcblxuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMpIHtcbiAgICAgICAgICBjYXNlICdwcmV2aW91cyc6XG4gICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgY2FzZSAnZ28nOlxuICAgICAgICAgIGNhc2UgJ2Rpc2FibGUnOlxuICAgICAgICAgIGNhc2UgJ2VuYWJsZSc6XG4gICAgICAgICAgY2FzZSAncmVmcmVzaCc6XG4gICAgICAgICAgY2FzZSAnc2hvdyc6XG4gICAgICAgICAgY2FzZSAnaGlkZSc6XG4gICAgICAgICAgY2FzZSAnZGVzdHJveSc6XG4gICAgICAgICAgICBjb250YWluZXIudHJpZ2dlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vIEdldCBzZWxlY3RlZCBwYWdlIG51bWJlclxuICAgICAgICAgIGNhc2UgJ2dldFNlbGVjdGVkUGFnZU51bSc6XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLmRhdGEoJ3BhZ2luYXRpb24nKS5tb2RlbCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmRhdGEoJ3BhZ2luYXRpb24nKS5tb2RlbC5wYWdlTnVtYmVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5kYXRhKCdwYWdpbmF0aW9uJykuYXR0cmlidXRlcy5wYWdlTnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIC8vIEdldCB0b3RhbCBwYWdlXG4gICAgICAgICAgY2FzZSAnZ2V0VG90YWxQYWdlJzpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwoY29udGFpbmVyLmRhdGEoJ3BhZ2luYXRpb24nKS5tb2RlbC50b3RhbE51bWJlciAvIGNvbnRhaW5lci5kYXRhKCdwYWdpbmF0aW9uJykubW9kZWwucGFnZVNpemUpO1xuICAgICAgICAgIC8vIEdldCBkYXRhIG9mIHNlbGVjdGVkIHBhZ2VcbiAgICAgICAgICBjYXNlICdnZXRTZWxlY3RlZFBhZ2VEYXRhJzpcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIuZGF0YSgncGFnaW5hdGlvbicpLmN1cnJlbnRQYWdlRGF0YTtcbiAgICAgICAgICAvLyBXaGV0aGVyIHBhZ2luYXRpb24gaGFzIGJlZW4gZGlzYWJsZWRcbiAgICAgICAgICBjYXNlICdpc0Rpc2FibGVkJzpcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIuZGF0YSgncGFnaW5hdGlvbicpLm1vZGVsLmRpc2FibGVkID09PSB0cnVlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvd0Vycm9yKCdVbmtub3duIGFjdGlvbjogJyArIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVW5pbnN0YWxsIHRoZSBvbGQgaW5zdGFuY2UgYmVmb3JlIGluaXRpYWxpemluZyBhIG5ldyBvbmVcbiAgICAgICAgdW5pbnN0YWxsUGx1Z2luKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghSGVscGVycy5pc09iamVjdChvcHRpb25zKSkgdGhyb3dFcnJvcignSWxsZWdhbCBvcHRpb25zJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgcGFyYW1ldGVyc1xuICAgIHBhcmFtZXRlckNoZWNrZXIoYXR0cmlidXRlcyk7XG5cbiAgICBwYWdpbmF0aW9uLmluaXRpYWxpemUoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEluc3RhbmNlIGRlZmF1bHRzXG4gICQuZm5bcGx1Z2luTmFtZV0uZGVmYXVsdHMgPSB7XG5cbiAgICAvLyBEYXRhIHNvdXJjZVxuICAgIC8vIEFycmF5IHwgU3RyaW5nIHwgRnVuY3Rpb24gfCBPYmplY3RcbiAgICAvL2RhdGFTb3VyY2U6ICcnLFxuXG4gICAgLy8gU3RyaW5nIHwgRnVuY3Rpb25cbiAgICAvL2xvY2F0b3I6ICdkYXRhJyxcblxuICAgIC8vIEZpbmQgdG90YWxOdW1iZXIgZnJvbSByZW1vdGUgcmVzcG9uc2UsIHRoZSB0b3RhbE51bWJlciB3aWxsIGJlIGlnbm9yZWQgd2hlbiB0b3RhbE51bWJlckxvY2F0b3IgaXMgc3BlY2lmaWVkXG4gICAgLy8gRnVuY3Rpb25cbiAgICAvL3RvdGFsTnVtYmVyTG9jYXRvcjogZnVuY3Rpb24oKSB7fSxcblxuICAgIC8vIFRvdGFsIGVudHJpZXNcbiAgICB0b3RhbE51bWJlcjogMCxcblxuICAgIC8vIERlZmF1bHQgcGFnZVxuICAgIHBhZ2VOdW1iZXI6IDEsXG5cbiAgICAvLyBlbnRyaWVzIG9mIHBlciBwYWdlXG4gICAgcGFnZVNpemU6IDEwLFxuXG4gICAgLy8gUGFnZSByYW5nZSAocGFnZXMgb24gYm90aCBzaWRlcyBvZiB0aGUgY3VycmVudCBwYWdlKVxuICAgIHBhZ2VSYW5nZTogMixcblxuICAgIC8vIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgJ1ByZXZpb3VzJyBidXR0b25cbiAgICBzaG93UHJldmlvdXM6IHRydWUsXG5cbiAgICAvLyBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlICdOZXh0JyBidXR0b25cbiAgICBzaG93TmV4dDogdHJ1ZSxcblxuICAgIC8vIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgcGFnZSBidXR0b25zXG4gICAgc2hvd1BhZ2VOdW1iZXJzOiB0cnVlLFxuXG4gICAgc2hvd05hdmlnYXRvcjogZmFsc2UsXG5cbiAgICAvLyBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlICdHbycgaW5wdXRcbiAgICBzaG93R29JbnB1dDogZmFsc2UsXG5cbiAgICAvLyBXaGV0aGVyIHRvIGRpc3BsYXkgdGhlICdHbycgYnV0dG9uXG4gICAgc2hvd0dvQnV0dG9uOiBmYWxzZSxcblxuICAgIC8vIFBhZ2UgbGlua1xuICAgIHBhZ2VMaW5rOiAnJyxcblxuICAgIC8vICdQcmV2aW91cycgdGV4dFxuICAgIHByZXZUZXh0OiAnJmxhcXVvOycsXG5cbiAgICAvLyAnTmV4dCcgdGV4dFxuICAgIG5leHRUZXh0OiAnJnJhcXVvOycsXG5cbiAgICAvLyBFbGxpcHNpcyB0ZXh0XG4gICAgZWxsaXBzaXNUZXh0OiAnLi4uJyxcblxuICAgIC8vICdHbycgYnV0dG9uIHRleHRcbiAgICBnb0J1dHRvblRleHQ6ICdHbycsXG5cbiAgICAvLyBBZGRpdGlvbmFsIGNsYXNzTmFtZSBmb3IgUGFnaW5hdGlvbiBlbGVtZW50XG4gICAgLy9jbGFzc05hbWU6ICcnLFxuXG4gICAgY2xhc3NQcmVmaXg6ICdwYWdpbmF0aW9uanMnLFxuXG4gICAgLy8gRGVmYXVsdCBhY3RpdmUgY2xhc3NcbiAgICBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnLFxuXG4gICAgLy8gRGVmYXVsdCBkaXNhYmxlIGNsYXNzXG4gICAgZGlzYWJsZUNsYXNzTmFtZTogJ2Rpc2FibGVkJyxcblxuICAgIC8vdWxDbGFzc05hbWU6ICcnLFxuXG4gICAgLy8gV2hldGhlciB0byBpbnNlcnQgaW5saW5lIHN0eWxlXG4gICAgaW5saW5lU3R5bGU6IHRydWUsXG5cbiAgICBmb3JtYXROYXZpZ2F0b3I6ICc8JT0gY3VycmVudFBhZ2UgJT4gLyA8JT0gdG90YWxQYWdlICU+JyxcblxuICAgIGZvcm1hdEdvSW5wdXQ6ICc8JT0gaW5wdXQgJT4nLFxuXG4gICAgZm9ybWF0R29CdXR0b246ICc8JT0gYnV0dG9uICU+JyxcblxuICAgIC8vIFBhZ2luYXRpb24gZWxlbWVudCdzIHBvc2l0aW9uIGluIHRoZSBjb250YWluZXJcbiAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG5cbiAgICAvLyBBdXRvIGhpZGUgcHJldmlvdXMgYnV0dG9uIHdoZW4gY3VycmVudCBwYWdlIGlzIHRoZSBmaXJzdCBwYWdlXG4gICAgYXV0b0hpZGVQcmV2aW91czogZmFsc2UsXG5cbiAgICAvLyBBdXRvIGhpZGUgbmV4dCBidXR0b24gd2hlbiBjdXJyZW50IHBhZ2UgaXMgdGhlIGxhc3QgcGFnZVxuICAgIGF1dG9IaWRlTmV4dDogZmFsc2UsXG5cbiAgICAvL2hlYWRlcjogJycsXG5cbiAgICAvL2Zvb3RlcjogJycsXG5cbiAgICAvLyBBbGlhc2VzIGZvciBjdXN0b20gcGFnaW5hdGlvbiBwYXJhbWV0ZXJzXG4gICAgLy9hbGlhczoge30sXG5cbiAgICAvLyBXaGV0aGVyIHRvIHRyaWdnZXIgcGFnaW5hdGlvbiBhdCBpbml0aWFsaXphdGlvblxuICAgIHRyaWdnZXJQYWdpbmdPbkluaXQ6IHRydWUsXG5cbiAgICAvLyBXaGV0aGVyIHRvIGhpZGUgcGFnaW5hdGlvbiB3aGVuIGxlc3MgdGhhbiBvbmUgcGFnZVxuICAgIGhpZGVXaGVuTGVzc1RoYW5PbmVQYWdlOiBmYWxzZSxcblxuICAgIHNob3dGaXJzdE9uRWxsaXBzaXNTaG93OiB0cnVlLFxuXG4gICAgc2hvd0xhc3RPbkVsbGlwc2lzU2hvdzogdHJ1ZSxcblxuICAgIC8vIFBhZ2luYXRpb24gY2FsbGJhY2tcbiAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7fVxuICB9O1xuXG4gIC8vIEhvb2sgcmVnaXN0ZXJcbiAgJC5mbltwbHVnaW5Ib29rTWV0aG9kXSA9IGZ1bmN0aW9uKGhvb2ssIGNhbGxiYWNrKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvd0Vycm9yKCdNaXNzaW5nIGFyZ3VtZW50LicpO1xuICAgIH1cblxuICAgIGlmICghJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgdGhyb3dFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXIgPSAkKHRoaXMpO1xuICAgIHZhciBwYWdpbmF0aW9uRGF0YSA9IGNvbnRhaW5lci5kYXRhKCdwYWdpbmF0aW9uJyk7XG5cbiAgICBpZiAoIXBhZ2luYXRpb25EYXRhKSB7XG4gICAgICBjb250YWluZXIuZGF0YSgncGFnaW5hdGlvbicsIHt9KTtcbiAgICAgIHBhZ2luYXRpb25EYXRhID0gY29udGFpbmVyLmRhdGEoJ3BhZ2luYXRpb24nKTtcbiAgICB9XG5cbiAgICAhcGFnaW5hdGlvbkRhdGEuaG9va3MgJiYgKHBhZ2luYXRpb25EYXRhLmhvb2tzID0ge30pO1xuXG4gICAgLy9wYWdpbmF0aW9uRGF0YS5ob29rc1tob29rXSA9IGNhbGxiYWNrO1xuICAgIHBhZ2luYXRpb25EYXRhLmhvb2tzW2hvb2tdID0gcGFnaW5hdGlvbkRhdGEuaG9va3NbaG9va10gfHwgW107XG4gICAgcGFnaW5hdGlvbkRhdGEuaG9va3NbaG9va10ucHVzaChjYWxsYmFjayk7XG5cbiAgfTtcblxuICAvLyBTdGF0aWMgbWV0aG9kXG4gICRbcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihzZWxlY3Rvciwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdGhyb3dFcnJvcignUmVxdWlyZXMgdHdvIHBhcmFtZXRlcnMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW5lcjtcblxuICAgIC8vICdzZWxlY3RvcicgaXMgYSBqUXVlcnkgb2JqZWN0XG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycgJiYgc2VsZWN0b3IgaW5zdGFuY2VvZiBqUXVlcnkpIHtcbiAgICAgIGNvbnRhaW5lciA9IHNlbGVjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIgPSAkKHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbnRhaW5lci5sZW5ndGgpIHJldHVybjtcblxuICAgIGNvbnRhaW5lci5wYWdpbmF0aW9uKG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gaGVscGVyc1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgSGVscGVycyA9IHt9O1xuXG4gIC8vIFRocm93IGVycm9yXG4gIGZ1bmN0aW9uIHRocm93RXJyb3IoY29udGVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFnaW5hdGlvbjogJyArIGNvbnRlbnQpO1xuICB9XG5cbiAgLy8gQ2hlY2sgcGFyYW1ldGVyc1xuICBmdW5jdGlvbiBwYXJhbWV0ZXJDaGVja2VyKGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MuZGF0YVNvdXJjZSkge1xuICAgICAgdGhyb3dFcnJvcignXCJkYXRhU291cmNlXCIgaXMgcmVxdWlyZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhcmdzLmRhdGFTb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoYXJncy50b3RhbE51bWJlckxvY2F0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJncy50b3RhbE51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcignXCJ0b3RhbE51bWJlclwiIGlzIHJlcXVpcmVkLicpO1xuICAgICAgICB9IGVsc2UgaWYgKCEkLmlzTnVtZXJpYyhhcmdzLnRvdGFsTnVtYmVyKSkge1xuICAgICAgICAgIHRocm93RXJyb3IoJ1widG90YWxOdW1iZXJcIiBpcyBpbmNvcnJlY3QuIChOdW1iZXIpJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghJC5pc0Z1bmN0aW9uKGFyZ3MudG90YWxOdW1iZXJMb2NhdG9yKSkge1xuICAgICAgICAgIHRocm93RXJyb3IoJ1widG90YWxOdW1iZXJMb2NhdG9yXCIgc2hvdWxkIGJlIGEgRnVuY3Rpb24uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEhlbHBlcnMuaXNPYmplY3QoYXJncy5kYXRhU291cmNlKSkge1xuICAgICAgaWYgKHR5cGVvZiBhcmdzLmxvY2F0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93RXJyb3IoJ1wiZGF0YVNvdXJjZVwiIGlzIGFuIE9iamVjdCwgcGxlYXNlIHNwZWNpZnkgXCJsb2NhdG9yXCIuJyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzLmxvY2F0b3IgIT09ICdzdHJpbmcnICYmICEkLmlzRnVuY3Rpb24oYXJncy5sb2NhdG9yKSkge1xuICAgICAgICB0aHJvd0Vycm9yKCcnICsgYXJncy5sb2NhdG9yICsgJyBpcyBpbmNvcnJlY3QuIChTdHJpbmcgfCBGdW5jdGlvbiknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXJncy5mb3JtYXRSZXN1bHQgIT09IHVuZGVmaW5lZCAmJiAhJC5pc0Z1bmN0aW9uKGFyZ3MuZm9ybWF0UmVzdWx0KSkge1xuICAgICAgdGhyb3dFcnJvcignXCJmb3JtYXRSZXN1bHRcIiBzaG91bGQgYmUgYSBGdW5jdGlvbi4nKTtcbiAgICB9XG4gIH1cblxuICAvLyB1bmluc3RhbGwgcGx1Z2luXG4gIGZ1bmN0aW9uIHVuaW5zdGFsbFBsdWdpbih0YXJnZXQpIHtcbiAgICB2YXIgZXZlbnRzID0gWydnbycsICdwcmV2aW91cycsICduZXh0JywgJ2Rpc2FibGUnLCAnZW5hYmxlJywgJ3JlZnJlc2gnLCAnc2hvdycsICdoaWRlJywgJ2Rlc3Ryb3knXTtcblxuICAgIC8vIG9mZiBldmVudHMgb2Ygb2xkIGluc3RhbmNlXG4gICAgJC5lYWNoKGV2ZW50cywgZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG4gICAgICB0YXJnZXQub2ZmKGV2ZW50UHJlZml4ICsgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gcmVzZXQgcGFnaW5hdGlvbiBkYXRhXG4gICAgdGFyZ2V0LmRhdGEoJ3BhZ2luYXRpb24nLCB7fSk7XG5cbiAgICAvLyByZW1vdmUgb2xkXG4gICAgJCgnLnBhZ2luYXRpb25qcycsIHRhcmdldCkucmVtb3ZlKCk7XG4gIH1cblxuICAvLyBPYmplY3QgdHlwZSBkZXRlY3Rpb25cbiAgZnVuY3Rpb24gZ2V0T2JqZWN0VHlwZShvYmplY3QsIHRtcCkge1xuICAgIHJldHVybiAoICh0bXAgPSB0eXBlb2Yob2JqZWN0KSkgPT0gXCJvYmplY3RcIiA/IG9iamVjdCA9PSBudWxsICYmIFwibnVsbFwiIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpLnNsaWNlKDgsIC0xKSA6IHRtcCApLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAkLmVhY2goWydPYmplY3QnLCAnQXJyYXknLCAnU3RyaW5nJ10sIGZ1bmN0aW9uKGluZGV4LCBuYW1lKSB7XG4gICAgSGVscGVyc1snaXMnICsgbmFtZV0gPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBnZXRPYmplY3RUeXBlKG9iamVjdCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9O1xuICB9KTtcblxuICAvKlxuICAgKiBleHBvcnQgdmlhIEFNRCBvciBDb21tb25KU1xuICAgKiAqL1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICQ7XG4gICAgfSk7XG4gIH1cblxufSkodGhpcywgd2luZG93LmpRdWVyeSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDaGVja2JveExpc3RfMSA9IHJlcXVpcmUoXCIuL0NoZWNrYm94TGlzdFwiKTtcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1jaGVja2JveC1saXN0JykuZm9yRWFjaChmdW5jdGlvbiAoYWNjb3JkaW9uKSB7XG4gICAgbmV3IENoZWNrYm94TGlzdF8xLkNoZWNrYm94TGlzdChhY2NvcmRpb24pO1xufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hlY2tib3hMaXN0ID0gdm9pZCAwO1xudmFyIENoZWNrYm94TGlzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDaGVja2JveExpc3QoYWNjb3JkaW9uKSB7XG4gICAgICAgIHRoaXMuYWNjb3JkaW9uID0gYWNjb3JkaW9uO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5maW5kRWxlbWVudCgpO1xuICAgICAgICB0aGlzLmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICBDaGVja2JveExpc3QucHJvdG90eXBlLmZpbmRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFuZWwgPSB0aGlzLmFjY29yZGlvbi5xdWVyeVNlbGVjdG9yKCcuanMtY2hlY2tib3gtbGlzdF9fd3JhcHBlcicpO1xuICAgICAgICB2YXIgaWNvbiA9IHRoaXMuYWNjb3JkaW9uLnF1ZXJ5U2VsZWN0b3IoJy5qcy1jaGVja2JveC1saXN0X19pY29uJyk7XG4gICAgICAgIHJldHVybiBbcGFuZWwsXG4gICAgICAgICAgICBpY29uXTtcbiAgICB9O1xuICAgIENoZWNrYm94TGlzdC5wcm90b3R5cGUuYmluZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhhbmRsZUFjY29yZGlvbkNsaWNrID0gdGhpcy5oYW5kbGVBY2NvcmRpb25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmFjY29yZGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQWNjb3JkaW9uQ2xpY2spO1xuICAgIH07XG4gICAgQ2hlY2tib3hMaXN0LnByb3RvdHlwZS5oYW5kbGVBY2NvcmRpb25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbMF0uc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1swXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1sxXS5jbGFzc0xpc3QudG9nZ2xlKCdjaGVja2JveC1saXN0X19pY29uX3JvdGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1swXS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHNbMV0uY2xhc3NMaXN0LnRvZ2dsZSgnY2hlY2tib3gtbGlzdF9faWNvbl9yb3RhdGUnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENoZWNrYm94TGlzdDtcbn0oKSk7XG5leHBvcnRzLkNoZWNrYm94TGlzdCA9IENoZWNrYm94TGlzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xucmVxdWlyZShcIi4uLy4uL2Jsb2Nrcy9kcm9wZG93bi9kcm9wZG93bi1pbml0XCIpO1xucmVxdWlyZShcIi4uLy4uL2Jsb2Nrcy9zbGljay9zbGljay1pbml0XCIpO1xucmVxdWlyZShcIi4uLy4uL2Jsb2Nrcy9yYW5nZS1zbGlkZXIvcmFuZ2Utc2xpZGVyXCIpO1xucmVxdWlyZShcIi4uLy4uL2Jsb2Nrcy9wYWdpbmF0aW9uL3BhZ2luYXRpb24taW5pdFwiKTtcbnJlcXVpcmUoXCIuLi8uLi9ibG9ja3MvY2hlY2tib3gtbGlzdC9jaGVja2JveC1saXN0XCIpO1xucmVxdWlyZShcIi4uLy4uL3Njc3MvbWFpbi5zY3NzXCIpO1xucmVxdWlyZShcIi4vcm9vbS1zZWFyY2guc2Nzc1wiKTtcbnJlcXVpcmUoXCIuLi8uLi9ibG9ja3MvYnVyZ2VyL2J1cmdlci1pbml0XCIpO1xucmVxdWlyZShcIi4uLy4uL2Jsb2Nrcy9jYWxlbmRhci9jYWxlbmRhci1pbml0XCIpO1xuLyog0L/RgNC+0LLQtdGA0Y/RjiDQv9C40LrRgdC10LvRjCDQv9C10YDRhNC10LrRgiDRh9C10YDQtdC3INGB0LLQvtC5INC/0LvQsNCz0LjQvSwg0L/QvtGB0LvQtSDQutCw0LbQtNC+0LPQviDQuNC30LzQtdC90LXQvdC40Y8sXG7RjyDQv9C+0YLQvtC8INGD0LTQsNC70Y4g0Y3RgtC4INC/0YPRgtC4INC/0L7RgdC70LUg0L/RgNC+0LLQtdGA0L7QuiAqL1xuLy9pbXBvcnQgJy4uLy4uLy4uL3BpeGVsLmpzJ1xuLy9pbXBvcnQgJy4uLy4uLy4uL3BpeGVsLmNzcydcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcm9vbS1zZWFyY2guc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jvb20tc2VhcmNoLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcm9vbS1zZWFyY2guc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=