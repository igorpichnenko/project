!function(t){var e={};function n(i){if(e[i])return e[i].exports;var u=e[i]={i:i,l:!1,exports:{}};return t[i].call(u.exports,u,u.exports,n),u.l=!0,u.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)n.d(i,u,function(e){return t[e]}.bind(null,u));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=33)}([,function(t,e,n){var i,u,s={},r=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===u&&(u=i.apply(this,arguments)),u}),a=function(t,e){return e?e.querySelector(t):document.querySelector(t)},o=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var i=a.call(this,t,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}}(),l=null,h=0,c=[],d=n(4);function f(t,e){for(var n=0;n<t.length;n++){var i=t[n],u=s[i.id];if(u){u.refs++;for(var r=0;r<u.parts.length;r++)u.parts[r](i.parts[r]);for(;r<i.parts.length;r++)u.parts.push(y(i.parts[r],e))}else{var a=[];for(r=0;r<i.parts.length;r++)a.push(y(i.parts[r],e));s[i.id]={id:i.id,refs:1,parts:a}}}}function p(t,e){for(var n=[],i={},u=0;u<t.length;u++){var s=t[u],r=e.base?s[0]+e.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};i[r]?i[r].parts.push(a):n.push(i[r]={id:r,parts:[a]})}return n}function v(t,e){var n=o(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=c[c.length-1];if("top"===t.insertAt)i?i.nextSibling?n.insertBefore(e,i.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var u=o(t.insertAt.before,n);n.insertBefore(e,u)}}function k(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function g(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return n.nc}();i&&(t.attrs.nonce=i)}return m(e,t.attrs),v(t,e),e}function m(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function y(t,e){var n,i,u,s;if(e.transform&&t.css){if(!(s="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=s}if(e.singleton){var r=h++;n=l||(l=g(e)),i=A.bind(null,n,r,!1),u=A.bind(null,n,r,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),v(t,e),e}(e),i=E.bind(null,n,e),u=function(){k(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),i=C.bind(null,n),u=function(){k(n)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else u()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return f(n,e),function(t){for(var i=[],u=0;u<n.length;u++){var r=n[u];(a=s[r.id]).refs--,i.push(a)}t&&f(p(t,e),e);for(u=0;u<i.length;u++){var a;if(0===(a=i[u]).refs){for(var o=0;o<a.parts.length;o++)a.parts[o]();delete s[a.id]}}}};var _,b=(_=[],function(t,e){return _[t]=e,_.filter(Boolean).join("\n")});function A(t,e,n,i){var u=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=b(e,u);else{var s=document.createTextNode(u),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(s,r[e]):t.appendChild(s)}}function C(t,e){var n=e.css,i=e.media;if(i&&t.setAttribute("media",i),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function E(t,e,n){var i=n.css,u=n.sourceMap,s=void 0===e.convertToAbsoluteUrls&&u;(e.convertToAbsoluteUrls||s)&&(i=d(i)),u&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(u))))+" */");var r=new Blob([i],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}},function(t,e,n){var i=n(3);"string"==typeof i&&(i=[[t.i,i,""]]);var u={hmr:!0,transform:void 0,insertInto:void 0};n(1)(i,u);i.locals&&(t.exports=i.locals)},function(t,e,n){},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,i=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var u,s=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?t:(u=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:i+s.replace(/^\.\//,""),"url("+JSON.stringify(u)+")")}))}},,function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}n.r(e);var u=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.items=e,this.getElement(),this.handlersBind(),this.checkValue(),this.update=n}var e,n,u;return e=t,(n=[{key:"getElement",value:function(){var t=this;this.option=this.items.querySelector(".dropdown-counters__controls"),this.input=this.items.querySelector(".dropdown-counters__value"),this.max=Number(this.input.max),this.min=Number(this.input.min),this.value=Number(this.input.value),this.plusAll=this.items.querySelectorAll(".dropdown-counters__plus"),this.plusAll.forEach((function(e){t.plusButton=e})),this.minusAll=this.items.querySelectorAll(".dropdown-counters__minus"),this.minusAll.forEach((function(e){t.minusButton=e}))}},{key:"handlersBind",value:function(){this.handlerButtonPlusClick=this.handlerButtonPlusClick.bind(this),this.plusButton.addEventListener("click",this.handlerButtonPlusClick),this.handlerButtonMinusClick=this.handlerButtonMinusClick.bind(this),this.minusButton.addEventListener("click",this.handlerButtonMinusClick)}},{key:"handlerButtonPlusClick",value:function(){this.upValue(this.value+1)}},{key:"handlerButtonMinusClick",value:function(){this.upValue(this.value-1)}},{key:"upValue",value:function(t){var e=0===t;t<=this.max&&t>=this.min&&(this.value=t),e&&(this.value=this.min),this.updateValue(),this.checkValue(),this.update()}},{key:"updateValue",value:function(){this.input.value=this.value}},{key:"checkValue",value:function(){this.value===this.min?this.deactivateMinus():this.activateMinus(),this.value===this.max?this.deactivatePlus():this.activatePlus()}},{key:"isMin",value:function(){return this.value===this.min}},{key:"isZero",value:function(){return 0===this.value}},{key:"getValue",value:function(){return this.value}},{key:"activatePlus",value:function(){this.plusButton.classList.contains("dropdown-counters__plus_disabled")&&(this.plusButton.classList.remove("dropdown-counters__plus_disabled"),this.plusButton.removeAttribute("disabled"))}},{key:"deactivatePlus",value:function(){this.plusButton.classList.add("dropdown-counters__plus_disabled"),this.plusButton.setAttribute("disabled","true")}},{key:"activateMinus",value:function(){this.minusButton.classList.contains("dropdown-counters__minus_disabled")&&this.minusButton.classList.remove("dropdown-counters__minus_disabled")}},{key:"deactivateMinus",value:function(){this.minusButton.classList.add("dropdown-counters__minus_disabled")}}])&&i(e.prototype,n),u&&i(e,u),t}();function s(t){return function(t){if(Array.isArray(t))return r(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var o=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.dropdown=e,this.findElement(),this.handlersBind(),this.defaultSum(),this.controls=s(this.values).map((function(t){return new u(t,(function(){return n.update()}))})),this.update()}var e,n,i;return e=t,(n=[{key:"findElement",value:function(){this.menu=this.dropdown.querySelector(".dropdown__menu"),this.toggle=this.dropdown.querySelector(".dropdown__section"),this.title=this.dropdown.querySelector(".dropdown__title"),this.isGuests=this.dropdown.classList.contains("dropdown_guest"),this.defaultTitle=this.dropdown.dataset.default||"",this.values=this.dropdown.querySelectorAll(".dropdown-counters"),this.buttonClear=this.dropdown.querySelector(".dropdown__button_clear")||void 0,this.buttonUse=this.dropdown.querySelector(".dropdown__button_use")||void 0}},{key:"handlersBind",value:function(){this.handlerMenuClick=this.handlerMenuClick.bind(this),this.toggle.addEventListener("click",this.handlerMenuClick),this.handlerDocumentClick=this.handlerDocumentClick.bind(this),document.addEventListener("click",this.handlerDocumentClick),this.buttonUse&&(this.handlerUseButtonClick=this.handlerUseButtonClick.bind(this)),this.buttonUse.addEventListener("click",this.handlerUseButtonClick),this.buttonClear&&(this.handlerButtonClearClick=this.handlerButtonClearClick.bind(this)),this.buttonClear.addEventListener("click",this.handlerButtonClearClick)}},{key:"handlerMenuClick",value:function(){this.menu.classList.toggle("dropdown_active"),this.title.classList.toggle("title-active")}},{key:"handlerDocumentClick",value:function(t){t.target.closest(".dropdown")!==this.dropdown&&this.closeDropdown()}},{key:"closeDropdown",value:function(){this.menu.classList.contains("dropdown_active")&&this.menu.classList.remove("dropdown_active")}},{key:"handlerUseButtonClick",value:function(t){0!==this.sumGuests&&(t.preventDefault(),this.closeDropdown())}},{key:"handlerButtonClearClick",value:function(t){t.preventDefault(),this.controls.forEach((function(t){t.upValue(0)}))}},{key:"update",value:function(){this.updateTitle(),this.checkAdultButtonUse()}},{key:"checkButtonClear",value:function(){!0==!this.controls.map((function(t){return t.isMin()})).includes(!1)?this.hiddenClearButton():this.visibleClearButton()}},{key:"checkButtonUse",value:function(){!0==!this.controls.map((function(t){return t.isZero()})).includes(!1)?this.hiddenButtonUse():this.visibleButtonUse()}},{key:"checkAdultButtonUse",value:function(){0===this.sumAdult&&this.sumBabies>0&&this.hiddenButtonUse()}},{key:"hiddenClearButton",value:function(){this.buttonClear.style.display="none"}},{key:"visibleClearButton",value:function(){this.buttonClear.style.display="block"}},{key:"hiddenButtonUse",value:function(){this.buttonUse.style.display="none"}},{key:"visibleButtonUse",value:function(){this.buttonUse.style.display="block"}},{key:"formDeclension",value:function(t,e){var n=(t=Math.abs(t)%100)%10,i=n>1&&n<5;return t>10&&t<20?e[2]:i?e[1]:1===n?e[0]:e[2]}},{key:"defaultSum",value:function(){var t=this,e=0;this.values.forEach((function(n){t.AllInput=n.querySelectorAll(".dropdown-counters__value"),t.AllInput.forEach((function(t){e+=Number(t.value)}))})),this.DefaultSum=e}},{key:"updateTitle",value:function(){!0===this.isGuests?this.updateDropdownGuests():this.updateDropdownRoom()}},{key:"updateDropdownGuests",value:function(){var t=this,e=this.controls.map((function(t){return t.getValue()})),n=[e[0],e[1],e[2]],i=n[0],u=n[1],s=n[2];if(this.sumGuests=i+u+s,this.sumAdult=i+u,this.sumBabies=s,this.sumAdult<10?this.controls.map((function(t){return t.activatePlus()})):(this.sumAdult=10,this.length=this.controls.length,this.controls.forEach((function(e,n){n!==t.length-1&&e.deactivatePlus()}))),10===s){var r=this.controls.length;this.controls.forEach((function(t,e){e===r-1&&t.deactivatePlus()}))}i>0||u>0?(this.checkButtonClear(),this.checkButtonUse()):this.checkButtonClear(),this.messageGuests=this.formDeclension(this.sumAdult,["гость","гостя","гостей"]),this.messageNewborns=this.formDeclension(this.sumBabies,["младенец","младенца","младенцев"]);var a=0===this.sumBabies&&0===this.sumAdult,o=0!==this.sumAdult&&0===this.sumBabies;this.title.innerHTML=a?"Сколько гостей":o?"".concat(this.sumAdult," ").concat(this.messageGuests):"".concat(this.sumAdult," ").concat(this.messageGuests,", ").concat(this.sumBabies," ").concat(this.messageNewborns)}},{key:"updateDropdownRoom",value:function(){var t=this.controls.map((function(t){return t.getValue()})),e=[t[0],t[1],t[2]],n=e[0],i=e[1],u=e[2],s=n+i+u;s!==this.DefaultSum&&(this.checkButtonClear(),this.checkButtonUse());var r=this.formDeclension(n,["спальня","спальни","спален"]),a=this.formDeclension(i,["кровать","кровати","кроватей"]),o=this.formDeclension(u,["ванная","ванные","ванных"]),l=s>0&&u>0;this.title.innerHTML=l?"".concat(n," ").concat(r,", ").concat(i," ").concat(a,",").concat(u," ").concat(o)+"...":"".concat(n," ").concat(r,", ").concat(i," ").concat(a,"...")}}])&&a(e.prototype,n),i&&a(e,i),t}();window.addEventListener("load",(function(){document.querySelectorAll(".dropdown").forEach((function(t){return new o(t)}))}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(8);document.querySelectorAll(".js-header-main").forEach((function(t){new i.Burger(t)}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Burger=void 0;var i=function(){function t(t){this.header=t,this.elements=this.findElement(),this.bindEventListeners()}return t.prototype.findElement=function(){return[this.header.querySelector(".js-header-nav"),this.header.querySelector(".js-burger__item")]},t.prototype.bindEventListeners=function(){this.handleButtonClick=this.handleButtonClick.bind(this),this.elements[1].addEventListener("click",this.handleButtonClick)},t.prototype.handleButtonClick=function(){this.elements[1].classList.toggle("js-active"),this.elements[0].classList.toggle("js__open-menu")},t}();e.Burger=i},,,,,,,,,function(t,e,n){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(n(18)).default(document.querySelector(".input_mask"),{mask:Date,min:new Date(1990,0,1),max:new Date(2020,0,1),lazy:!0})},function(t,e,n){"use strict";function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function r(t,e,n){return e&&s(t.prototype,e),n&&s(t,n),t}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}function o(t){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function h(t,e){if(null==t)return{};var n,i,u=function(t,e){if(null==t)return{};var n,i,u={},s=Object.keys(t);for(i=0;i<s.length;i++)n=s[i],e.indexOf(n)>=0||(u[n]=t[n]);return u}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(i=0;i<s.length;i++)n=s[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(u[n]=t[n])}return u}function c(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function d(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=o(t)););return t}function f(t,e,n){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var i=d(t,e);if(i){var u=Object.getOwnPropertyDescriptor(i,e);return u.get?u.get.call(n):u.value}})(t,e,n||t)}function p(t,e,n,i){return(p="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,i){var u,s=d(t,e);if(s){if((u=Object.getOwnPropertyDescriptor(s,e)).set)return u.set.call(i,n),!0;if(!u.writable)return!1}if(u=Object.getOwnPropertyDescriptor(i,e)){if(!u.writable)return!1;u.value=n,Object.defineProperty(i,e,u)}else!function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(i,e,n);return!0})(t,e,n,i)}function v(t,e,n,i,u){if(!p(t,e,n,i||t)&&u)throw new Error("failed to set property");return n}function k(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t))&&"[object Arguments]"!==Object.prototype.toString.call(t))return;var n=[],i=!0,u=!1,s=void 0;try{for(var r,a=t[Symbol.iterator]();!(i=(r=a.next()).done)&&(n.push(r.value),!e||n.length!==e);i=!0);}catch(t){u=!0,s=t}finally{try{i||null==a.return||a.return()}finally{if(u)throw s}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(t){return"string"==typeof t||t instanceof String}n.r(e),n.d(e,"Masked",(function(){return M})),n.d(e,"createMask",(function(){return T})),n.d(e,"MaskedRegExp",(function(){return L})),n.d(e,"MaskedPattern",(function(){return q})),n.d(e,"MaskedRange",(function(){return H})),n.d(e,"MaskedDate",(function(){return Y})),n.d(e,"MaskElement",(function(){return $})),n.d(e,"HTMLMaskElement",(function(){return W})),n.d(e,"HTMLContenteditableMaskElement",(function(){return X})),n.d(e,"InputMask",(function(){return tt})),n.d(e,"MaskedEnum",(function(){return it})),n.d(e,"MaskedNumber",(function(){return st})),n.d(e,"MaskedFunction",(function(){return at})),n.d(e,"MaskedDynamic",(function(){return lt})),n.d(e,"PIPE_TYPE",(function(){return ht})),n.d(e,"createPipe",(function(){return ct})),n.d(e,"pipe",(function(){return dt}));var m="NONE",y="LEFT",_="FORCE_LEFT",b="RIGHT",A="FORCE_RIGHT";function C(t){switch(t){case y:return _;case b:return A;default:return t}}function E(t){return t.replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1")}var B=function(){function t(e,n,i,s){for(u(this,t),this.value=e,this.cursorPos=n,this.oldValue=i,this.oldSelection=s;this.value.slice(0,this.startChangePos)!==this.oldValue.slice(0,this.startChangePos);)--this.oldSelection.start}return r(t,[{key:"startChangePos",get:function(){return Math.min(this.cursorPos,this.oldSelection.start)}},{key:"insertedCount",get:function(){return this.cursorPos-this.startChangePos}},{key:"inserted",get:function(){return this.value.substr(this.startChangePos,this.insertedCount)}},{key:"removedCount",get:function(){return Math.max(this.oldSelection.end-this.startChangePos||this.oldValue.length-this.value.length,0)}},{key:"removed",get:function(){return this.oldValue.substr(this.startChangePos,this.removedCount)}},{key:"head",get:function(){return this.value.substring(0,this.startChangePos)}},{key:"tail",get:function(){return this.value.substring(this.startChangePos+this.insertedCount)}},{key:"removeDirection",get:function(){return!this.removedCount||this.insertedCount?m:this.oldSelection.end===this.cursorPos||this.oldSelection.start===this.cursorPos?b:y}}]),t}(),S=function(){function t(e){u(this,t),Object.assign(this,{inserted:"",rawInserted:"",skip:!1,tailShift:0},e)}return r(t,[{key:"aggregate",value:function(t){return this.rawInserted+=t.rawInserted,this.skip=this.skip||t.skip,this.inserted+=t.inserted,this.tailShift+=t.tailShift,this}},{key:"offset",get:function(){return this.tailShift+this.inserted.length}}]),t}(),F=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2?arguments[2]:void 0;u(this,t),this.value=e,this.from=n,this.stop=i}return r(t,[{key:"toString",value:function(){return this.value}},{key:"extend",value:function(t){this.value+=String(t)}},{key:"appendTo",value:function(t){return t.append(this.toString(),{tail:!0}).aggregate(t._appendPlaceholder())}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.value.length)return"";var e=this.value[0];return this.value=this.value.slice(1),e}},{key:"state",get:function(){return{value:this.value,from:this.from,stop:this.stop}},set:function(t){Object.assign(this,t)}}]),t}();var w=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new t.InputMask(e,n)},D=function(){function t(e){u(this,t),this._value="",this._update(Object.assign({},t.DEFAULTS,{},e)),this.isInitialized=!0}return r(t,[{key:"updateOptions",value:function(t){Object.keys(t).length&&this.withValueRefresh(this._update.bind(this,t))}},{key:"_update",value:function(t){Object.assign(this,t)}},{key:"reset",value:function(){this._value=""}},{key:"resolve",value:function(t){return this.reset(),this.append(t,{input:!0},""),this.doCommit(),this.value}},{key:"nearestInputPos",value:function(t,e){return t}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return this.value.slice(t,e)}},{key:"extractTail",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return new F(this.extractInput(t,e),t)}},{key:"appendTail",value:function(t){return g(t)&&(t=new F(String(t))),t.appendTo(this)}},{key:"_appendCharRaw",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t=this.doPrepare(t,e))?(this._value+=t,new S({inserted:t,rawInserted:t})):new S}},{key:"_appendChar",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,i=this.state,u=this._appendCharRaw(t,e);if(u.inserted){var s,r=!1!==this.doValidate(e);if(r&&null!=n){var a=this.state;this.overwrite&&(s=n.state,n.shiftBefore(this.value.length));var o=this.appendTail(n);(r=o.rawInserted===n.toString())&&o.inserted&&(this.state=a)}r||(u=new S,this.state=i,n&&s&&(n.state=s))}return u}},{key:"_appendPlaceholder",value:function(){return new S}},{key:"append",value:function(t,e,n){if(!g(t))throw new Error("value should be string");var i=new S,u=g(n)?new F(String(n)):n;e.tail&&(e._beforeTailState=this.state);for(var s=0;s<t.length;++s)i.aggregate(this._appendChar(t[s],e,u));return null!=u&&(i.tailShift+=this.appendTail(u).tailShift),i}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return this._value=this.value.slice(0,t)+this.value.slice(e),new S}},{key:"withValueRefresh",value:function(t){if(this._refreshing||!this.isInitialized)return t();this._refreshing=!0;var e=this.rawInputValue,n=this.value,i=t();return this.rawInputValue=e,this.value!==n&&0===n.indexOf(this.value)&&this.append(n.slice(this.value.length),{},""),delete this._refreshing,i}},{key:"runIsolated",value:function(t){if(this._isolated||!this.isInitialized)return t(this);this._isolated=!0;var e=this.state,n=t(this);return this.state=e,delete this._isolated,n}},{key:"doPrepare",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.prepare?this.prepare(t,this,e):t}},{key:"doValidate",value:function(t){return(!this.validate||this.validate(this.value,this,t))&&(!this.parent||this.parent.doValidate(t))}},{key:"doCommit",value:function(){this.commit&&this.commit(this.value,this)}},{key:"doFormat",value:function(t){return this.format?this.format(t,this):t}},{key:"doParse",value:function(t){return this.parse?this.parse(t,this):t}},{key:"splice",value:function(t,e,n,i){var u=t+e,s=this.extractTail(u),r=this.nearestInputPos(t,i);return new S({tailShift:r-t}).aggregate(this.remove(r)).aggregate(this.append(n,{input:!0},s))}},{key:"state",get:function(){return{_value:this.value}},set:function(t){this._value=t._value}},{key:"value",get:function(){return this._value},set:function(t){this.resolve(t)}},{key:"unmaskedValue",get:function(){return this.value},set:function(t){this.reset(),this.append(t,{},""),this.doCommit()}},{key:"typedValue",get:function(){return this.doParse(this.value)},set:function(t){this.value=this.doFormat(t)}},{key:"rawInputValue",get:function(){return this.extractInput(0,this.value.length,{raw:!0})},set:function(t){this.reset(),this.append(t,{raw:!0},""),this.doCommit()}},{key:"isComplete",get:function(){return!0}}]),t}();D.DEFAULTS={format:function(t){return t},parse:function(t){return t}},w.Masked=D;var M=D;function x(t){if(null==t)throw new Error("mask property should be defined");return t instanceof RegExp?w.MaskedRegExp:g(t)?w.MaskedPattern:t instanceof Date||t===Date?w.MaskedDate:t instanceof Number||"number"==typeof t||t===Number?w.MaskedNumber:Array.isArray(t)||t===Array?w.MaskedDynamic:w.Masked&&t.prototype instanceof w.Masked?t:t instanceof Function?w.MaskedFunction:t instanceof w.Masked?t.constructor:(console.warn("Mask not found for mask",t),w.Masked)}function P(t){if(w.Masked&&t instanceof w.Masked)return t;var e=(t=Object.assign({},t)).mask;if(w.Masked&&e instanceof w.Masked)return e;var n=x(e);if(!n)throw new Error("Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.");return new n(t)}w.createMask=P;var T=P,I={0:/\d/,a:/[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,"*":/./},O=function(){function t(e){u(this,t);var n=e.mask,i=h(e,["mask"]);this.masked=T({mask:n}),Object.assign(this,i)}return r(t,[{key:"reset",value:function(){this._isFilled=!1,this.masked.reset()}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length;return 0===t&&e>=1?(this._isFilled=!1,this.masked.remove(t,e)):new S}},{key:"_appendChar",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this._isFilled)return new S;var n=this.masked.state,i=this.masked._appendChar(t,e);return i.inserted&&!1===this.doValidate(e)&&(i.inserted=i.rawInserted="",this.masked.state=n),i.inserted||this.isOptional||this.lazy||e.input||(i.inserted=this.placeholderChar),i.skip=!i.inserted&&!this.isOptional,this._isFilled=Boolean(i.inserted),i}},{key:"append",value:function(){var t;return(t=this.masked).append.apply(t,arguments)}},{key:"_appendPlaceholder",value:function(){var t=new S;return this._isFilled||this.isOptional||(this._isFilled=!0,t.inserted=this.placeholderChar),t}},{key:"extractTail",value:function(){var t;return(t=this.masked).extractTail.apply(t,arguments)}},{key:"appendTail",value:function(){var t;return(t=this.masked).appendTail.apply(t,arguments)}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=arguments.length>2?arguments[2]:void 0;return this.masked.extractInput(t,e,n)}},{key:"nearestInputPos",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:m,n=0,i=this.value.length,u=Math.min(Math.max(t,n),i);switch(e){case y:case _:return this.isComplete?u:n;case b:case A:return this.isComplete?u:i;case m:default:return u}}},{key:"doValidate",value:function(){var t,e;return(t=this.masked).doValidate.apply(t,arguments)&&(!this.parent||(e=this.parent).doValidate.apply(e,arguments))}},{key:"doCommit",value:function(){this.masked.doCommit()}},{key:"value",get:function(){return this.masked.value||(this._isFilled&&!this.isOptional?this.placeholderChar:"")}},{key:"unmaskedValue",get:function(){return this.masked.unmaskedValue}},{key:"isComplete",get:function(){return Boolean(this.masked.value)||this.isOptional}},{key:"state",get:function(){return{masked:this.masked.state,_isFilled:this._isFilled}},set:function(t){this.masked.state=t.masked,this._isFilled=t._isFilled}}]),t}(),j=function(){function t(e){u(this,t),Object.assign(this,e),this._value=""}return r(t,[{key:"reset",value:function(){this._isRawInput=!1,this._value=""}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._value.length;return this._value=this._value.slice(0,t)+this._value.slice(e),this._value||(this._isRawInput=!1),new S}},{key:"nearestInputPos",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:m,n=0,i=this._value.length;switch(e){case y:case _:return n;case m:case b:case A:default:return i}}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._value.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.raw&&this._isRawInput&&this._value.slice(t,e)||""}},{key:"_appendChar",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new S;if(this._value)return n;var i=this.char===t[0],u=i&&(this.isUnmasking||e.input||e.raw)&&!e.tail;return u&&(n.rawInserted=this.char),this._value=n.inserted=this.char,this._isRawInput=u&&(e.raw||e.input),n}},{key:"_appendPlaceholder",value:function(){var t=new S;return this._value||(this._value=t.inserted=this.char),t}},{key:"extractTail",value:function(){arguments.length>1&&void 0!==arguments[1]||this.value.length;return new F("")}},{key:"appendTail",value:function(t){return g(t)&&(t=new F(String(t))),t.appendTo(this)}},{key:"append",value:function(t,e,n){var i=this._appendChar(t,e);return null!=n&&(i.tailShift+=this.appendTail(n).tailShift),i}},{key:"doCommit",value:function(){}},{key:"value",get:function(){return this._value}},{key:"unmaskedValue",get:function(){return this.isUnmasking?this.value:""}},{key:"isComplete",get:function(){return!0}},{key:"state",get:function(){return{_value:this._value,_isRawInput:this._isRawInput}},set:function(t){Object.assign(this,t)}}]),t}(),V=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;u(this,t),this.chunks=e,this.from=n}return r(t,[{key:"toString",value:function(){return this.chunks.map(String).join("")}},{key:"extend",value:function(e){if(String(e)){g(e)&&(e=new F(String(e)));var n=this.chunks[this.chunks.length-1],i=n&&(n.stop===e.stop||null==e.stop)&&e.from===n.from+n.toString().length;if(e instanceof F)i?n.extend(e.toString()):this.chunks.push(e);else if(e instanceof t){if(null==e.stop)for(var u;e.chunks.length&&null==e.chunks[0].stop;)(u=e.chunks.shift()).from+=e.from,this.extend(u);e.toString()&&(e.stop=e.blockIndex,this.chunks.push(e))}}}},{key:"appendTo",value:function(e){if(!(e instanceof w.MaskedPattern))return new F(this.toString()).appendTo(e);for(var n=new S,i=0;i<this.chunks.length&&!n.skip;++i){var u=this.chunks[i],s=e._mapPosToBlock(e.value.length),r=u.stop,a=void 0;if(null!=r&&(!s||s.index<=r)&&((u instanceof t||e._stops.indexOf(r)>=0)&&n.aggregate(e._appendPlaceholder(r)),a=u instanceof t&&e._blocks[r]),a){var o=a.appendTail(u);o.skip=!1,n.aggregate(o),e._value+=o.inserted;var l=u.toString().slice(o.rawInserted.length);l&&n.aggregate(e.append(l,{tail:!0}))}else n.aggregate(e.append(u.toString(),{tail:!0}))}return n}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.chunks.length)return"";for(var e=t-this.from,n=0;n<this.chunks.length;){var i=this.chunks[n],u=i.shiftBefore(e);if(i.toString()){if(!u)break;++n}else this.chunks.splice(n,1);if(u)return u}return""}},{key:"state",get:function(){return{chunks:this.chunks.map((function(t){return t.state})),from:this.from,stop:this.stop,blockIndex:this.blockIndex}},set:function(e){var n=e.chunks,i=h(e,["chunks"]);Object.assign(this,i),this.chunks=n.map((function(e){var n="chunks"in e?new t:new F;return n.state=e,n}))}}]),t}(),R=function(t){function e(){return u(this,e),c(this,o(e).apply(this,arguments))}return a(e,t),r(e,[{key:"_update",value:function(t){t.mask&&(t.validate=function(e){return e.search(t.mask)>=0}),f(o(e.prototype),"_update",this).call(this,t)}}]),e}(M);w.MaskedRegExp=R;var L=R,U=function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return u(this,e),t.definitions=Object.assign({},I,t.definitions),c(this,o(e).call(this,Object.assign({},e.DEFAULTS,{},t)))}return a(e,t),r(e,[{key:"_update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.definitions=Object.assign({},this.definitions,t.definitions),f(o(e.prototype),"_update",this).call(this,t),this._rebuildMask()}},{key:"_rebuildMask",value:function(){var t=this,n=this.definitions;this._blocks=[],this._stops=[],this._maskedBlocks={};var i=this.mask;if(i&&n)for(var u=!1,s=!1,r=0;r<i.length;++r){if(this.blocks)if("continue"===function(){var e=i.slice(r),n=Object.keys(t.blocks).filter((function(t){return 0===e.indexOf(t)}));n.sort((function(t,e){return e.length-t.length}));var u=n[0];if(u){var s=T(Object.assign({parent:t,lazy:t.lazy,placeholderChar:t.placeholderChar,overwrite:t.overwrite},t.blocks[u]));return s&&(t._blocks.push(s),t._maskedBlocks[u]||(t._maskedBlocks[u]=[]),t._maskedBlocks[u].push(t._blocks.length-1)),r+=u.length-1,"continue"}}())continue;var a=i[r],o=a in n;if(a!==e.STOP_CHAR)if("{"!==a&&"}"!==a)if("["!==a&&"]"!==a){if(a===e.ESCAPE_CHAR){if(++r,!(a=i[r]))break;o=!1}var l=o?new O({parent:this,lazy:this.lazy,placeholderChar:this.placeholderChar,mask:n[a],isOptional:s}):new j({char:a,isUnmasking:u});this._blocks.push(l)}else s=!s;else u=!u;else this._stops.push(this._blocks.length)}}},{key:"reset",value:function(){f(o(e.prototype),"reset",this).call(this),this._blocks.forEach((function(t){return t.reset()}))}},{key:"doCommit",value:function(){this._blocks.forEach((function(t){return t.doCommit()})),f(o(e.prototype),"doCommit",this).call(this)}},{key:"appendTail",value:function(t){return f(o(e.prototype),"appendTail",this).call(this,t).aggregate(this._appendPlaceholder())}},{key:"_appendCharRaw",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t=this.doPrepare(t,e);var n=this._mapPosToBlock(this.value.length),i=new S;if(!n)return i;for(var u=n.index;;++u){var s=this._blocks[u];if(!s)break;var r=s._appendChar(t,e),a=r.skip;if(i.aggregate(r),a||r.rawInserted)break}return i}},{key:"extractTail",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=new V;return e===n||this._forEachBlocksInRange(e,n,(function(e,n,u,s){var r=e.extractTail(u,s);r.stop=t._findStopBefore(n),r.from=t._blockStartPos(n),r instanceof V&&(r.blockIndex=n),i.extend(r)})),i}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(t===e)return"";var i="";return this._forEachBlocksInRange(t,e,(function(t,e,u,s){i+=t.extractInput(u,s,n)})),i}},{key:"_findStopBefore",value:function(t){for(var e,n=0;n<this._stops.length;++n){var i=this._stops[n];if(!(i<=t))break;e=i}return e}},{key:"_appendPlaceholder",value:function(t){var e=this,n=new S;if(this.lazy&&null==t)return n;var i=this._mapPosToBlock(this.value.length);if(!i)return n;var u=i.index,s=null!=t?t:this._blocks.length;return this._blocks.slice(u,s).forEach((function(i){if(!i.lazy||null!=t){var u=null!=i._blocks?[i._blocks.length]:[],s=i._appendPlaceholder.apply(i,u);e._value+=s.inserted,n.aggregate(s)}})),n}},{key:"_mapPosToBlock",value:function(t){for(var e="",n=0;n<this._blocks.length;++n){var i=this._blocks[n],u=e.length;if(t<=(e+=i.value).length)return{index:n,offset:t-u}}}},{key:"_blockStartPos",value:function(t){return this._blocks.slice(0,t).reduce((function(t,e){return t+e.value.length}),0)}},{key:"_forEachBlocksInRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=arguments.length>2?arguments[2]:void 0,i=this._mapPosToBlock(t);if(i){var u=this._mapPosToBlock(e),s=u&&i.index===u.index,r=i.offset,a=u&&s?u.offset:this._blocks[i.index].value.length;if(n(this._blocks[i.index],i.index,r,a),u&&!s){for(var o=i.index+1;o<u.index;++o)n(this._blocks[o],o,0,this._blocks[o].value.length);n(this._blocks[u.index],u.index,0,u.offset)}}}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=f(o(e.prototype),"remove",this).call(this,t,n);return this._forEachBlocksInRange(t,n,(function(t,e,n,u){i.aggregate(t.remove(n,u))})),i}},{key:"nearestInputPos",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:m,n=this._mapPosToBlock(t)||{index:0,offset:0},i=n.offset,u=n.index,s=this._blocks[u];if(!s)return t;var r=i;0!==r&&r<s.value.length&&(r=s.nearestInputPos(i,C(e)));var a=r===s.value.length,o=0===r;if(!o&&!a)return this._blockStartPos(u)+r;var l=a?u+1:u;if(e===m){if(l>0){var h=l-1,c=this._blocks[h],d=c.nearestInputPos(0,m);if(!c.value.length||d!==c.value.length)return this._blockStartPos(l)}for(var f=l,p=f;p<this._blocks.length;++p){var v=this._blocks[p],k=v.nearestInputPos(0,m);if(!v.value.length||k!==v.value.length)return this._blockStartPos(p)+k}for(var g=l-1;g>=0;--g){var E=this._blocks[g],B=E.nearestInputPos(0,m);if(!E.value.length||B!==E.value.length)return this._blockStartPos(g)+E.value.length}return t}if(e===y||e===_){for(var S,F=l;F<this._blocks.length;++F)if(this._blocks[F].value){S=F;break}if(null!=S){var w=this._blocks[S],D=w.nearestInputPos(0,b);if(0===D&&w.unmaskedValue.length)return this._blockStartPos(S)+D}for(var M,x=-1,P=l-1;P>=0;--P){var T=this._blocks[P],I=T.nearestInputPos(T.value.length,_);if(T.value&&0===I||(M=P),0!==I){if(I!==T.value.length)return this._blockStartPos(P)+I;x=P;break}}if(e===y)for(var O=x+1;O<=Math.min(l,this._blocks.length-1);++O){var j=this._blocks[O],V=j.nearestInputPos(0,m),R=this._blockStartPos(O)+V;if(R>t)break;if(V!==j.value.length)return R}if(x>=0)return this._blockStartPos(x)+this._blocks[x].value.length;if(e===_||this.lazy&&!this.extractInput()&&!N(this._blocks[l]))return 0;if(null!=M)return this._blockStartPos(M);for(var L=l;L<this._blocks.length;++L){var U=this._blocks[L],q=U.nearestInputPos(0,m);if(!U.value.length||q!==U.value.length)return this._blockStartPos(L)+q}return 0}if(e===b||e===A){for(var z,H,G=l;G<this._blocks.length;++G){var Y=this._blocks[G],Z=Y.nearestInputPos(0,m);if(Z!==Y.value.length){H=this._blockStartPos(G)+Z,z=G;break}}if(null!=z&&null!=H){for(var $=z;$<this._blocks.length;++$){var K=this._blocks[$],W=K.nearestInputPos(0,A);if(W!==K.value.length)return this._blockStartPos($)+W}return e===A?this.value.length:H}for(var J=Math.min(l,this._blocks.length-1);J>=0;--J){var X=this._blocks[J],Q=X.nearestInputPos(X.value.length,y);if(0!==Q){var tt=this._blockStartPos(J)+Q;if(tt>=t)return tt;break}}}return t}},{key:"maskedBlock",value:function(t){return this.maskedBlocks(t)[0]}},{key:"maskedBlocks",value:function(t){var e=this,n=this._maskedBlocks[t];return n?n.map((function(t){return e._blocks[t]})):[]}},{key:"state",get:function(){return Object.assign({},f(o(e.prototype),"state",this),{_blocks:this._blocks.map((function(t){return t.state}))})},set:function(t){var n=t._blocks,i=h(t,["_blocks"]);this._blocks.forEach((function(t,e){return t.state=n[e]})),v(o(e.prototype),"state",i,this,!0)}},{key:"isComplete",get:function(){return this._blocks.every((function(t){return t.isComplete}))}},{key:"unmaskedValue",get:function(){return this._blocks.reduce((function(t,e){return t+e.unmaskedValue}),"")},set:function(t){v(o(e.prototype),"unmaskedValue",t,this,!0)}},{key:"value",get:function(){return this._blocks.reduce((function(t,e){return t+e.value}),"")},set:function(t){v(o(e.prototype),"value",t,this,!0)}}]),e}(M);function N(t){if(!t)return!1;var e=t.value;return!e||t.nearestInputPos(0,m)!==e.length}U.DEFAULTS={lazy:!0,placeholderChar:"_"},U.STOP_CHAR="`",U.ESCAPE_CHAR="\\",U.InputDefinition=O,U.FixedDefinition=j,w.MaskedPattern=U;var q=U,z=function(t){function e(){return u(this,e),c(this,o(e).apply(this,arguments))}return a(e,t),r(e,[{key:"_update",value:function(t){t=Object.assign({to:this.to||0,from:this.from||0},t);var n=String(t.to).length;null!=t.maxLength&&(n=Math.max(n,t.maxLength)),t.maxLength=n;for(var i=String(t.from).padStart(n,"0"),u=String(t.to).padStart(n,"0"),s=0;s<u.length&&u[s]===i[s];)++s;t.mask=u.slice(0,s).replace(/0/g,"\\0")+"0".repeat(n-s),f(o(e.prototype),"_update",this).call(this,t)}},{key:"boundaries",value:function(t){var e="",n="",i=k(t.match(/^(\D*)(\d*)(\D*)/)||[],3),u=i[1],s=i[2];return s&&(e="0".repeat(u.length)+s,n="9".repeat(u.length)+s),[e=e.padEnd(this.maxLength,"0"),n=n.padEnd(this.maxLength,"9")]}},{key:"doPrepare",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t=f(o(e.prototype),"doPrepare",this).call(this,t,n).replace(/\D/g,""),!this.autofix)return t;for(var i=String(this.from).padStart(this.maxLength,"0"),u=String(this.to).padStart(this.maxLength,"0"),s=this.value,r="",a=0;a<t.length;++a){var l=s+r+t[a],h=this.boundaries(l),c=k(h,2),d=c[0],p=c[1];Number(p)<this.from?r+=i[l.length-1]:Number(d)>this.to?r+=u[l.length-1]:r+=t[a]}return r}},{key:"doValidate",value:function(){var t,n=this.value,i=n.search(/[^0]/);if(-1===i&&n.length<=this._matchFrom)return!0;for(var u=this.boundaries(n),s=k(u,2),r=s[0],a=s[1],l=arguments.length,h=new Array(l),c=0;c<l;c++)h[c]=arguments[c];return this.from<=Number(a)&&Number(r)<=this.to&&(t=f(o(e.prototype),"doValidate",this)).call.apply(t,[this].concat(h))}},{key:"_matchFrom",get:function(){return this.maxLength-String(this.from).length}},{key:"isComplete",get:function(){return f(o(e.prototype),"isComplete",this)&&Boolean(this.value)}}]),e}(q);w.MaskedRange=z;var H=z,G=function(t){function e(t){return u(this,e),c(this,o(e).call(this,Object.assign({},e.DEFAULTS,{},t)))}return a(e,t),r(e,[{key:"_update",value:function(t){t.mask===Date&&delete t.mask,t.pattern&&(t.mask=t.pattern);var n=t.blocks;t.blocks=Object.assign({},e.GET_DEFAULT_BLOCKS()),t.min&&(t.blocks.Y.from=t.min.getFullYear()),t.max&&(t.blocks.Y.to=t.max.getFullYear()),t.min&&t.max&&t.blocks.Y.from===t.blocks.Y.to&&(t.blocks.m.from=t.min.getMonth()+1,t.blocks.m.to=t.max.getMonth()+1,t.blocks.m.from===t.blocks.m.to&&(t.blocks.d.from=t.min.getDate(),t.blocks.d.to=t.max.getDate())),Object.assign(t.blocks,n),Object.keys(t.blocks).forEach((function(e){var n=t.blocks[e];"autofix"in n||(n.autofix=t.autofix)})),f(o(e.prototype),"_update",this).call(this,t)}},{key:"doValidate",value:function(){for(var t,n=this.date,i=arguments.length,u=new Array(i),s=0;s<i;s++)u[s]=arguments[s];return(t=f(o(e.prototype),"doValidate",this)).call.apply(t,[this].concat(u))&&(!this.isComplete||this.isDateExist(this.value)&&null!=n&&(null==this.min||this.min<=n)&&(null==this.max||n<=this.max))}},{key:"isDateExist",value:function(t){return this.format(this.parse(t,this),this).indexOf(t)>=0}},{key:"date",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"typedValue",get:function(){return this.isComplete?f(o(e.prototype),"typedValue",this):null},set:function(t){v(o(e.prototype),"typedValue",t,this,!0)}}]),e}(q);G.DEFAULTS={pattern:"d{.}`m{.}`Y",format:function(t){return[String(t.getDate()).padStart(2,"0"),String(t.getMonth()+1).padStart(2,"0"),t.getFullYear()].join(".")},parse:function(t){var e=k(t.split("."),3),n=e[0],i=e[1],u=e[2];return new Date(u,i-1,n)}},G.GET_DEFAULT_BLOCKS=function(){return{d:{mask:H,from:1,to:31,maxLength:2},m:{mask:H,from:1,to:12,maxLength:2},Y:{mask:H,from:1900,to:9999}}},w.MaskedDate=G;var Y=G,Z=function(){function t(){u(this,t)}return r(t,[{key:"select",value:function(t,e){if(null!=t&&null!=e&&(t!==this.selectionStart||e!==this.selectionEnd))try{this._unsafeSelect(t,e)}catch(t){}}},{key:"_unsafeSelect",value:function(t,e){}},{key:"bindEvents",value:function(t){}},{key:"unbindEvents",value:function(){}},{key:"selectionStart",get:function(){var t;try{t=this._unsafeSelectionStart}catch(t){}return null!=t?t:this.value.length}},{key:"selectionEnd",get:function(){var t;try{t=this._unsafeSelectionEnd}catch(t){}return null!=t?t:this.value.length}},{key:"isActive",get:function(){return!1}}]),t}();w.MaskElement=Z;var $=Z,K=function(t){function e(t){var n;return u(this,e),(n=c(this,o(e).call(this))).input=t,n._handlers={},n}return a(e,t),r(e,[{key:"_unsafeSelect",value:function(t,e){this.input.setSelectionRange(t,e)}},{key:"bindEvents",value:function(t){var n=this;Object.keys(t).forEach((function(i){return n._toggleEventHandler(e.EVENTS_MAP[i],t[i])}))}},{key:"unbindEvents",value:function(){var t=this;Object.keys(this._handlers).forEach((function(e){return t._toggleEventHandler(e)}))}},{key:"_toggleEventHandler",value:function(t,e){this._handlers[t]&&(this.input.removeEventListener(t,this._handlers[t]),delete this._handlers[t]),e&&(this.input.addEventListener(t,e),this._handlers[t]=e)}},{key:"rootElement",get:function(){return this.input.getRootNode?this.input.getRootNode():document}},{key:"isActive",get:function(){return this.input===this.rootElement.activeElement}},{key:"_unsafeSelectionStart",get:function(){return this.input.selectionStart}},{key:"_unsafeSelectionEnd",get:function(){return this.input.selectionEnd}},{key:"value",get:function(){return this.input.value},set:function(t){this.input.value=t}}]),e}($);K.EVENTS_MAP={selectionChange:"keydown",input:"input",drop:"drop",click:"click",focus:"focus",commit:"blur"},w.HTMLMaskElement=K;var W=K,J=function(t){function e(){return u(this,e),c(this,o(e).apply(this,arguments))}return a(e,t),r(e,[{key:"_unsafeSelect",value:function(t,e){if(this.rootElement.createRange){var n=this.rootElement.createRange();n.setStart(this.input.firstChild||this.input,t),n.setEnd(this.input.lastChild||this.input,e);var i=this.rootElement,u=i.getSelection&&i.getSelection();u&&(u.removeAllRanges(),u.addRange(n))}}},{key:"_unsafeSelectionStart",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&e.anchorOffset}},{key:"_unsafeSelectionEnd",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&this._unsafeSelectionStart+String(e).length}},{key:"value",get:function(){return this.input.textContent},set:function(t){this.input.textContent=t}}]),e}(W);w.HTMLContenteditableMaskElement=J;var X=J,Q=function(){function t(e,n){u(this,t),this.el=e instanceof $?e:e.isContentEditable&&"INPUT"!==e.tagName&&"TEXTAREA"!==e.tagName?new X(e):new W(e),this.masked=T(n),this._listeners={},this._value="",this._unmaskedValue="",this._saveSelection=this._saveSelection.bind(this),this._onInput=this._onInput.bind(this),this._onChange=this._onChange.bind(this),this._onDrop=this._onDrop.bind(this),this._onFocus=this._onFocus.bind(this),this._onClick=this._onClick.bind(this),this.alignCursor=this.alignCursor.bind(this),this.alignCursorFriendly=this.alignCursorFriendly.bind(this),this._bindEvents(),this.updateValue(),this._onChange()}return r(t,[{key:"maskEquals",value:function(t){return null==t||t===this.masked.mask||t===Date&&this.masked instanceof Y}},{key:"_bindEvents",value:function(){this.el.bindEvents({selectionChange:this._saveSelection,input:this._onInput,drop:this._onDrop,click:this._onClick,focus:this._onFocus,commit:this._onChange})}},{key:"_unbindEvents",value:function(){this.el&&this.el.unbindEvents()}},{key:"_fireEvent",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];var u=this._listeners[t];u&&u.forEach((function(t){return t.apply(void 0,n)}))}},{key:"_saveSelection",value:function(){this.value!==this.el.value&&console.warn("Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly."),this._selection={start:this.selectionStart,end:this.cursorPos}}},{key:"updateValue",value:function(){this.masked.value=this.el.value,this._value=this.masked.value}},{key:"updateControl",value:function(){var t=this.masked.unmaskedValue,e=this.masked.value,n=this.unmaskedValue!==t||this.value!==e;this._unmaskedValue=t,this._value=e,this.el.value!==e&&(this.el.value=e),n&&this._fireChangeEvents()}},{key:"updateOptions",value:function(t){var e=t.mask,n=h(t,["mask"]),u=!this.maskEquals(e),s=!function t(e,n){if(n===e)return!0;var u,s=Array.isArray(n),r=Array.isArray(e);if(s&&r){if(n.length!=e.length)return!1;for(u=0;u<n.length;u++)if(!t(n[u],e[u]))return!1;return!0}if(s!=r)return!1;if(n&&e&&"object"===i(n)&&"object"===i(e)){var a=n instanceof Date,o=e instanceof Date;if(a&&o)return n.getTime()==e.getTime();if(a!=o)return!1;var l=n instanceof RegExp,h=e instanceof RegExp;if(l&&h)return n.toString()==e.toString();if(l!=h)return!1;var c=Object.keys(n);for(u=0;u<c.length;u++)if(!Object.prototype.hasOwnProperty.call(e,c[u]))return!1;for(u=0;u<c.length;u++)if(!t(e[c[u]],n[c[u]]))return!1;return!0}return!(!n||!e||"function"!=typeof n||"function"!=typeof e)&&n.toString()===e.toString()}(this.masked,n);u&&(this.mask=e),s&&this.masked.updateOptions(n),(u||s)&&this.updateControl()}},{key:"updateCursor",value:function(t){null!=t&&(this.cursorPos=t,this._delayUpdateCursor(t))}},{key:"_delayUpdateCursor",value:function(t){var e=this;this._abortUpdateCursor(),this._changingCursorPos=t,this._cursorChanging=setTimeout((function(){e.el&&(e.cursorPos=e._changingCursorPos,e._abortUpdateCursor())}),10)}},{key:"_fireChangeEvents",value:function(){this._fireEvent("accept",this._inputEvent),this.masked.isComplete&&this._fireEvent("complete",this._inputEvent)}},{key:"_abortUpdateCursor",value:function(){this._cursorChanging&&(clearTimeout(this._cursorChanging),delete this._cursorChanging)}},{key:"alignCursor",value:function(){this.cursorPos=this.masked.nearestInputPos(this.cursorPos,y)}},{key:"alignCursorFriendly",value:function(){this.selectionStart===this.cursorPos&&this.alignCursor()}},{key:"on",value:function(t,e){return this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(e),this}},{key:"off",value:function(t,e){if(!this._listeners[t])return this;if(!e)return delete this._listeners[t],this;var n=this._listeners[t].indexOf(e);return n>=0&&this._listeners[t].splice(n,1),this}},{key:"_onInput",value:function(t){if(this._inputEvent=t,this._abortUpdateCursor(),!this._selection)return this.updateValue();var e=new B(this.el.value,this.cursorPos,this.value,this._selection),n=this.masked.rawInputValue,i=this.masked.splice(e.startChangePos,e.removed.length,e.inserted,e.removeDirection).offset,u=n===this.masked.rawInputValue?e.removeDirection:m,s=this.masked.nearestInputPos(e.startChangePos+i,u);this.updateControl(),this.updateCursor(s),delete this._inputEvent}},{key:"_onChange",value:function(){this.value!==this.el.value&&this.updateValue(),this.masked.doCommit(),this.updateControl(),this._saveSelection()}},{key:"_onDrop",value:function(t){t.preventDefault(),t.stopPropagation()}},{key:"_onFocus",value:function(t){this.alignCursorFriendly()}},{key:"_onClick",value:function(t){this.alignCursorFriendly()}},{key:"destroy",value:function(){this._unbindEvents(),this._listeners.length=0,delete this.el}},{key:"mask",get:function(){return this.masked.mask},set:function(t){if(!this.maskEquals(t))if(t instanceof w.Masked||this.masked.constructor!==x(t)){var e=T({mask:t});e.unmaskedValue=this.masked.unmaskedValue,this.masked=e}else this.masked.updateOptions({mask:t})}},{key:"value",get:function(){return this._value},set:function(t){this.masked.value=t,this.updateControl(),this.alignCursor()}},{key:"unmaskedValue",get:function(){return this._unmaskedValue},set:function(t){this.masked.unmaskedValue=t,this.updateControl(),this.alignCursor()}},{key:"typedValue",get:function(){return this.masked.typedValue},set:function(t){this.masked.typedValue=t,this.updateControl(),this.alignCursor()}},{key:"selectionStart",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionStart}},{key:"cursorPos",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionEnd},set:function(t){this.el&&this.el.isActive&&(this.el.select(t,t),this._saveSelection())}}]),t}();w.InputMask=Q;var tt=Q,et=w,nt=function(t){function e(){return u(this,e),c(this,o(e).apply(this,arguments))}return a(e,t),r(e,[{key:"_update",value:function(t){t.enum&&(t.mask="*".repeat(t.enum[0].length)),f(o(e.prototype),"_update",this).call(this,t)}},{key:"doValidate",value:function(){for(var t,n=this,i=arguments.length,u=new Array(i),s=0;s<i;s++)u[s]=arguments[s];return this.enum.some((function(t){return t.indexOf(n.unmaskedValue)>=0}))&&(t=f(o(e.prototype),"doValidate",this)).call.apply(t,[this].concat(u))}}]),e}(q);w.MaskedEnum=nt;var it=nt,ut=function(t){function e(t){return u(this,e),c(this,o(e).call(this,Object.assign({},e.DEFAULTS,{},t)))}return a(e,t),r(e,[{key:"_update",value:function(t){f(o(e.prototype),"_update",this).call(this,t),this._updateRegExps()}},{key:"_updateRegExps",value:function(){var t="^"+(this.allowNegative?"[+|\\-]?":""),e=(this.scale?"("+E(this.radix)+"\\d{0,"+this.scale+"})?":"")+"$";this._numberRegExpInput=new RegExp(t+"(0|([1-9]+\\d*))?"+e),this._numberRegExp=new RegExp(t+"\\d*"+e),this._mapToRadixRegExp=new RegExp("["+this.mapToRadix.map(E).join("")+"]","g"),this._thousandsSeparatorRegExp=new RegExp(E(this.thousandsSeparator),"g")}},{key:"_removeThousandsSeparators",value:function(t){return t.replace(this._thousandsSeparatorRegExp,"")}},{key:"_insertThousandsSeparators",value:function(t){var e=t.split(this.radix);return e[0]=e[0].replace(/\B(?=(\d{3})+(?!\d))/g,this.thousandsSeparator),e.join(this.radix)}},{key:"doPrepare",value:function(t){for(var n,i=arguments.length,u=new Array(i>1?i-1:0),s=1;s<i;s++)u[s-1]=arguments[s];return(n=f(o(e.prototype),"doPrepare",this)).call.apply(n,[this,this._removeThousandsSeparators(t.replace(this._mapToRadixRegExp,this.radix))].concat(u))}},{key:"_separatorsCount",value:function(t){for(var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0,i=0;i<t;++i)this._value.indexOf(this.thousandsSeparator,i)===i&&(++n,e&&(t+=this.thousandsSeparator.length));return n}},{key:"_separatorsCountFromSlice",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._value;return this._separatorsCount(this._removeThousandsSeparators(t).length,!0)}},{key:"extractInput",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,i=arguments.length>2?arguments[2]:void 0,u=this._adjustRangeWithSeparators(t,n),s=k(u,2);return t=s[0],n=s[1],this._removeThousandsSeparators(f(o(e.prototype),"extractInput",this).call(this,t,n,i))}},{key:"_appendCharRaw",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.thousandsSeparator)return f(o(e.prototype),"_appendCharRaw",this).call(this,t,n);var i=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,u=this._separatorsCountFromSlice(i);this._value=this._removeThousandsSeparators(this.value);var s=f(o(e.prototype),"_appendCharRaw",this).call(this,t,n);this._value=this._insertThousandsSeparators(this._value);var r=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,a=this._separatorsCountFromSlice(r);return s.tailShift+=(a-u)*this.thousandsSeparator.length,s.skip=!s.rawInserted&&t===this.thousandsSeparator,s}},{key:"_findSeparatorAround",value:function(t){if(this.thousandsSeparator){var e=t-this.thousandsSeparator.length+1,n=this.value.indexOf(this.thousandsSeparator,e);if(n<=t)return n}return-1}},{key:"_adjustRangeWithSeparators",value:function(t,e){var n=this._findSeparatorAround(t);n>=0&&(t=n);var i=this._findSeparatorAround(e);return i>=0&&(e=i+this.thousandsSeparator.length),[t,e]}},{key:"remove",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value.length,n=this._adjustRangeWithSeparators(t,e),i=k(n,2);t=i[0],e=i[1];var u=this.value.slice(0,t),s=this.value.slice(e),r=this._separatorsCount(u.length);this._value=this._insertThousandsSeparators(this._removeThousandsSeparators(u+s));var a=this._separatorsCountFromSlice(u);return new S({tailShift:(a-r)*this.thousandsSeparator.length})}},{key:"nearestInputPos",value:function(t,e){if(!this.thousandsSeparator)return t;switch(e){case m:case y:case _:var n=this._findSeparatorAround(t-1);if(n>=0){var i=n+this.thousandsSeparator.length;if(t<i||this.value.length<=i||e===_)return n}break;case b:case A:var u=this._findSeparatorAround(t);if(u>=0)return u+this.thousandsSeparator.length}return t}},{key:"doValidate",value:function(t){var n=(t.input?this._numberRegExpInput:this._numberRegExp).test(this._removeThousandsSeparators(this.value));if(n){var i=this.number;n=n&&!isNaN(i)&&(null==this.min||this.min>=0||this.min<=this.number)&&(null==this.max||this.max<=0||this.number<=this.max)}return n&&f(o(e.prototype),"doValidate",this).call(this,t)}},{key:"doCommit",value:function(){if(this.value){var t=this.number,n=t;null!=this.min&&(n=Math.max(n,this.min)),null!=this.max&&(n=Math.min(n,this.max)),n!==t&&(this.unmaskedValue=String(n));var i=this.value;this.normalizeZeros&&(i=this._normalizeZeros(i)),this.padFractionalZeros&&(i=this._padFractionalZeros(i)),this._value=i}f(o(e.prototype),"doCommit",this).call(this)}},{key:"_normalizeZeros",value:function(t){var e=this._removeThousandsSeparators(t).split(this.radix);return e[0]=e[0].replace(/^(\D*)(0*)(\d*)/,(function(t,e,n,i){return e+i})),t.length&&!/\d$/.test(e[0])&&(e[0]=e[0]+"0"),e.length>1&&(e[1]=e[1].replace(/0*$/,""),e[1].length||(e.length=1)),this._insertThousandsSeparators(e.join(this.radix))}},{key:"_padFractionalZeros",value:function(t){if(!t)return t;var e=t.split(this.radix);return e.length<2&&e.push(""),e[1]=e[1].padEnd(this.scale,"0"),e.join(this.radix)}},{key:"unmaskedValue",get:function(){return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix,".")},set:function(t){v(o(e.prototype),"unmaskedValue",t.replace(".",this.radix),this,!0)}},{key:"typedValue",get:function(){return Number(this.unmaskedValue)},set:function(t){v(o(e.prototype),"unmaskedValue",String(t),this,!0)}},{key:"number",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"allowNegative",get:function(){return this.signed||null!=this.min&&this.min<0||null!=this.max&&this.max<0}}]),e}(M);ut.DEFAULTS={radix:",",thousandsSeparator:"",mapToRadix:["."],scale:2,signed:!1,normalizeZeros:!0,padFractionalZeros:!1},w.MaskedNumber=ut;var st=ut,rt=function(t){function e(){return u(this,e),c(this,o(e).apply(this,arguments))}return a(e,t),r(e,[{key:"_update",value:function(t){t.mask&&(t.validate=t.mask),f(o(e.prototype),"_update",this).call(this,t)}}]),e}(M);w.MaskedFunction=rt;var at=rt,ot=function(t){function e(t){var n;return u(this,e),(n=c(this,o(e).call(this,Object.assign({},e.DEFAULTS,{},t)))).currentMask=null,n}return a(e,t),r(e,[{key:"_update",value:function(t){f(o(e.prototype),"_update",this).call(this,t),"mask"in t&&(this.compiledMasks=Array.isArray(t.mask)?t.mask.map((function(t){return T(t)})):[])}},{key:"_appendCharRaw",value:function(){var t,e=this._applyDispatch.apply(this,arguments);this.currentMask&&e.aggregate((t=this.currentMask)._appendChar.apply(t,arguments));return e}},{key:"_applyDispatch",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.tail&&null!=e._beforeTailState?e._beforeTailState._value:this.value,i=this.rawInputValue,u=e.tail&&null!=e._beforeTailState?e._beforeTailState._rawInputValue:i,s=i.slice(u.length),r=this.currentMask,a=new S,o=r&&r.state;if(this.currentMask=this.doDispatch(t,Object.assign({},e)),this.currentMask)if(this.currentMask!==r){this.currentMask.reset();var l=this.currentMask.append(u,{raw:!0});a.tailShift=l.inserted.length-n.length,s&&(a.tailShift+=this.currentMask.append(s,{raw:!0,tail:!0}).tailShift)}else this.currentMask.state=o;return a}},{key:"_appendPlaceholder",value:function(){var t=this._applyDispatch.apply(this,arguments);return this.currentMask&&t.aggregate(this.currentMask._appendPlaceholder()),t}},{key:"doDispatch",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.dispatch(t,this,e)}},{key:"doValidate",value:function(){for(var t,n,i=arguments.length,u=new Array(i),s=0;s<i;s++)u[s]=arguments[s];return(t=f(o(e.prototype),"doValidate",this)).call.apply(t,[this].concat(u))&&(!this.currentMask||(n=this.currentMask).doValidate.apply(n,u))}},{key:"reset",value:function(){this.currentMask&&this.currentMask.reset(),this.compiledMasks.forEach((function(t){return t.reset()}))}},{key:"remove",value:function(){var t,e=new S;this.currentMask&&e.aggregate((t=this.currentMask).remove.apply(t,arguments)).aggregate(this._applyDispatch());return e}},{key:"extractInput",value:function(){var t;return this.currentMask?(t=this.currentMask).extractInput.apply(t,arguments):""}},{key:"extractTail",value:function(){for(var t,n,i=arguments.length,u=new Array(i),s=0;s<i;s++)u[s]=arguments[s];return this.currentMask?(t=this.currentMask).extractTail.apply(t,u):(n=f(o(e.prototype),"extractTail",this)).call.apply(n,[this].concat(u))}},{key:"doCommit",value:function(){this.currentMask&&this.currentMask.doCommit(),f(o(e.prototype),"doCommit",this).call(this)}},{key:"nearestInputPos",value:function(){for(var t,n,i=arguments.length,u=new Array(i),s=0;s<i;s++)u[s]=arguments[s];return this.currentMask?(t=this.currentMask).nearestInputPos.apply(t,u):(n=f(o(e.prototype),"nearestInputPos",this)).call.apply(n,[this].concat(u))}},{key:"value",get:function(){return this.currentMask?this.currentMask.value:""},set:function(t){v(o(e.prototype),"value",t,this,!0)}},{key:"unmaskedValue",get:function(){return this.currentMask?this.currentMask.unmaskedValue:""},set:function(t){v(o(e.prototype),"unmaskedValue",t,this,!0)}},{key:"typedValue",get:function(){return this.currentMask?this.currentMask.typedValue:""},set:function(t){var e=String(t);this.currentMask&&(this.currentMask.typedValue=t,e=this.currentMask.unmaskedValue),this.unmaskedValue=e}},{key:"isComplete",get:function(){return!!this.currentMask&&this.currentMask.isComplete}},{key:"state",get:function(){return Object.assign({},f(o(e.prototype),"state",this),{_rawInputValue:this.rawInputValue,compiledMasks:this.compiledMasks.map((function(t){return t.state})),currentMaskRef:this.currentMask,currentMask:this.currentMask&&this.currentMask.state})},set:function(t){var n=t.compiledMasks,i=t.currentMaskRef,u=t.currentMask,s=h(t,["compiledMasks","currentMaskRef","currentMask"]);this.compiledMasks.forEach((function(t,e){return t.state=n[e]})),null!=i&&(this.currentMask=i,this.currentMask.state=u),v(o(e.prototype),"state",s,this,!0)}},{key:"overwrite",get:function(){return this.currentMask?this.currentMask.overwrite:f(o(e.prototype),"overwrite",this)},set:function(t){console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings')}}]),e}(M);ot.DEFAULTS={dispatch:function(t,e,n){if(e.compiledMasks.length){var i=e.rawInputValue,u=e.compiledMasks.map((function(e,u){return e.reset(),e.append(i,{raw:!0}),e.append(t,n),{weight:e.rawInputValue.length,index:u}}));return u.sort((function(t,e){return e.weight-t.weight})),e.compiledMasks[u[0].index]}}},w.MaskedDynamic=ot;var lt=ot,ht={MASKED:"value",UNMASKED:"unmaskedValue",TYPED:"typedValue"};function ct(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ht.MASKED,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:ht.MASKED,i=T(t);return function(t){return i.runIsolated((function(i){return i[e]=t,i[n]}))}}function dt(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];return ct.apply(void 0,n)(t)}w.PIPE_TYPE=ht,w.createPipe=ct,w.pipe=dt;try{globalThis.IMask=et}catch(t){}e.default=et},,,,,,,,,,,,,,,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(6),n(2),n(34),n(7),n(36),n(17)},function(t,e,n){var i=n(35);"string"==typeof i&&(i=[[t.i,i,""]]);var u={hmr:!0,transform:void 0,insertInto:void 0};n(1)(i,u);i.locals&&(t.exports=i.locals)},function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(37);document.querySelectorAll(".js-registration-container").forEach((function(t){new i.LogicRoomReg(t)}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LogicRoomReg=void 0;var i=function(){function t(t){this.room=t,this.elements=this.findElement(),this.bindEventListeners()}return t.prototype.findElement=function(){var t=this.room.querySelector(".js-button_signIn"),e=this.room.querySelector(".js-button_regCreate"),n=this.room.querySelector(".js-registration-container__signing");return[t,e,this.room.querySelector(".js-registration-container__reg"),n]},t.prototype.bindEventListeners=function(){this.handleSignInButtonClick=this.handleSignInButtonClick.bind(this),this.elements[0].addEventListener("click",this.handleSignInButtonClick),this.handleAccountButtonClick=this.handleAccountButtonClick.bind(this),this.elements[1].addEventListener("click",this.handleAccountButtonClick)},t.prototype.handleAccountButtonClick=function(){this.elements[2].classList.toggle("registration-container_active"),this.elements[3].classList.remove("registration-container_active"),window.history.pushState({param:"Value"},"","registration.html"),this.room.classList.add("registration-container_reg-bg"),this.room.classList.remove("registration-container_signIn-bg")},t.prototype.handleSignInButtonClick=function(){this.elements[3].classList.toggle("registration-container_active"),this.elements[2].classList.remove("registration-container_active"),window.history.pushState({param:"Value"},"","signing.html"),this.room.classList.remove("registration-container_reg-bg"),this.room.classList.add("registration-container_signIn-bg")},t}();e.LogicRoomReg=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,